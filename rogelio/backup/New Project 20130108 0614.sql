-- MySQL Administrator dump 1.4
--
-- ------------------------------------------------------
-- Server version	5.5.10


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;

/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;


--
-- Create schema xymasterlist
--

CREATE DATABASE IF NOT EXISTS xymasterlist;
USE xymasterlist;

--
-- Definition of table `commandaccess`
--

DROP TABLE IF EXISTS `commandaccess`;
CREATE TABLE `commandaccess` (
  `EmpNumber` varchar(15) CHARACTER SET latin1 DEFAULT NULL,
  `MenuCode` varchar(40) CHARACTER SET latin1 DEFAULT NULL,
  `SubMenuCode` varchar(40) CHARACTER SET latin1 DEFAULT NULL,
  `CmdName` varchar(20) CHARACTER SET latin1 DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Dumping data for table `commandaccess`
--

/*!40000 ALTER TABLE `commandaccess` DISABLE KEYS */;
INSERT INTO `commandaccess` (`EmpNumber`,`MenuCode`,`SubMenuCode`,`CmdName`) VALUES 
 ('PRINCESS','HR','EmployeeInformation','ADD'),
 ('PRINCESS','HR','EmployeeInformation','SAVE'),
 ('PRINCESS','HR','EmployeeInformation','EDIT'),
 ('PRINCESS','HR','EmployeeInformation','DELETE'),
 ('PRINCESS','HR','EmployeeInformation','SEARCH'),
 ('PRINCESS','Reports','Accounting','PRINT'),
 ('123JEFF','Administrator','UserCommand','ADD'),
 ('123JEFF','Administrator','UserCommand','EDIT'),
 ('123JEFF','Administrator','UserCommand','PRINT'),
 ('123JEFF','Administrator','UserCommand','POST'),
 ('123ARNOLD','Accounting','accounts','ADD'),
 ('123ARNOLD','Accounting','accounts','EDIT'),
 ('123ARNOLD','Accounting','accounts','SEARCH'),
 ('123ARNOLD','Accounting','accounts','POST'),
 ('123456','HR','EmployeeInformation','ADD'),
 ('123456','HR','EmployeeInformation','SAVE'),
 ('123456','HR','EmployeeInformation','EDIT'),
 ('123456','HR','EmployeeInformation','DELETE'),
 ('123456','HR','EmployeeInformation','SEARCH'),
 ('123456','HR','EmployeeInformation','PRINT'),
 ('123456','Accounting','cashsales','ADD'),
 ('123456','Accounting','cashsales','SAVE'),
 ('123456','Accounting','cashsales','EDIT'),
 ('123456','Accounting','cashsales','DELETE'),
 ('123456','Accounting','cashsales','PRINT'),
 ('123456','Accounting','cashsales','SEARCH'),
 ('123456','Accounting','cashsales','POST'),
 ('123456','Accounting','Checkdisbursement','ADD'),
 ('123456','Accounting','Checkdisbursement','SAVE'),
 ('123456','Accounting','Checkdisbursement','DELETE'),
 ('123456','Accounting','Checkdisbursement','SEARCH'),
 ('123456','Accounting','Journal','ADD'),
 ('123456','Accounting','Journal','SAVE'),
 ('123456','Accounting','Journal','EDIT'),
 ('123456','Accounting','Journal','DELETE'),
 ('123456','Accounting','Journal','PRINT'),
 ('123456','Accounting','Journal','SEARCH'),
 ('123456','Accounting','Journal','POST'),
 ('123456','Accounting','purchases','ADD'),
 ('123456','Accounting','purchases','SAVE'),
 ('123456','Accounting','purchases','EDIT'),
 ('123456','Accounting','purchases','DELETE'),
 ('123456','Accounting','purchases','PRINT'),
 ('123456','Accounting','purchases','SEARCH'),
 ('123456','Accounting','purchases','POST'),
 ('123456','Accounting','cashreceipts','ADD'),
 ('123456','Accounting','cashreceipts','SAVE'),
 ('123456','Accounting','cashreceipts','EDIT'),
 ('123456','Accounting','cashreceipts','DELETE'),
 ('123456','Accounting','cashreceipts','PRINT'),
 ('123456','Accounting','cashreceipts','SEARCH'),
 ('123456','Accounting','cashreceipts','POST');
/*!40000 ALTER TABLE `commandaccess` ENABLE KEYS */;


--
-- Definition of table `commands`
--

DROP TABLE IF EXISTS `commands`;
CREATE TABLE `commands` (
  `CmdID` int(11) NOT NULL AUTO_INCREMENT,
  `SubMenu` varchar(40) CHARACTER SET latin1 DEFAULT NULL,
  `CmdName` varchar(20) CHARACTER SET latin1 NOT NULL,
  `CmdDescription` varchar(30) CHARACTER SET latin1 DEFAULT NULL,
  `CmdOrder` int(11) DEFAULT NULL,
  PRIMARY KEY (`CmdID`),
  UNIQUE KEY `cmdID` (`CmdID`)
) ENGINE=InnoDB AUTO_INCREMENT=232 DEFAULT CHARSET=utf8;

--
-- Dumping data for table `commands`
--

/*!40000 ALTER TABLE `commands` DISABLE KEYS */;
INSERT INTO `commands` (`CmdID`,`SubMenu`,`CmdName`,`CmdDescription`,`CmdOrder`) VALUES 
 (1,'accounts','SAVE','SAVE',2),
 (2,'accounts','ADD','ADD',1),
 (3,'accounts','EDIT','EDIT',3),
 (4,'accounts','DELETE','DELETE',4),
 (5,'accounts','SEARCH','SEARCH',5),
 (6,'accounts','PRINT','PRINT',6),
 (7,'accounts','POST','POST',7),
 (8,'subaccounts','ADD','ADD',1),
 (9,'subaccounts','SAVE','SAVE',2),
 (10,'subaccounts','EDIT','EDIT',3),
 (11,'Users','ADD','ADD',1),
 (12,'Users','SAVE','SAVE',2),
 (13,'Users','EDIT','EDIT',3),
 (14,'Users','DELETE','DELETE',4),
 (15,'Users','SEARCH','SEARCH',5),
 (16,'UserModule','ADD','ADD',1),
 (17,'UserModule','EDIT','EDIT',3),
 (18,'UserModule','SAVE','SAVE',2),
 (19,'UserModule','DELETE','DELETE',4),
 (20,'UserSubModule','ADD','ADD',1),
 (21,'UserSubModule','SAVE','SAVE',2),
 (22,'UserSubModule','EDIT','EDIT',3),
 (23,'UserSubModule','DELETE','DELETE',4),
 (24,'EmployeeInformation','ADD','ADD',1),
 (25,'EmployeeInformation','SAVE','SAVE',2),
 (26,'EmployeeInformation','EDIT','EDIT',3),
 (27,'EmployeeInformation','DELETE','DELETE',4),
 (28,'EmployeeInformation','SEARCH','SEARCH',5),
 (29,'UserModule','SEARCH','SEARCH',5),
 (30,'UserSubModule','SEARCH','SEARCH',5),
 (31,'usercommand','ADD','ADD',1),
 (32,'cashreceipts','ADD','ADD',1),
 (33,'cashsales','ADD','ADD',1),
 (34,'chargesales','ADD','ADD',1),
 (35,'Checkdisbursement','ADD','ADD',1),
 (36,'purchases','ADD','ADD',1),
 (37,'Journal','ADD','ADD',1),
 (38,'Accounting','PRINT','PRINT',1),
 (40,'Command','ADD','ADD',1),
 (41,'Company','ADD','ADD',1),
 (42,'DeliveryReceipt','ADD','ADD',1),
 (43,'Dispatching','ADD','ADD',1),
 (45,'Menu','ADD','ADD',1),
 (46,'Preparation','ADD','ADD',1),
 (47,'Remittance','ADD','ADD',1),
 (48,'SalesInvoice','ADD','ADD',1),
 (49,'SalesLedger','ADD','ADD',1),
 (50,'SubMenu','ADD','ADD',1),
 (51,'UserCommand','ADD','ADD',1),
 (52,'EmployeeInformation','PRINT','PRINT',6),
 (53,'Price','ADD','ADD',1),
 (54,'Price','SAVE','SAVE',2),
 (55,'Price','EDIT','EDIT',3),
 (56,'Price','DELETE','DELETE',4),
 (57,'Price','PRINT','PRINT',5),
 (58,'Marketing','ADD','ADD',1),
 (59,'Marketing','SAVE','SAVE',2),
 (60,'Marketing','EDIT','EDIT',3),
 (61,'Marketing','DELETE','DELETE',4),
 (62,'Marketing','PRINT','PRINT',5),
 (63,'Salesman','ADD','ADD',1),
 (64,'Salesman','SAVE','SAVE',2),
 (65,'Salesman','EDIT','EDIT',3),
 (66,'Salesman','DELETE','DELETE',4),
 (67,'Salesman','PRINT','PRINT',5),
 (69,'Outlet','ADD','ADD',1),
 (70,'Outlet','SAVE','SAVE',2),
 (71,'Outlet','EDIT','EDIT',3),
 (72,'Outlet','DELETE','DELETE',4),
 (73,'Outlet','PRINT','PRINT',5),
 (74,'Supplier','ADD','ADD',1),
 (75,'Supplier','SAVE','SAVE',2),
 (76,'Supplier','EDIT','EDIT',3),
 (77,'Supplier','DELETE','DELETE',4),
 (78,'Supplier','PRINT','PRINT',5),
 (79,'ItemGroup','ADD','ADD',1),
 (80,'ItemGroup','SAVE','SAVE',2),
 (81,'ItemGroup','EDIT','EDIT',3),
 (82,'ItemGroup','DELETE','DELETE',4),
 (83,'ItemGroup','PRINT','PRINT',5),
 (84,'ItemList','ADD','ADD',1),
 (85,'ItemList','SAVE','SAVE',2),
 (86,'ItemList','EDIT','EDIT',3),
 (87,'ItemList','DELETE','DELETE',4),
 (88,'ItemList','PRINT','PRINT',5),
 (89,'UOM','ADD','ADD',1),
 (90,'UOM','SAVE','SAVE',2),
 (91,'UOM','EDIT','EDIT',3),
 (92,'UOM','DELETE','DELETE',4),
 (93,'UOM','PRINT','PRINT',5),
 (94,'Region','ADD','ADD',1),
 (95,'Region','SAVE','SAVE',2),
 (96,'Region','EDIT','EDIT',3),
 (97,'Region','DELETE','DELETE',4),
 (98,'Region','PRINT','PRINT',5),
 (99,'Region','SEARCH','SEARCH',6),
 (100,'Region','POST','POST',7),
 (101,'Price','SEARCH','SEARCH',6),
 (102,'Price','POST','POST',7),
 (103,'Marketing','SEARCH','SEARCH',6),
 (104,'Marketing','POST','POST',7),
 (105,'Salesman','SEARCH','SEARCH',6),
 (106,'Salesman','POST','POST',7),
 (107,'Outlet','SEARCH','SEARCH',6),
 (108,'Outlet','POST','POST',7),
 (109,'Supplier','SEARCH','SEARCH',6),
 (110,'Supplier','POST','POST',7),
 (111,'ItemGroup','SEARCH','SEARCH',6),
 (112,'ItemGroup','POST','POST',7),
 (113,'ItemList','SEARCH','SEARCH',6),
 (114,'ItemList','POST','POST',7),
 (115,'UOM','SEARCH','SEARCH',6),
 (116,'UOM','POST','POST',7),
 (117,'Market','SAVE','SAVE',2),
 (118,'Market','EDIT','EDIT',3),
 (119,'Market','DELETE','DELETE',4),
 (120,'Market','PRINT','PRINT',5),
 (121,'Market','SEARCH','SEARCH',6),
 (122,'Market','POST','POST',7),
 (123,'Market','ADD','ADD',1),
 (124,'DeliveryReceipt','SAVE','SAVE',2),
 (125,'DeliveryReceipt','EDIT','EDIT',3),
 (126,'DeliveryReceipt','DELETE','DELETE',4),
 (127,'DeliveryReceipt','PRINT','PRINT',5),
 (128,'DeliveryReceipt','SEARCH','SEARCH',6),
 (129,'DeliveryReceipt','POST','POST',7),
 (131,'AknowledgementReceipt ','SAVE','SAVE',2),
 (132,'AknowledgementReceipt','EDIT','EDIT',3),
 (133,'AknowledgementReceipt','DELETE','DELETE',4),
 (134,'AknowledgementReceipt ','PRINT','PRINT',5),
 (135,'AknowledgementReceipt','SEARCH','SEARCH',6),
 (136,'AknowledgementReceipt','POST','POST',7),
 (137,'AknowledgementReceipt','ADD','ADD',1),
 (138,'SalesInvoice','SAVE','SAVE',2),
 (139,'SalesInvoice','EDIT','EDIT',3),
 (140,'SalesInvoice','DELETE','DELETE',4),
 (141,'SalesInvoice','PRINT','PRINT',5),
 (142,'SalesInvoice','SEARCH','SEARCH',6),
 (143,'SalesInvoice','POST','POST',7),
 (144,'subaccounts','DELETE','DELETE',4),
 (145,'subaccounts','PRINT','PRINT',5),
 (146,'subaccounts','SEARCH','SEARCH',6),
 (147,'subaccounts','POST','POST',7),
 (148,'cashsales','SAVE','SAVE',2),
 (149,'cashsales','EDIT','EDIT',3),
 (150,'cashsales','DELETE','DELETE',4),
 (151,'cashsales','PRINT','PRINT',5),
 (152,'cashsales','SEARCH','SEARCH',6),
 (153,'cashsales','POST','POST',7),
 (154,'chargesales','SAVE','SAVE',2),
 (155,'chargesales','EDIT','EDIT',3),
 (156,'chargesales','DELETE','DELETE',4),
 (157,'chargesales','PRINT','PRINT',5),
 (158,'chargesales','SEARCH','SEARCH',6),
 (159,'chargesales','POST','POST',7),
 (160,'cashreceipts','SAVE','SAVE',2),
 (161,'cashreceipts','EDIT','EDIT',3),
 (162,'cashreceipts','DELETE','DELETE',4),
 (163,'cashreceipts','PRINT','PRINT',5),
 (164,'cashreceipts','SEARCH','SEARCH',6),
 (165,'cashreceipts','POST','POST',7),
 (166,'Checkdisbursement','SAVE','SAVE',2),
 (167,'Checkdisbursement','EDIT','EDIT',3),
 (168,'Checkdisbursement','DELETE','DELETE',4),
 (169,'Checkdisbursement','PRINT','PRINT',5),
 (170,'Checkdisbursement','SEARCH','SEARCH',6),
 (171,'Checkdisbursement','POST','POST',7),
 (172,'Journal','SAVE','SAVE',2),
 (173,'Journal','EDIT','EDIT',3),
 (174,'Journal','DELETE','DELETE',4),
 (175,'Journal','PRINT','PRINT',5),
 (176,'Journal','SEARCH','SEARCH',6),
 (177,'Journal','POST','POST',7),
 (178,'purchases','SAVE','SAVE',2),
 (179,'purchases','EDIT','EDIT',3),
 (180,'purchases','DELETE','DELETE',4),
 (181,'purchases','PRINT','PRINT',5),
 (182,'purchases','SEARCH','SEARCH',6),
 (183,'purchases','POST','POST',7),
 (184,'Remittance','SAVE','SAVE',2),
 (185,'Remittance','EDIT','EDIT',3),
 (186,'Remittance','DELETE','DELETE',4),
 (187,'Remittance','PRINT','PRINT',5),
 (188,'Remittance','SEARCH','SEARCH',6),
 (189,'Remittance','POST','POST',7),
 (190,'SalesLedger','SAVE','SAVE',2),
 (191,'SalesLedger','EDIT','EDIT',3),
 (192,'SalesLedger','DELETE','DELETE',4),
 (193,'SalesLedger','PRINT','PRINT',5),
 (194,'SalesLedger','SEARCH','SEARCH',6),
 (195,'SalesLedger','POST','POST',7),
 (196,'Users','POST','POST',7),
 (197,'Users','PRINT','PRINT',5),
 (198,'UserModule','PRINT','PRINT',5),
 (199,'UserModule','POST','POST',7),
 (200,'UserSubModule','PRINT','PRINT',5),
 (201,'UserSubModule','POST','POST',7),
 (202,'UserCommand','SAVE','SAVE',2),
 (203,'UserCommand','EDIT','EDIT',3),
 (204,'UserCommand','DELETE','DELETE',4),
 (205,'UserCommand','PRINT','PRINT',5),
 (206,'UserCommand','SEARCH','SEARCH',6),
 (207,'UserCommand','POST','POST',7),
 (208,'Company','SAVE','SAVE',2),
 (209,'Company','EDIT','EDIT',3),
 (210,'Company','DELETE','DELETE',4),
 (211,'Company','PRINT','PRINT',5),
 (212,'Company','SEARCH','SEARCH',6),
 (213,'Company','POST','POST',7),
 (214,'Menu','SAVE','SAVE',2),
 (215,'Menu','EDIT','EDIT',3),
 (216,'Menu','DELETE','DELETE',4),
 (217,'Menu','PRINT','PRINT',5),
 (218,'Menu','SEARCH','SEARCH',6),
 (219,'Menu','POST','POST',7),
 (220,'SubMenu','SAVE','SAVE',2),
 (221,'SubMenu','EDIT','EDIT',3),
 (222,'SubMenu','DELETE','DELETE',4),
 (223,'SubMenu','PRINT','PRINT',5),
 (224,'SubMenu','SEARCH','SEARCH',6),
 (225,'SubMenu','POST','POST',7),
 (226,'Command','SAVE','SAVE',2),
 (227,'Command','EDIT','EDIT',3),
 (228,'Command','DELETE','DELETE',4),
 (229,'Command','PRINT','PRINT',5),
 (230,'Command','SEARCH','SEARCH',6),
 (231,'Command','POST','POST',7);
/*!40000 ALTER TABLE `commands` ENABLE KEYS */;


--
-- Definition of table `company`
--

DROP TABLE IF EXISTS `company`;
CREATE TABLE `company` (
  `companyid` varchar(30) CHARACTER SET latin1 NOT NULL,
  `companyname` varchar(100) CHARACTER SET latin1 NOT NULL,
  `Address` varchar(150) CHARACTER SET latin1 DEFAULT NULL,
  `author` varchar(45) CHARACTER SET latin1 NOT NULL,
  `stamp` datetime NOT NULL,
  `TinNumber` varchar(20) CHARACTER SET latin1 DEFAULT NULL,
  `Email1` varchar(80) CHARACTER SET latin1 DEFAULT NULL,
  PRIMARY KEY (`companyid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Dumping data for table `company`
--

/*!40000 ALTER TABLE `company` DISABLE KEYS */;
INSERT INTO `company` (`companyid`,`companyname`,`Address`,`author`,`stamp`,`TinNumber`,`Email1`) VALUES 
 ('xycompany','xycompany maritime','malabon metro manila','rogelio','2010-07-12 01:40:09',NULL,NULL);
/*!40000 ALTER TABLE `company` ENABLE KEYS */;


--
-- Definition of table `employeeinformation`
--

DROP TABLE IF EXISTS `employeeinformation`;
CREATE TABLE `employeeinformation` (
  `EmpNumber` varchar(15) CHARACTER SET latin1 NOT NULL,
  `EmpFirstName` varchar(20) CHARACTER SET latin1 NOT NULL,
  `EmpMiddleName` varchar(20) CHARACTER SET latin1 NOT NULL,
  `EmpLastName` varchar(20) CHARACTER SET latin1 NOT NULL,
  `EmpEmail` varchar(20) CHARACTER SET latin1 NOT NULL,
  `EmpCElpnumber` varchar(20) CHARACTER SET latin1 NOT NULL,
  `EmpMobileNumber` varchar(20) CHARACTER SET latin1 NOT NULL,
  `EmpGender` varchar(20) CHARACTER SET latin1 NOT NULL,
  `EmpStatus` varchar(20) CHARACTER SET latin1 NOT NULL,
  `EmpReligion` varchar(20) CHARACTER SET latin1 NOT NULL,
  `EmpMonth` varchar(20) CHARACTER SET latin1 NOT NULL,
  `EmpDay` varchar(20) CHARACTER SET latin1 NOT NULL,
  `EmpYear` varchar(20) CHARACTER SET latin1 NOT NULL,
  `EmpHeight` varchar(20) CHARACTER SET latin1 NOT NULL,
  `EmpWeight` varchar(20) CHARACTER SET latin1 NOT NULL,
  `EmpHomeAddress` varchar(200) CHARACTER SET latin1 NOT NULL,
  `EmpCollege` varchar(200) CHARACTER SET latin1 NOT NULL,
  `EmpCYAttended` varchar(20) CHARACTER SET latin1 NOT NULL,
  `EmpHigh` varchar(200) CHARACTER SET latin1 NOT NULL,
  `EmpYRHattended` varchar(20) CHARACTER SET latin1 NOT NULL,
  `EmpElem` varchar(200) CHARACTER SET latin1 NOT NULL,
  `EmpELEYRattended` varchar(20) CHARACTER SET latin1 NOT NULL,
  `EmpBirthDay` date NOT NULL,
  `Status` int(2) DEFAULT '1',
  PRIMARY KEY (`EmpNumber`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Dumping data for table `employeeinformation`
--

/*!40000 ALTER TABLE `employeeinformation` DISABLE KEYS */;
INSERT INTO `employeeinformation` (`EmpNumber`,`EmpFirstName`,`EmpMiddleName`,`EmpLastName`,`EmpEmail`,`EmpCElpnumber`,`EmpMobileNumber`,`EmpGender`,`EmpStatus`,`EmpReligion`,`EmpMonth`,`EmpDay`,`EmpYear`,`EmpHeight`,`EmpWeight`,`EmpHomeAddress`,`EmpCollege`,`EmpCYAttended`,`EmpHigh`,`EmpYRHattended`,`EmpElem`,`EmpELEYRattended`,`EmpBirthDay`,`Status`) VALUES 
 ('00001','angeki','asdgsdf','','','','','','','','','','','','','','','','','','','','0000-00-00',5),
 ('09','PRINCESS','TANGLAO','MALVECINO','','','','','','','','','','','','','','','','','','','0000-00-00',5),
 ('1','Prince Jm','Tanglao','Malvecino','','','','','','','','','','','','','','','','','','','0000-00-00',5),
 ('111111','kelly','kelly','kelly','','','','','','','','','','','','','','','','','','','0000-00-00',5),
 ('12','Marlin','s','Salvador','','','','','','','','','','','','','','','','','','','0000-00-00',5),
 ('121212','as','as','as','','','','','','','','','','','','','','','','','','','0000-00-00',5),
 ('123','Marlin','s','Salvador','','','','','','','','','','','','','','','','','','','0000-00-00',5),
 ('123456','Rogelio','Sunga','Malvecino','jhunskies1822@yahoo.','Cellphone Number','0990-9009','Male','married','catholic','February','21','190','jionel','ubalde','all the following is in the national all the following from one of the following fda','jionel','ubalde','ubaldejionel','ubalde','PULUNGMASLE ELEMENTARY SCHOOL','2011','2010-07-12',1),
 ('1234567','Marivic','Viray','Tanglao','','','','','','','','','','','','','','','','','','','0000-00-00',5),
 ('123456789','SAFSDF','SDF','SDF','SF','2123','123','Male','Single','SADF','January','2','2','2\'2','2','SDF	','SDF','1111','SDF	','1111','SDFS','2323','0000-00-00',5),
 ('123ARNOLD','Arnold','C','Binamira','','','','','','','','','','','','','','','','','','','0000-00-00',1),
 ('123JEFF','Jeffrey','Jeffrey','Jeffrey','dddssads','dsa','da','male','single','fda','January','fdfa','fda','fda','fdafa','fdafda','fdafa','fafda','fdafa','fda','fdf','fdaa','0000-00-00',1),
 ('2','Prince Jm','Tanglao','Malvecino','','','','','','','','','','','','','','','','','','','0000-00-00',5),
 ('2001','ANGELO','miranda','garcia','angelomiranda@ymail.','Cellphone Number','9999999999','male','single','Catholic','January','1','1989','123','123','asasd','asd','12','asd','122','asd','asd','0000-00-00',1),
 ('2010','angelo','miranda','garcia','angelomirandagarcia@','0190','019','Female','Married','cstholic','June','11','1989','undefined','5','Pampanga		','Pampanga	','2012','Pampanga','2012','Pampanga	  ','2012','0000-00-00',5),
 ('21','John','P','Siy','','','','','','','','','','','','','','','','','','','0000-00-00',5),
 ('23','Michael','Jordan','Jordan','','','','','','','','','','','','','','','','','','','0000-00-00',5),
 ('3','Prince Jm','Sunga','Malvecino','','','','','','','','','','','','','','','','','','','0000-00-00',5),
 ('321','randy','randy','randy','','','','','','','','','','','','','','','','','','','0000-00-00',5),
 ('4242','mary','jan','jan','','','','','','','','','','','','','','','','','','','0000-00-00',5),
 ('4321','jeff','jeff','jeff','','','','','','','','','','','','','','','','','','','0000-00-00',5),
 ('435','bong','bong','bong','','','','','','','','','','','','','','','','','','','0000-00-00',5),
 ('45','Jeff','Jeff','Jeff','','','','','','','','','','','','','','','','','','','0000-00-00',5),
 ('5','Princess','Tanglao','Malvecino','','','','','','','','','','','','','','','','','','','0000-00-00',5),
 ('789','Michael','J','Jordan','','','','','','','','','','','','','','','','','','','0000-00-00',5),
 ('8','Marlin','Tanglao','Malvecino','','','','','','','','','','','','','','','','','','','0000-00-00',5),
 ('8888','ROGELIO*','','%SUNGA','','','','','','','','','','','','','','','','','','','0000-00-00',5),
 ('a','a','a','a','','','','','','','','','','','','','','','','','','','0000-00-00',5),
 ('a123456','Jimmy','P','Siy','','','','','','','','','','','','','','','','','','','0000-00-00',5),
 ('a123456a','Jimmy','Paw','Siy','','','','','','','','','','','','','','','','','','','0000-00-00',5),
 ('a1b2c3','Mario','V','Tanglao','','','','','','','','','','','','','','','','','','','0000-00-00',5),
 ('abcde','Violy','virya','Tanglao','','','','','','','','','','','','','','','','','','','0000-00-00',5),
 ('ag','ag','ag','ag','','','','','','','','','','','','','','','','','','','0000-00-00',5),
 ('asdf','salas','asa','s','sdf','sdf','sadf','female','single','sdf','January','sdf','sadf','sdf','sdf','sdf','sdf','sdf','sdf','sdf','sdf','sdf','0000-00-00',5),
 ('dfg','dfg','sdgf','dfg','d','3','3','Male','Single','dfg','January','1','1','undefined','3','dfg	','sadf		','sadf','sdf		','sdf','sadf  ','sdf','0000-00-00',5),
 ('fda','fda','fda','fda','fda','fda','fda','female','married','','','','','fda','fda','','fda','','fda','','fda','','0000-00-00',5),
 ('fdafda','fda','fda','fda','fdaf','dafda','','male','single','fdafa','-Select Month-','fda','fdaf','fda','fda','fdafda','fdafa','fdafda','fdafda','fdafa','fdafda','fdafda','0000-00-00',5),
 ('fdafdaafda','jionel','joien','lubalde','ujionel@yahoo.com','jionel','jieooi','male','single','fdaa','January','fda','fd','fdaa','fda','fda','fda','fd','fda','fda','fda','fa','0000-00-00',5),
 ('fdafdaf','03','fdafda','fdafdafda','fdafda','fdafa','fdafdafda','male','single','fdafda','-Select Month-','fda','fa','fda','fda','fda','fda','fda','fda','fda','dfa','fda','0000-00-00',5),
 ('fffffffffffaaaa','2','ddddddd','ddddddddda','fda','fda','','male','married','fda','November','fda','fdafdafda','fdafda','Weight','fdfa','fdaf','fdafa','fda','fdafda','fdafda','-school year-','0000-00-00',5),
 ('g','g','g','g','','','','','','','','','','','','','','','','','','','0000-00-00',5),
 ('JEFF123','Jeffrey','Jeffrey','Jeffrey','','','','','','','','','','','','','','','','','','','0000-00-00',5),
 ('jionel','ubalde','ubaldeb','ubalde','ubale@yahoo.xom','12434321`','321431','male','married','','','','','fda','fda','','fda','','fda','','fda','','0000-00-00',5),
 ('jjjiioeqp','06','jionel','jjkkfjkdla','ipipoi','pipoip','','male','single','ipoipoi','-Select Month-','ipoipoi','poipo','ipoipo','ipoi','fdapoipo','fdaipoipo','iop','fdaipoipo','-school year-','fdapoipipoi','oppo','0000-00-00',5),
 ('ljfldalk','jionel','ubale','uuoi','jfldkjalj','ljfdlajlk','','male','single','fdaf','February','fda','fda','fda','fda','fdafa fdafda','fdafa','fdafa','fda','fda','fda','fda','0000-00-00',5),
 ('MARLINA','MARLIN','VIRAY','TANGLAO','','','','','','','','','','','','','','','','','','','0000-00-00',5),
 ('PRINCESS','PRINCESS','PRINCESS','PRINCESS','sada','dd','da','male','married','fdaf','February','fda','fda','fda','fda','fda','dfda','fdafa','fdafd','afdafa','fdafda','fdafda','0000-00-00',5),
 ('sa','sa','sa','sa','','','','','','','','','','','','','','','','','','','0000-00-00',5),
 ('sdf','dragon knight','sdf','sdf','sdf','sdf','sdf','male','single','sdf','February','1','1','sdf','ads','sdf','sadf','sdf','sdf','sdf','sdf','sf','0000-00-00',5),
 ('sss','sss','sss','sss','','','','','','','','','','','','','','','','','','','0000-00-00',5);
/*!40000 ALTER TABLE `employeeinformation` ENABLE KEYS */;


--
-- Definition of table `employeeinformation_detail`
--

DROP TABLE IF EXISTS `employeeinformation_detail`;
CREATE TABLE `employeeinformation_detail` (
  `EmpNumber` varchar(15) NOT NULL,
  `imageDescription` varchar(45) NOT NULL,
  `image` longblob NOT NULL,
  KEY `FK_employeeinformation_detail_1` (`EmpNumber`),
  CONSTRAINT `FK_employeeinformation_detail_1` FOREIGN KEY (`EmpNumber`) REFERENCES `employeeinformation` (`EmpNumber`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `employeeinformation_detail`
--

/*!40000 ALTER TABLE `employeeinformation_detail` DISABLE KEYS */;
INSERT INTO `employeeinformation_detail` (`EmpNumber`,`imageDescription`,`image`) VALUES 
 ('123456','spidy1.gif',
 ('123456','spidy2.jpg',0x
INSERT INTO `employeeinformation_detail` (`EmpNumber`,`imageDescription`,`image`) VALUES 
 ('123456','spidy4.jpg',
 ('123ARNOLD','spidy2.jpg',
 ('123456789','spidy1.gif',0x
/*!40000 ALTER TABLE `employeeinformation_detail` ENABLE KEYS */;


--
-- Definition of table `mainmenu`
--

DROP TABLE IF EXISTS `mainmenu`;
CREATE TABLE `mainmenu` (
  `MenuCode` varchar(40) NOT NULL,
  `MenuName` varchar(100) NOT NULL DEFAULT ' ',
  `MenuOrder` int(11) DEFAULT NULL,
  `Author` varchar(15) NOT NULL,
  `Stamp` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`MenuCode`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `mainmenu`
--

/*!40000 ALTER TABLE `mainmenu` DISABLE KEYS */;
INSERT INTO `mainmenu` (`MenuCode`,`MenuName`,`MenuOrder`,`Author`,`Stamp`) VALUES 
 ('Accounting','Accounting',2,'Rogelio Malveci','2012-08-29 18:03:30'),
 ('Administrator','Administrator Setup',7,'123456','2012-07-04 11:38:51'),
 ('Help','Help',10,'123456','2012-07-04 11:38:51'),
 ('HR','Human Resources',1,'123456','2012-07-04 11:38:51'),
 ('System','System Setup',8,'123456','2012-07-04 11:38:51');
/*!40000 ALTER TABLE `mainmenu` ENABLE KEYS */;


--
-- Definition of table `mainmenuaccess`
--

DROP TABLE IF EXISTS `mainmenuaccess`;
CREATE TABLE `mainmenuaccess` (
  `EmpNumber` varchar(15) CHARACTER SET latin1 DEFAULT NULL,
  `MenuCode` varchar(40) CHARACTER SET latin1 DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Dumping data for table `mainmenuaccess`
--

/*!40000 ALTER TABLE `mainmenuaccess` DISABLE KEYS */;
INSERT INTO `mainmenuaccess` (`EmpNumber`,`MenuCode`) VALUES 
 ('1','Accounting'),
 ('12','Accounting'),
 ('12','HR'),
 ('12','Marketing'),
 ('12','Reports'),
 ('12','Sales'),
 ('12','Administrator'),
 ('12','Warehouse'),
 ('8888','Warehouse'),
 ('435','Accounting'),
 ('435','HR'),
 ('21','Accounting'),
 ('a','Accounting'),
 ('123ARNOLD','Accounting'),
 ('123ARNOLD','Administrator'),
 ('123ARNOLD','HR'),
 ('123ARNOLD','Marketing'),
 ('123ARNOLD','Reports'),
 ('123ARNOLD','Sales'),
 ('123ARNOLD','System'),
 ('123ARNOLD','Warehouse'),
 ('234567','Accounting'),
 ('234567','HR'),
 ('234567','Marketing'),
 ('1234567','Accounting'),
 ('1234567','Administrator'),
 ('1234567','Help'),
 ('1234567','HR'),
 ('1234567','Masterfile'),
 ('1234567','Reports'),
 ('1234567','Sales'),
 ('1234567','System'),
 ('1234567','Warehouse'),
 ('PRINCESS','Accounting'),
 ('PRINCESS','Administrator'),
 ('PRINCESS','Help'),
 ('PRINCESS','HR'),
 ('PRINCESS','Marketing'),
 ('PRINCESS','Masterfile'),
 ('PRINCESS','Reports'),
 ('PRINCESS','Sales'),
 ('PRINCESS','System'),
 ('PRINCESS','Warehouse'),
 ('123JEFF','Administrator'),
 ('MARLINA','HR'),
 ('MARLINA','Masterfile'),
 ('MARLINA','Sales'),
 ('123456','Accounting'),
 ('123456','Administrator'),
 ('123456','Help'),
 ('123456','HR');
/*!40000 ALTER TABLE `mainmenuaccess` ENABLE KEYS */;


--
-- Definition of table `submenu`
--

DROP TABLE IF EXISTS `submenu`;
CREATE TABLE `submenu` (
  `MenuCode` varchar(40) DEFAULT NULL,
  `SubMenu` varchar(40) NOT NULL,
  `SubMenuName` varchar(100) DEFAULT NULL,
  `Pages` varchar(150) DEFAULT NULL,
  `SubMenuOrder` int(11) DEFAULT NULL,
  PRIMARY KEY (`SubMenu`),
  UNIQUE KEY `SubMenu` (`SubMenu`),
  KEY `FK_submenu_1` (`MenuCode`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `submenu`
--

/*!40000 ALTER TABLE `submenu` DISABLE KEYS */;
INSERT INTO `submenu` (`MenuCode`,`SubMenu`,`SubMenuName`,`Pages`,`SubMenuOrder`) VALUES 
 ('Help','about','About Us','aboutus.php',1),
 ('Accounting','accounts','Master Accounts','controlaccount_search.php',1),
 ('Accounting','BalanceSheet','Balance Sheet','balancesheet_search.php',9),
 ('Accounting','CashFlow','Cash Flow Statement','cashflow_search.php',11),
 ('Accounting','cashreceipts','Cash Receipts','cashreceipts_search.php',7),
 ('Accounting','cashsales','Sales Book','cashsales_search.php',3),
 ('Accounting','Checkdisbursement','Check Disbursement Book','checkdisbursement_search.php',4),
 ('System','Command','Commands Module Setup','command_search.php',4),
 ('System','Company','Company Setup','company_search.php',1),
 ('HR','EmployeeInformation','Employee Information','employee_search.php',1),
 ('Accounting','IncomeStatement','Income Statement','incomestatement_search.php',10),
 ('Accounting','Journal','Journal Book','generaljournal_search.php',5),
 ('System','Menu','Menu Module Setup','menu_search.php',2),
 ('Accounting','purchases','Purchase Book','purchases_search.php',6),
 ('Accounting','subaccounts','Sub Accounts','subsidiaryaccount_search.php',2),
 ('System','SubMenu','Sub Menu Module Setup','submenu_search.php',3),
 ('Accounting','TrialBalance','Trial Balance','trialbalance_search.php',8),
 ('Administrator','UserCommand','User Access Command Setup','usercommand_search.php',4),
 ('Administrator','UserModule','User Access Module Setup','usermainmodule_search.php',2),
 ('Administrator','Users','Users Setup','user_search.php',1),
 ('Administrator','UserSubModule','User Access Sub Module Setup','usersubmodule_search.php',3);
/*!40000 ALTER TABLE `submenu` ENABLE KEYS */;


--
-- Definition of table `submenuaccess`
--

DROP TABLE IF EXISTS `submenuaccess`;
CREATE TABLE `submenuaccess` (
  `EmpNumber` varchar(15) CHARACTER SET latin1 NOT NULL,
  `MenuCode` varchar(40) CHARACTER SET latin1 DEFAULT NULL,
  `SubMenuCode` varchar(40) CHARACTER SET latin1 DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Dumping data for table `submenuaccess`
--

/*!40000 ALTER TABLE `submenuaccess` DISABLE KEYS */;
INSERT INTO `submenuaccess` (`EmpNumber`,`MenuCode`,`SubMenuCode`) VALUES 
 ('8888','Warehouse','Preparation'),
 ('8888','Warehouse','Dispatching'),
 ('435','Accounting','accounts'),
 ('435','Accounting','subaccounts'),
 ('435','HR','EmployeeInformation'),
 ('21','Accounting','accounts'),
 ('21','Accounting','subaccounts'),
 ('12','Accounting','subaccounts'),
 ('12','Accounting','purchases'),
 ('12','Accounting','Journal'),
 ('12','Accounting','Checkdisbursement'),
 ('12','Accounting','chargesales'),
 ('12','Accounting','cashsales'),
 ('12','Accounting','cashreceipts'),
 ('12','Accounting','accounts'),
 ('123JEFF','Administrator','UserCommand'),
 ('1234567','Accounting','accounts'),
 ('1234567','Accounting','subaccounts'),
 ('123ARNOLD','Accounting','accounts'),
 ('123ARNOLD','Accounting','cashreceipts'),
 ('123ARNOLD','Accounting','cashsales'),
 ('123ARNOLD','Accounting','chargesales'),
 ('123ARNOLD','Accounting','Checkdisbursement'),
 ('123ARNOLD','Accounting','Journal'),
 ('123ARNOLD','Accounting','purchases'),
 ('123ARNOLD','Accounting','Remittance'),
 ('123ARNOLD','Accounting','SalesLedger'),
 ('123ARNOLD','Accounting','subaccounts'),
 ('123ARNOLD','Administrator','UserCommand'),
 ('123ARNOLD','Administrator','UserModule'),
 ('123ARNOLD','Administrator','Users'),
 ('123ARNOLD','Administrator','UserSubModule'),
 ('123ARNOLD','System','Command'),
 ('123ARNOLD','System','Company'),
 ('123ARNOLD','System','Menu'),
 ('123ARNOLD','System','SubMenu'),
 ('234567','Accounting','Checkdisbursement'),
 ('234567','Accounting','purchases'),
 ('PRINCESS','Accounting','accounts'),
 ('PRINCESS','Accounting','cashreceipts'),
 ('PRINCESS','Accounting','cashsales'),
 ('PRINCESS','Accounting','chargesales'),
 ('PRINCESS','Accounting','Checkdisbursement'),
 ('PRINCESS','Accounting','Journal'),
 ('PRINCESS','Accounting','purchases'),
 ('PRINCESS','Accounting','Remittance'),
 ('PRINCESS','Accounting','SalesLedger'),
 ('PRINCESS','Accounting','subaccounts'),
 ('PRINCESS','Administrator','UserCommand'),
 ('PRINCESS','Administrator','UserModule'),
 ('PRINCESS','Administrator','Users'),
 ('PRINCESS','Administrator','UserSubModule'),
 ('PRINCESS','HR','EmployeeInformation'),
 ('PRINCESS','Marketing','Market'),
 ('PRINCESS','Masterfile','ItemGroup'),
 ('PRINCESS','Masterfile','ItemList'),
 ('PRINCESS','Masterfile','Marketing'),
 ('PRINCESS','Masterfile','Outlet'),
 ('PRINCESS','Masterfile','Price'),
 ('PRINCESS','Masterfile','Region'),
 ('PRINCESS','Masterfile','Salesman'),
 ('PRINCESS','Masterfile','Supplier'),
 ('PRINCESS','Reports','Accounting'),
 ('PRINCESS','Sales','AknowledgementReceipt'),
 ('PRINCESS','Sales','DeliveryReceipt'),
 ('PRINCESS','Sales','SalesInvoice'),
 ('PRINCESS','System','Command'),
 ('PRINCESS','System','Company'),
 ('PRINCESS','System','Menu'),
 ('PRINCESS','System','SubMenu'),
 ('PRINCESS','Warehouse','Dispatching'),
 ('PRINCESS','Warehouse','Preparation'),
 ('MARLINA','HR','EmployeeInformation'),
 ('MARLINA','Masterfile','ItemGroup'),
 ('MARLINA','Masterfile','ItemList'),
 ('MARLINA','Masterfile','Supplier'),
 ('123456','Accounting','accounts'),
 ('123456','Accounting','BalanceSheet'),
 ('123456','Accounting','CashFlow'),
 ('123456','Accounting','cashreceipts'),
 ('123456','Accounting','cashsales'),
 ('123456','Accounting','Checkdisbursement'),
 ('123456','Accounting','IncomeStatement'),
 ('123456','Accounting','Journal'),
 ('123456','Accounting','purchases'),
 ('123456','Accounting','subaccounts'),
 ('123456','Accounting','TrialBalance'),
 ('123456','Administrator','UserCommand'),
 ('123456','Administrator','UserModule'),
 ('123456','Administrator','Users'),
 ('123456','Administrator','UserSubModule'),
 ('123456','Help','about'),
 ('123456','HR','EmployeeInformation');
/*!40000 ALTER TABLE `submenuaccess` ENABLE KEYS */;


--
-- Definition of table `suppliers_record`
--

DROP TABLE IF EXISTS `suppliers_record`;
CREATE TABLE `suppliers_record` (
  `SupplierCode` varchar(30) NOT NULL,
  `SupplierName` varchar(80) NOT NULL,
  `SupplierAddress` varchar(150) NOT NULL,
  `ContactPerson` varchar(80) NOT NULL,
  `SupplierPhone` varchar(45) NOT NULL,
  `SupplierMobile` varchar(45) NOT NULL,
  `SupplierEmail` varchar(45) NOT NULL,
  `SupplierFax` varchar(45) NOT NULL,
  `Author` varchar(30) NOT NULL,
  `Stamp` datetime NOT NULL,
  PRIMARY KEY (`SupplierCode`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `suppliers_record`
--

/*!40000 ALTER TABLE `suppliers_record` DISABLE KEYS */;
INSERT INTO `suppliers_record` (`SupplierCode`,`SupplierName`,`SupplierAddress`,`ContactPerson`,`SupplierPhone`,`SupplierMobile`,`SupplierEmail`,`SupplierFax`,`Author`,`Stamp`) VALUES 
 ('02','ANGELO GARCIA','PAMPANGA','M.I.S','123','09188888888','YAHOO.COM','FAX','Rogelio Malvecino','2012-07-17 11:33:34'),
 ('06','JIMMY','MANILA1','SY','25','20','UASDF','SADF','Rogelio Malvecino','2012-07-13 14:55:41'),
 ('sdf','angelo','add','asd','234','SAD','SDF','SDF','Rogelio Malvecino','2012-07-26 10:56:46');
/*!40000 ALTER TABLE `suppliers_record` ENABLE KEYS */;


--
-- Definition of table `tb_mcoadtl`
--

DROP TABLE IF EXISTS `tb_mcoadtl`;
CREATE TABLE `tb_mcoadtl` (
  `AccountID_cd` varchar(5) DEFAULT NULL,
  `Seq_No` int(11) DEFAULT NULL,
  `SubsidiaryID_cd` varchar(20) DEFAULT NULL,
  `SubsidiaryDesc_tx` varchar(80) DEFAULT NULL,
  `GrossProfit_yn` varchar(1) DEFAULT NULL,
  `GrossProfitType_tx` varchar(1) DEFAULT NULL,
  `GrossProfitDepartment_tx` varchar(2) DEFAULT NULL,
  KEY `FK_tb_mcoadtl_1` (`AccountID_cd`),
  CONSTRAINT `FK_tb_mcoadtl_1` FOREIGN KEY (`AccountID_cd`) REFERENCES `tb_mcoahdr` (`AccountID_cd`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8 AVG_ROW_LENGTH=109 COMMENT='InnoDB free: 22735872 kB; (`AccountID_cd`) REFER `xymasterlist';

--
-- Dumping data for table `tb_mcoadtl`
--

/*!40000 ALTER TABLE `tb_mcoadtl` DISABLE KEYS */;
INSERT INTO `tb_mcoadtl` (`AccountID_cd`,`Seq_No`,`SubsidiaryID_cd`,`SubsidiaryDesc_tx`,`GrossProfit_yn`,`GrossProfitType_tx`,`GrossProfitDepartment_tx`) VALUES 
 ('17300',1,'173000001','trucks and cards',NULL,NULL,NULL),
 ('59100',1,'591000001','BASIC PAY',NULL,NULL,NULL),
 ('59100',2,'591000002','OVERTIME PAY',NULL,NULL,NULL),
 ('59100',3,'591000003','13TH MONTH PAY',NULL,NULL,NULL),
 ('59100',4,'591000004','SENORITY PAY',NULL,NULL,NULL);
/*!40000 ALTER TABLE `tb_mcoadtl` ENABLE KEYS */;


--
-- Definition of table `tb_mcoagroup`
--

DROP TABLE IF EXISTS `tb_mcoagroup`;
CREATE TABLE `tb_mcoagroup` (
  `GroupID_cd` varchar(3) NOT NULL,
  `GroupName_tx` varchar(80) NOT NULL,
  `TypeID_id` int(11) NOT NULL,
  PRIMARY KEY (`GroupID_cd`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Dumping data for table `tb_mcoagroup`
--

/*!40000 ALTER TABLE `tb_mcoagroup` DISABLE KEYS */;
INSERT INTO `tb_mcoagroup` (`GroupID_cd`,`GroupName_tx`,`TypeID_id`) VALUES 
 ('101','Current Assets',1),
 ('102','Non - Current Assets',1),
 ('201','Current Liabilities',2),
 ('202','Non - Current Liabilities',2),
 ('301','Stockholders Equity',3),
 ('401','Service Revenue',4),
 ('402','Other Service Revenue',4),
 ('403','Non - Operating Income',4),
 ('501','Direct Cost',5),
 ('502','Indirect Cost',5),
 ('503','Other Expenses',5),
 ('601','Retained Earnings',6);
/*!40000 ALTER TABLE `tb_mcoagroup` ENABLE KEYS */;


--
-- Definition of table `tb_mcoahdr`
--

DROP TABLE IF EXISTS `tb_mcoahdr`;
CREATE TABLE `tb_mcoahdr` (
  `AccountID_cd` varchar(5) NOT NULL DEFAULT '',
  `AccountDesc_tx` varchar(80) NOT NULL,
  `GroupID_cd` varchar(3) NOT NULL,
  `Bank_yn` varchar(1) NOT NULL,
  `Debit_yn` varchar(1) NOT NULL,
  `CR_yn` varchar(1) NOT NULL,
  `PB_yn` varchar(1) NOT NULL,
  `CS_yn` varchar(1) NOT NULL,
  `BS_yn` varchar(1) DEFAULT NULL,
  `CD_yn` varchar(1) NOT NULL,
  `GJ_yn` varchar(1) NOT NULL,
  `BalanceSheet_yn` varchar(1) NOT NULL,
  `BalanceSheetType_tx` varchar(1) NOT NULL,
  `IncomeStatement_yn` varchar(1) NOT NULL,
  `IncomeStatementType_tx` varchar(1) NOT NULL,
  `baseline` longtext NOT NULL,
  `CashFlow_yn` varchar(1) NOT NULL,
  `CashFlowType_tx` varchar(1) NOT NULL,
  `ScheduleAP_yn` varchar(1) DEFAULT NULL,
  `ScheduleAR_yn` varchar(1) DEFAULT NULL,
  PRIMARY KEY (`AccountID_cd`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Dumping data for table `tb_mcoahdr`
--

/*!40000 ALTER TABLE `tb_mcoahdr` DISABLE KEYS */;
INSERT INTO `tb_mcoahdr` (`AccountID_cd`,`AccountDesc_tx`,`GroupID_cd`,`Bank_yn`,`Debit_yn`,`CR_yn`,`PB_yn`,`CS_yn`,`BS_yn`,`CD_yn`,`GJ_yn`,`BalanceSheet_yn`,`BalanceSheetType_tx`,`IncomeStatement_yn`,`IncomeStatementType_tx`,`baseline`,`CashFlow_yn`,`CashFlowType_tx`,`ScheduleAP_yn`,`ScheduleAR_yn`) VALUES 
 ('10100','CASH AND CASH EQUIVALENTS','101','0','1','1','1','1','0','1','1','1','1','0','0','vp2YOunelovm9ltNkvFKddiXClTPo+Ax9HlK+xuNCJyYY0RdTCkrTk7AbdFjFsQlCJS2aii6N3bd5Ndfq5gyjvfuk1oxDuoT5BV5jk//rAq45DYk6ZCN/TWYvwU5H90Jsdh/hVJqcsN7G5H7e14UMQ==','0','0',NULL,NULL),
 ('10200','CIB - BDO CALOOCAN','101','1','1','1','1','0','0','1','1','1','1','0','0','swc7hV1dFjCyMZmhx2t+IGdfb5wZIh+3GkHfm7q6bbwft/rhmfDx5aSJ4/QbA5hwy1xr4nA3mcJzclVX2Hv1tuxV3kfYevwVO+wGcL8N2Q1rfjGxJ+SyJNfu88YlA/H4','1','0',NULL,NULL),
 ('17300','EQUIPMENT','101','0','1','1','1','1','1','1','1','1','2','0','0','GtL/Fs7YRqHxn6r8fr2OA2SW76ULuHdryl2iIkRai+xwf//p/+Cpzb6PIw1tsXL34l6JfaJg8n7MHhBECGCzAl2An3NwMZYytkaV6+nlg0X0TMFLdVC+Ibfx7kvq3o19','0','0',NULL,NULL),
 ('20100','SERVICE REVENUE','101','0','0','0','0','1','0','0','1','0','0','1','1','LEoSieuvmTzLPqdVbRYRJHubwN1RV21twI31ei0q8WtB3XqY9cigcKwCExRWP00Not1QIwpztAkOX3BmXoJAKt+r9pWACLxXDjcGEIfaC2uRCmtlmTnLetK66B9mHrV3','0','0',NULL,NULL),
 ('59100','EMPLOYEE COSTS','503','0','0','0','0','0','0','1','1','0','0','1','5','zVFfBzPVo9Zps516/olLnWJAqyWM8auY9FrQpDUG3bfkgstMsLLB8Z7KqtFDssHxJFu6ebcOT0avkRWGsq7hzJs1cBBLUQeluC8Ml1tSgfD98zLY/e9I7h6LI4UACmCw','0','0',NULL,NULL),
 ('59101','PORT CHARGES','503','0','0','0','0','0','0','1','1','0','0','1','5','sH5EsdfC4MyEx0KEQvomjsfID/JPIiSPDMnIQKn9+goDz8g62S4PohN7nmdj1zi860M6g/Sz7Pk6uYNYCjwqdoKqFKX/q6zNszcEsxDMZ54m8orjBT6zvmjPDfJU5YMi','1','2',NULL,NULL),
 ('59200','MATERIALS AND SUPPLIES','503','0','1','0','1','0','0','1','1','0','0','1','5','utDQ5JgMsBi4fYvPZQihyMg0gJeGnuIsPwHkgHXfrwwEcF+fIpeQWciYoivb8boFahpOUuqLPnvYxr92dI17GZGHSzfLsaRc4ccN4ng4r6pYt/TfEckzl0FYQMvNp37P','0','0',NULL,NULL),
 ('59201','DEPREACIATION AMORTIZATION','503','0','0','0','0','0','0','1','1','0','0','1','5','fxqr1Mbjfj8IDuLV0s9wVMalI+noHnjhOAiQSlVpgtEobqYkqDeLDINH43xfy1w+f2BT6Niazrj3FqcQ3Jt/I9E1IvRYbWTyL1OTT6O2jS7hg00UFrT/bwiXeBOm3xLUJ2RJgj76SEedJmLEQV4plg==','1','2',NULL,NULL),
 ('59300','MAINTENANCE AND REPAIR','503','0','0','0','0','0','0','1','1','0','0','1','5','ECLoL9QiNqELnqfvVw/ON+odD6JOe89PXTPDzkVqYVRAkEmGKAy9hoPh+ephWYVodfFhsLlM/vxq6ZAntU4PKJRBZJZDLrVLA7THqWYIm7L8LWAPLLQyY9VlCYrffwS9','0','0',NULL,NULL),
 ('59400','INSURANCE','503','0','0','0','0','0','0','1','1','0','0','1','5','dgLCv4UYHvqaMRa/Si/T2h2tVO5kpiNOziXr9F5v/nT5eZalMy/U03DP3GZ/lfOTL8PaFU8R58twwDxfJtoRWmodaDAog5vg4P9TnZ9TbwDUxdvujiLuZr6YxJlTimhL','0','0',NULL,NULL),
 ('59500','TAXES AND LICENSES','503','0','0','0','0','0','0','1','1','0','0','1','5','AnsZ1px0bkpkLu6ebn0ubm4HlcqwKl3g25JHAPqi4cHFA8ODewituobcQaPlDiFjVGOEFG7iItn69pzqzmuioX8B3c9sLzXrXOKu2cprDJ4UFqF3NlTvjk0/1zfrw3z7','0','0',NULL,NULL),
 ('59600','CLASS ','503','0','0','0','0','0','0','1','1','0','0','1','5','bZdjnQG8Q8ywO2u+Xstr6l1lbubjqmfJNpWsOjZ4ybsZ27HMOdQUdNQ2HresyfhhW0ov0P3mDC1PP/p+T5pPPV5Z9RXyvTyxkAAzrJ8FCr8=','1','2',NULL,NULL),
 ('59700','BUSINESS EXPENSE','503','0','0','0','0','0','0','1','1','0','0','1','5','v3T+dFirBuIZpV7/kxUfQUu4vGha08cdvmRLWXG8667c2ADGld60E6Lm+DiKclJ6DuERFi/7fcQgeci+Z2UXtaLyVlNHE4+S5dAFDODb3cMaQ7k3fuxkEd66itqAPnTA','1','2',NULL,NULL),
 ('59800','PURCHASED SERVICES AND UTILITIES','503','0','0','0','0','0','0','1','1','0','0','1','5','h8eq1zsrOmqI2XjcHcmFtzhgCoy3+Tz1pRQLk3ovSN5urZp+lbkS4E7j+nGg4PQhUIjB1t9Dnz1DIqOk+7v98BuPjlkjRY0nEjZMYFwI3KSSagC3rj6atK1P+RPTOGTsxm2ygflUk3uq+s6s+r8gYg==','1','2',NULL,NULL),
 ('59900','FUEL AND OIL','503','0','0','0','0','0','0','1','1','0','0','1','5','1cTe2ACap/f6T1/uk1aA3qHPN8wDDmch42bP0aU3njTf8v2n2F9TdtYjcHjbLSqIklxD8mhgB9HQXRcUCur9/XWFeIK9VeKk7JDkzJk7qyCyRD5n2Sg+Fx50PhZHGTwf','1','2',NULL,NULL),
 ('60100','CAPITAL','301','0','0','0','0','0','0','0','1','1','6','0','0','qkZ0hhpk6IEhuAdZ7WEcE3sh6RT3X2yymUvasiFTApuraE9ZaW2EMtp/KKZT0RKfYoHzv+I9UZ6GY518LWm+3yEt8/aZh9BKwlnrHSDGLvs=','0','0',NULL,NULL);
/*!40000 ALTER TABLE `tb_mcoahdr` ENABLE KEYS */;


--
-- Definition of table `tb_mpaymaster`
--

DROP TABLE IF EXISTS `tb_mpaymaster`;
CREATE TABLE `tb_mpaymaster` (
  `PaymasterID_cd` varchar(15) NOT NULL DEFAULT '',
  `PaymasterName_tx` varchar(80) DEFAULT NULL,
  `PaymasterCheckName_tx` varchar(50) DEFAULT NULL,
  `TIN_tx` varchar(15) DEFAULT NULL,
  `Terms_no` int(11) DEFAULT NULL,
  `Address_tx` varchar(400) DEFAULT NULL,
  `TelNo_tx` varchar(25) DEFAULT NULL,
  `FaxNo_tx` varchar(25) DEFAULT NULL,
  `URL_tx` varchar(60) DEFAULT NULL,
  `Email_tx` varchar(60) DEFAULT NULL,
  `ContactPerson_tx` varchar(60) DEFAULT NULL,
  `PositionID_id` int(11) DEFAULT NULL,
  `Type_tx` varchar(1) DEFAULT NULL,
  `BranchID_cd` varchar(15) DEFAULT NULL,
  `ConsignmentID_cd` varchar(2) DEFAULT NULL,
  `baseline` longtext NOT NULL,
  PRIMARY KEY (`PaymasterID_cd`),
  KEY `PaymasterID_cd` (`PaymasterID_cd`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1 AVG_ROW_LENGTH=293 COMMENT='InnoDB free: 470016 kB';

--
-- Dumping data for table `tb_mpaymaster`
--

/*!40000 ALTER TABLE `tb_mpaymaster` DISABLE KEYS */;
/*!40000 ALTER TABLE `tb_mpaymaster` ENABLE KEYS */;


--
-- Definition of table `tb_tcashreceiptsdtl`
--

DROP TABLE IF EXISTS `tb_tcashreceiptsdtl`;
CREATE TABLE `tb_tcashreceiptsdtl` (
  `CRID_cd` varchar(15) CHARACTER SET latin1 DEFAULT NULL,
  `Seq_no` int(11) DEFAULT NULL,
  `AccountID_cd` varchar(5) CHARACTER SET latin1 DEFAULT NULL,
  `SubsidiaryID_cd` varchar(20) CHARACTER SET latin1 DEFAULT NULL,
  `DebitAmount_no` decimal(13,2) DEFAULT NULL,
  `CreditAmount_no` decimal(13,2) DEFAULT NULL,
  KEY `FK_tb_tcashreceiptsdtl_1` (`CRID_cd`),
  CONSTRAINT `FK_tb_tcashreceiptsdtl_1` FOREIGN KEY (`CRID_cd`) REFERENCES `tb_tcashreceiptshdr` (`CRID_cd`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Dumping data for table `tb_tcashreceiptsdtl`
--

/*!40000 ALTER TABLE `tb_tcashreceiptsdtl` DISABLE KEYS */;
/*!40000 ALTER TABLE `tb_tcashreceiptsdtl` ENABLE KEYS */;


--
-- Definition of table `tb_tcashreceiptshdr`
--

DROP TABLE IF EXISTS `tb_tcashreceiptshdr`;
CREATE TABLE `tb_tcashreceiptshdr` (
  `CRID_cd` varchar(15) CHARACTER SET latin1 NOT NULL,
  `CRDate_dt` date DEFAULT NULL,
  `ReferenceID_cd` varchar(15) DEFAULT NULL,
  `Amount_no` double DEFAULT NULL,
  `Particular_tx` varchar(255) CHARACTER SET latin1 DEFAULT NULL,
  `Post_yn` varchar(1) NOT NULL,
  `baseline` longtext,
  PRIMARY KEY (`CRID_cd`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 AVG_ROW_LENGTH=16384 COMMENT='InnoDB free: 4096 kB';

--
-- Dumping data for table `tb_tcashreceiptshdr`
--

/*!40000 ALTER TABLE `tb_tcashreceiptshdr` DISABLE KEYS */;
/*!40000 ALTER TABLE `tb_tcashreceiptshdr` ENABLE KEYS */;


--
-- Definition of table `tb_tcashsalesdtl`
--

DROP TABLE IF EXISTS `tb_tcashsalesdtl`;
CREATE TABLE `tb_tcashsalesdtl` (
  `CSID_cd` varchar(15) CHARACTER SET latin1 DEFAULT NULL,
  `Seq_no` int(11) DEFAULT NULL,
  `AccountID_cd` varchar(5) CHARACTER SET latin1 DEFAULT NULL,
  `SubsidiaryID_cd` varchar(20) CHARACTER SET latin1 DEFAULT NULL,
  `DebitAmount_no` decimal(13,2) DEFAULT NULL,
  `CreditAmount_no` decimal(13,2) DEFAULT NULL,
  KEY `FK_tb_tcashsalesdtl_1` (`CSID_cd`),
  CONSTRAINT `FK_tb_tcashsalesdtl_1` FOREIGN KEY (`CSID_cd`) REFERENCES `tb_tcashsaleshdr` (`CSID_cd`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Dumping data for table `tb_tcashsalesdtl`
--

/*!40000 ALTER TABLE `tb_tcashsalesdtl` DISABLE KEYS */;
INSERT INTO `tb_tcashsalesdtl` (`CSID_cd`,`Seq_no`,`AccountID_cd`,`SubsidiaryID_cd`,`DebitAmount_no`,`CreditAmount_no`) VALUES 
 ('00001',1,'20100','','0.00','45000.00'),
 ('00001',2,'10100','','45000.00','0.00');
/*!40000 ALTER TABLE `tb_tcashsalesdtl` ENABLE KEYS */;


--
-- Definition of table `tb_tcashsaleshdr`
--

DROP TABLE IF EXISTS `tb_tcashsaleshdr`;
CREATE TABLE `tb_tcashsaleshdr` (
  `CSID_cd` varchar(15) CHARACTER SET latin1 NOT NULL,
  `CSDate_dt` date DEFAULT NULL,
  `ReferenceID_cd` varchar(15) DEFAULT NULL,
  `Amount_no` double DEFAULT NULL,
  `Particular_tx` varchar(255) CHARACTER SET latin1 NOT NULL,
  `Post_yn` varchar(1) NOT NULL,
  `baseline` longtext,
  PRIMARY KEY (`CSID_cd`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Dumping data for table `tb_tcashsaleshdr`
--

/*!40000 ALTER TABLE `tb_tcashsaleshdr` DISABLE KEYS */;
INSERT INTO `tb_tcashsaleshdr` (`CSID_cd`,`CSDate_dt`,`ReferenceID_cd`,`Amount_no`,`Particular_tx`,`Post_yn`,`baseline`) VALUES 
 ('00001','2013-01-07','',45000,'','0','9hOoa7kOptaL2/GuAGWr70wi84HyTdmMaJiQ8Ke0Xe3iYUS7ZaFl+aeofYLE4nuD1ZEW5l+SK5lSa3rrRd2qPDggttP9E18xB6LXgitZqdAY7wZ52+g5TZisKtVU43d19ztUfzbmr9+seTrUxPei+U1LR7VW/tVhNPAHg9momt2cd7ktvQcDUWgOV429oCD2');
/*!40000 ALTER TABLE `tb_tcashsaleshdr` ENABLE KEYS */;


--
-- Definition of table `tb_tchargesalesdtl`
--

DROP TABLE IF EXISTS `tb_tchargesalesdtl`;
CREATE TABLE `tb_tchargesalesdtl` (
  `BSID_cd` varchar(15) CHARACTER SET latin1 DEFAULT NULL,
  `Seq_no` int(11) DEFAULT NULL,
  `AccountID_cd` varchar(5) CHARACTER SET latin1 DEFAULT NULL,
  `SubsidiaryID_cd` varchar(20) CHARACTER SET latin1 DEFAULT NULL,
  `DebitAmount_no` decimal(13,2) DEFAULT NULL,
  `CreditAmount_no` decimal(13,2) DEFAULT NULL,
  KEY `FK_tb_tchargesalesdtl_1` (`BSID_cd`),
  CONSTRAINT `FK_tb_tchargesalesdtl_1` FOREIGN KEY (`BSID_cd`) REFERENCES `tb_tchargesaleshdr` (`BSID_cd`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Dumping data for table `tb_tchargesalesdtl`
--

/*!40000 ALTER TABLE `tb_tchargesalesdtl` DISABLE KEYS */;
/*!40000 ALTER TABLE `tb_tchargesalesdtl` ENABLE KEYS */;


--
-- Definition of table `tb_tchargesaleshdr`
--

DROP TABLE IF EXISTS `tb_tchargesaleshdr`;
CREATE TABLE `tb_tchargesaleshdr` (
  `BSID_cd` varchar(15) CHARACTER SET latin1 NOT NULL,
  `BSDate_dt` date DEFAULT NULL,
  `ReferenceID_cd` varchar(15) DEFAULT NULL,
  `Amount_no` double DEFAULT NULL,
  `Particular_tx` varchar(255) CHARACTER SET latin1 NOT NULL,
  `Post_yn` varchar(1) NOT NULL,
  `baseline` longtext,
  PRIMARY KEY (`BSID_cd`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Dumping data for table `tb_tchargesaleshdr`
--

/*!40000 ALTER TABLE `tb_tchargesaleshdr` DISABLE KEYS */;
/*!40000 ALTER TABLE `tb_tchargesaleshdr` ENABLE KEYS */;


--
-- Definition of table `tb_tcheckdisbursementdtl`
--

DROP TABLE IF EXISTS `tb_tcheckdisbursementdtl`;
CREATE TABLE `tb_tcheckdisbursementdtl` (
  `CDID_cd` varchar(15) CHARACTER SET latin1 DEFAULT NULL,
  `Seq_no` int(11) DEFAULT NULL,
  `AccountID_cd` varchar(5) CHARACTER SET latin1 DEFAULT NULL,
  `SubsidiaryID_cd` varchar(20) CHARACTER SET latin1 DEFAULT NULL,
  `DebitAmount_no` decimal(13,2) DEFAULT NULL,
  `CreditAmount_no` decimal(13,2) DEFAULT NULL,
  KEY `FK_tb_tCheckDisbursementDTL_1` (`CDID_cd`),
  CONSTRAINT `FK_tb_tCheckDisbursementDTL_1` FOREIGN KEY (`CDID_cd`) REFERENCES `tb_tcheckdisbursementhdr` (`CDID_cd`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Dumping data for table `tb_tcheckdisbursementdtl`
--

/*!40000 ALTER TABLE `tb_tcheckdisbursementdtl` DISABLE KEYS */;
/*!40000 ALTER TABLE `tb_tcheckdisbursementdtl` ENABLE KEYS */;


--
-- Definition of table `tb_tcheckdisbursementhdr`
--

DROP TABLE IF EXISTS `tb_tcheckdisbursementhdr`;
CREATE TABLE `tb_tcheckdisbursementhdr` (
  `CDID_cd` varchar(15) CHARACTER SET latin1 NOT NULL DEFAULT '',
  `CDDate_dt` date DEFAULT NULL,
  `PaymasterID_cd` varchar(100) CHARACTER SET latin1 DEFAULT NULL,
  `ReferenceID_cd` varchar(15) DEFAULT NULL,
  `BankID_cd` varchar(15) CHARACTER SET latin1 DEFAULT NULL,
  `CheckNo_tx` varchar(15) CHARACTER SET latin1 DEFAULT NULL,
  `CheckDate_dt` date DEFAULT NULL,
  `Rate_no` double(15,3) DEFAULT NULL,
  `Amount_no` double DEFAULT NULL,
  `Released` char(1) DEFAULT NULL,
  `Cleared` char(1) DEFAULT NULL,
  `Particular_tx` varchar(255) CHARACTER SET latin1 DEFAULT NULL,
  `Post_yn` varchar(1) CHARACTER SET latin1 NOT NULL,
  `baseline` longtext,
  PRIMARY KEY (`CDID_cd`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='InnoDB free: 4096 kB';

--
-- Dumping data for table `tb_tcheckdisbursementhdr`
--

/*!40000 ALTER TABLE `tb_tcheckdisbursementhdr` DISABLE KEYS */;
/*!40000 ALTER TABLE `tb_tcheckdisbursementhdr` ENABLE KEYS */;


--
-- Definition of table `tb_tgeneraljournaldtl`
--

DROP TABLE IF EXISTS `tb_tgeneraljournaldtl`;
CREATE TABLE `tb_tgeneraljournaldtl` (
  `GJID_cd` varchar(15) CHARACTER SET latin1 DEFAULT NULL,
  `Seq_no` int(11) DEFAULT NULL,
  `AccountID_cd` varchar(5) CHARACTER SET latin1 DEFAULT NULL,
  `SubsidiaryID_cd` varchar(20) CHARACTER SET latin1 DEFAULT NULL,
  `DebitAmount_no` decimal(13,2) DEFAULT NULL,
  `CreditAmount_no` decimal(13,2) DEFAULT NULL,
  KEY `FK_tb_tgeneraljournaldtl_1` (`GJID_cd`),
  CONSTRAINT `FK_tb_tgeneraljournaldtl_1` FOREIGN KEY (`GJID_cd`) REFERENCES `tb_tgeneraljournalhdr` (`GJID_cd`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Dumping data for table `tb_tgeneraljournaldtl`
--

/*!40000 ALTER TABLE `tb_tgeneraljournaldtl` DISABLE KEYS */;
INSERT INTO `tb_tgeneraljournaldtl` (`GJID_cd`,`Seq_no`,`AccountID_cd`,`SubsidiaryID_cd`,`DebitAmount_no`,`CreditAmount_no`) VALUES 
 ('00001',1,'60100','','0.00','5000000.00'),
 ('00001',2,'10200','','5000000.00','0.00');
/*!40000 ALTER TABLE `tb_tgeneraljournaldtl` ENABLE KEYS */;


--
-- Definition of table `tb_tgeneraljournalhdr`
--

DROP TABLE IF EXISTS `tb_tgeneraljournalhdr`;
CREATE TABLE `tb_tgeneraljournalhdr` (
  `GJID_cd` varchar(15) CHARACTER SET latin1 NOT NULL DEFAULT '',
  `GJDate_dt` date DEFAULT NULL,
  `ReferenceID_cd` varchar(15) DEFAULT NULL,
  `Rate_no` double(15,3) DEFAULT NULL,
  `Amount_no` double DEFAULT NULL,
  `Particular_tx` varchar(255) CHARACTER SET latin1 DEFAULT NULL,
  `Post_yn` varchar(1) NOT NULL,
  `baseline` longtext,
  PRIMARY KEY (`GJID_cd`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Dumping data for table `tb_tgeneraljournalhdr`
--

/*!40000 ALTER TABLE `tb_tgeneraljournalhdr` DISABLE KEYS */;
INSERT INTO `tb_tgeneraljournalhdr` (`GJID_cd`,`GJDate_dt`,`ReferenceID_cd`,`Rate_no`,`Amount_no`,`Particular_tx`,`Post_yn`,`baseline`) VALUES 
 ('00001','2013-01-07','',NULL,5000000,'SAMPLE','0','0RzRGZQ4mfB6K7yv2hyEa3DTHuLHW5yIbBZ+anw5Y7i91F/xJBnR/ERwhm36OboBp+Xm7UVUpPwRmwSYfIXOnmJ2lFKNfpNQZ0yFneHd/W17Pw5fd/L8+XsqVWxkP5x4fNu5E/3PreUibU9rGd+n4CfSXzbnz56RxiaArodw5UpzhYrSNo9Ce6WAzz+o7Sos');
/*!40000 ALTER TABLE `tb_tgeneraljournalhdr` ENABLE KEYS */;


--
-- Definition of table `tb_tpurchasesdtl`
--

DROP TABLE IF EXISTS `tb_tpurchasesdtl`;
CREATE TABLE `tb_tpurchasesdtl` (
  `PBID_cd` varchar(15) CHARACTER SET latin1 DEFAULT NULL,
  `Seq_no` int(11) DEFAULT NULL,
  `AccountID_cd` varchar(5) CHARACTER SET latin1 DEFAULT NULL,
  `SubsidiaryID_cd` varchar(20) CHARACTER SET latin1 DEFAULT NULL,
  `DebitAmount_no` decimal(13,2) DEFAULT NULL,
  `CreditAmount_no` decimal(13,2) DEFAULT NULL,
  KEY `FK_tb_tpurchasesdtl_1` (`PBID_cd`),
  CONSTRAINT `FK_tb_tpurchasesdtl_1` FOREIGN KEY (`PBID_cd`) REFERENCES `tb_tpurchaseshdr` (`PBID_cd`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Dumping data for table `tb_tpurchasesdtl`
--

/*!40000 ALTER TABLE `tb_tpurchasesdtl` DISABLE KEYS */;
INSERT INTO `tb_tpurchasesdtl` (`PBID_cd`,`Seq_no`,`AccountID_cd`,`SubsidiaryID_cd`,`DebitAmount_no`,`CreditAmount_no`) VALUES 
 ('00001',1,'59200','','1000.00','0.00'),
 ('00001',2,'10100','','0.00','1000.00');
/*!40000 ALTER TABLE `tb_tpurchasesdtl` ENABLE KEYS */;


--
-- Definition of table `tb_tpurchaseshdr`
--

DROP TABLE IF EXISTS `tb_tpurchaseshdr`;
CREATE TABLE `tb_tpurchaseshdr` (
  `PBID_cd` varchar(15) CHARACTER SET latin1 NOT NULL,
  `PBDate_dt` date DEFAULT NULL,
  `ReferenceID_cd` varchar(15) NOT NULL,
  `Amount_no` double DEFAULT NULL,
  `Particular_tx` varchar(255) CHARACTER SET latin1 NOT NULL,
  `Post_yn` varchar(1) NOT NULL,
  `baseline` longtext,
  PRIMARY KEY (`PBID_cd`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Dumping data for table `tb_tpurchaseshdr`
--

/*!40000 ALTER TABLE `tb_tpurchaseshdr` DISABLE KEYS */;
INSERT INTO `tb_tpurchaseshdr` (`PBID_cd`,`PBDate_dt`,`ReferenceID_cd`,`Amount_no`,`Particular_tx`,`Post_yn`,`baseline`) VALUES 
 ('00001','2013-01-07','',1000,'PURCHASE','0','IeLHbSCA543ROvAVlclodyAGMic4ORVLuTeEi3cYpYgzegSMD4TJvK6BzWpvvM9vKFety6nFmm3EjeQrftDTRtSUYYnqVX9zWMKxFWHpL0gHobgeQCspENtqUu1ZXocZt2HbwkMMSe9bN4PciSCxxBkebl1n2gLE5V2+21IuINtNB4glNZAAn707mtJTzXRq');
/*!40000 ALTER TABLE `tb_tpurchaseshdr` ENABLE KEYS */;


--
-- Definition of table `tbl_themes`
--

DROP TABLE IF EXISTS `tbl_themes`;
CREATE TABLE `tbl_themes` (
  `EmpNumber` varchar(20) CHARACTER SET latin1 NOT NULL,
  `Code` text CHARACTER SET latin1 NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Dumping data for table `tbl_themes`
--

/*!40000 ALTER TABLE `tbl_themes` DISABLE KEYS */;
INSERT INTO `tbl_themes` (`EmpNumber`,`Code`) VALUES 
 ('123456','		\r\n		.dmx {\r\n    font: 11px tahoma;\r\n	float:left;\r\n}\r\n\r\n.dmx .item1,.dmx .item1-active{\r\n\r\n\r\n	text-align:center;\r\n	color:#FFFFFF;\r\n	border:1px solid #FFFFFF;\r\n    text-decoration: none;\r\n	padding:10px;\r\n	border-radius:5px;\r\n	height:40px;\r\n	line-height:40px;\r\n    white-space: nowrap;\r\n    position: relative;\r\n\r\n}\r\n\r\n\r\n.dmx .item2,\r\n.dmx .item2:hover,\r\n.dmx .item2-active,\r\n.dmx .item2-active:hover{\r\npadding:7px;\r\n    font: 10px tahoma;\r\n    font-weight: bold;\r\n	text-decoration:none;\r\n    display: block;\r\n    white-space: nowrap;\r\n    position: relative;\r\n    z-index: 500;\r\n	color:#003300;\r\n}\r\n\r\n.dmx .item2:hover{\r\nbackground-color:#003300;\r\ncolor:#FFFFFF;\r\n}\r\n\r\n\r\n.dmx .item2:hover,\r\n.dmx .item2-active,\r\n.dmx .item2-active:hover {\r\n\r\n}\r\n.dmx .arrow,\r\n.dmx .arrow:hover {\r\n    padding: 3px 16px 4px 8px;\r\n}\r\n.dmx .item2 img,\r\n.dmx .item2-active img{\r\n    position: absolute;\r\n    top: 4px;\r\n    right: 1px;\r\n    border: 0;\r\n}\r\n.dmx .section{\r\nbackground-color:#FFFFFF;\r\nwidth:180px;\r\n    position: absolute;\r\n    visibility: hidden;\r\n    z-index: -1;\r\n	box-shadow:1px 1px 1px #006600;\r\n}\r\ndiv.content\r\n{\r\nbackground-color:#FFFFFF;\r\nfloat:left;\r\nwidth:773px;\r\npadding-bottom:20px;\r\n\r\n\r\n}\r\n\r\ndiv.contents_{\r\nfont-size:18px;}\r\n\r\n\r\n/*heading*/\r\ndiv.heading\r\n{\r\npadding-top:25px;\r\npadding-bottom:25px;\r\npadding-right:50px;\r\npadding-left:50px;\r\n\r\nbackground: #ECF1EF;\r\nmargin:0px;\r\n  font: 20px arial;\r\n    color: #000000;\r\n    font-weight: bold;\r\n    position: relative;\r\n    display: block;\r\n    white-space: nowrap;\r\n}\r\n\r\ndiv.loguser\r\n{\r\npadding-top:12.5px;\r\npadding-bottom:12.5px;\r\npadding-right:25px;\r\npadding-left:25px;\r\n/*padding:5px;*/\r\nbackground: #ECF1EF;\r\nmargin:0px;\r\n  font: 10px arial;\r\n    color: #000000;\r\n    font-weight: bold;\r\n    position: relative;\r\n     display: block;\r\n    white-space: nowrap;\r\n}\r\n\r\n\r\n\r\ndiv.borderheading\r\n{\r\n\r\nborder:1px solid black;\r\nposition: relative;\r\ndisplay: block;\r\n    white-space: nowrap;\r\n}\r\ndiv.bordercontents\r\n{\r\n\r\nborder:3px solid black;\r\nposition: relative;\r\ndisplay: block;\r\n    white-space: nowrap;\r\n	height:300px;\r\n}\r\n\r\n\r\n\r\n\r\n/*Title*/\r\nTit1 {\r\ntext-align:center;\r\ntext-transform:uppercase;	\r\n}\r\nbody{\r\nbackground-image:url(images2/body3.jpg);\r\nmargin:0;\r\npadding:0;\r\n}\r\n\r\n\r\ndiv.bordermenu\r\n{\r\nfont-family:Arial, Helvetica, sans-serif;\r\nline-height:60px;\r\ntext-indent:15px;\r\ncolor:#000000;\r\ntext-transform:capitalize;\r\ntext-align:left;\r\n}\r\ndiv.outercontent{\r\n\r\n}\r\ndiv.container{\r\nbackground-color:#FFFFFF;\r\nborder:1px groove #A7C942;\r\nheight:720px;\r\nwidth:1150px;\r\n}\r\ndiv.header{\r\nbackground-image:url(images2/nablink.jpg);\r\nbackground-size:100% 100%;\r\nheight:150px;\r\nwidth:100%;\r\nline-height:150px;}\r\n\r\n#leftp{\r\nmargin:0;\r\npadding:0;\r\ntext-indent:20px;\r\ncolor:#FFFFFF;\r\nfloat:left;\r\ntext-shadow:1px 1px 1px #FFFFFF;\r\nfont-family:arial;\r\nfont-size:2.6em;\r\nposition:relative;\r\nanimation:myfirst 5s;\r\n-moz-animation:myfirst 5s; /* Firefox */\r\n-webkit-animation:myfirst 5s; /* Safari and Chrome */\r\n}\r\n\r\n\r\n\r\n\r\n@keyframes myfirst\r\n{\r\n0%   {background:red; left:0px; top:0px;}\r\n25%  {background:yellow; left:200px; top:0px;}\r\n50%  {background:blue; left:200px; top:200px;}\r\n75%  {background:green; left:0px; top:200px;}\r\n100% {background:red; left:0px; top:0px;}\r\n}\r\n\r\n@-moz-keyframes myfirst /* Firefox */\r\n{\r\n0%   {color:red; left:0px; top:0px;}\r\n25%  {color:yellow; left:400px; top:500px;}\r\n50%  {color:blue; left:700px; top:400px;}\r\n75%  {color:green; left:0px; top:100px;}\r\n100% {color:red; left:0px; top:0px;-moz-transform:rotate(720deg);}\r\n}\r\n\r\n@-webkit-keyframes myfirst /* Safari and Chrome */\r\n{\r\n0%   {color:red; left:0px; top:0px;}\r\n25%  {color:yellow; left:400px; top:500px;}\r\n50%  {color:blue; left:700px; top:400px;}\r\n75%  {color:green; left:0px; top:100px;}\r\n100% {color:red; left:0px; top:0px;-moz-transform:rotate(720deg);}\r\n}\r\n\r\n\r\n\r\n\r\n#rightp{\r\nfont-size:9px;\r\nfloat:right;\r\ncolor:#FFFFFF;\r\nmargin-right:10px;\r\nfont-family:arial;}\r\n\r\n\r\ndiv.navlink{\r\nbackground-image:url(images2/nablink.jpg);\r\nbackground-size:100% 100%;\r\nheight:50px;\r\nwidth:100%;}\r\n\r\n\r\n\r\n\r\ndiv.footer{\r\nwidth:1150px;\r\nheight:40px;\r\nbackground-color:#003300;\r\nline-height:40px;\r\ncolor:#FFFFFF;\r\nfont-family:Arial,Helvetica, sans-serif;\r\ntext-align:center;\r\nfont-size:10px;\r\ntext-indent:80px;}\r\n\r\ndiv.contentheader{\r\ncolor:#000000;\r\nheight:60px;\r\nwidth:100%;\r\n}\r\n\r\na.themes{\r\ntext-decoration:none;\r\ncolor:#FFFFFF;\r\nfont-size:9px;\r\n}\r\na.themes:hover{\r\ntext-decoration:underline;}\r\ndiv.contentright{\r\nborder-left:4px dotted #006600;\r\nheight:517px;\r\nwidth:370px;\r\nfloat:right;\r\n}\r\n\r\n\r\n\r\n\r\n* html .dmx td { position: relative; } /* ie 5.0 fix */\r\n\r\n\r\n\r\n/*______________________________________________________________________________*/\r\n\r\n\r\n\r\n.sortable{\r\nfont-family:Arial, Helvetica, sans-serif;\r\nwidth:100%;\r\nborder-collapse:collapse;}\r\n\r\n.sortable td, .sortable th{\r\n\r\nfont-size:1em;\r\nborder:1px solid #98bf21;\r\npadding:3px 7px 2px 7px;\r\n\r\n}\r\n\r\n.sortable th{\r\nfont-size:.9em;\r\ntext-align:left;\r\npadding-top:8px;\r\npadding-bottom:7px;\r\nbackground-color:#A7C942;\r\ncolor:#ffffff;\r\n}\r\n.sortable th a{\r\ntext-decoration:none;\r\ncolor:#ffffff;\r\nfont-size:9px;}\r\n\r\n\r\n.unsortable{\r\ncolor:#FFFFFF;\r\n-moz-border-radius-topright:10px;\r\n}\r\n\r\n.left{-moz-border-radius-topleft:10px;}\r\n\r\n\r\n\r\ntable.sortable td {\r\nfont-size:12px;\r\nfont-family:Arial, Helvetica, sans-serif;\r\ncolor:#999999;\r\n		border-width:0px;\r\n		text-align:left;\r\n		text-indent:10px;\r\n}\r\ntable.sortable td a{\r\ntext-decoration:none;\r\ncolor:#999999;\r\n}\r\ntable.sortable tr.odd td {\r\ncolor:#999999;\r\nbackground-color:#EAF2D3;\r\n}\r\n\r\ntable.sortable tr.odd td a:hover{\r\n\r\ntext-decoration:underline;}\r\n\r\ntable.sortable tr.even td {\r\n}\r\n\r\n\r\ntable.sortable tr.even td a:hover{\r\ncolor:#999999;\r\ntext-decoration:underline;\r\n}\r\n\r\n\r\n\r\ntable.sortable tr.sortbottom td {\r\n	border-top: 1px solid #444;\r\n	background-color: #ccc;\r\n	font-weight: bold;\r\n}\r\n\r\n\r\n.sortableto{\r\n}\r\n.sortableto tr td{\r\nfont-family:Arial, Helvetica, sans-serif;\r\ncolor:#000000;\r\nfont-size:12px;}\r\n.sortableto tr td input{\r\npadding:3px;\r\nborder:0;\r\nborder:1px solid #CCCCCC;\r\ncolor:#666666;\r\nborder-radius:5px;}\r\n\r\n.sortableto tr td input.send{\r\nbackground-color:#006600;\r\npadding:5px;\r\ncolor:#FFFFFF;\r\nborder-radius:10px;\r\nborder:0;}\r\ndiv.footerto{\r\n\r\nbackground-color:#A7C942;\r\nheight:20px;\r\nline-height:20px;\r\ntext-align:left;\r\n}\r\n\r\ndiv.footerto input.footer{\r\nbackground-color:#A7C942;\r\nborder:0;\r\ncolor:#FFFFFF;}\r\ndiv.footerto input.footer:hover{\r\ntext-decoration:underline;}\r\n\r\n.sortabletree{\r\nmargin-left:40px;\r\n}\r\n.sortabletree tr td{\r\ncolor:#FFFFFF;}\r\n.sortabletree tr td input{\r\npadding:5px;\r\ncolor:#666666;\r\nborder-radius:5px;}\r\n.sortabletree tr td input.send{\r\nbackground-color:#666666;\r\npadding:10px;\r\ncolor:#FFFFFF;\r\nborder-radius:10px;\r\nborder:0;}\r\n\r\n\r\n.sample tr td{\r\nfont-family:Arial, Helvetica, sans-serif;\r\ncolor:#999999;\r\ntext-transform:capitalize;\r\nwidth:300px;\r\nmargin:0;\r\n}\r\n.sample{\r\nborder:1px groove #666666;\r\nborder-radius:10px;\r\npadding:10px;}\r\n.sample tr th{\r\nbackground-color:#333333;\r\ncolor:#FFFFFF;\r\nfont-size:16px;\r\nborder-radius:10px;}\r\n\r\n'),
 ('234567','		\r\n		.dmx {\r\n    font: 11px tahoma;\r\n	float:left;\r\n}\r\n\r\n.dmx .item1,.dmx .item1-active{\r\n\r\n\r\n	text-align:center;\r\n	color:#FFFFFF;\r\n	border:1px solid #FFFFFF;\r\n    text-decoration: none;\r\n	padding:10px;\r\n	border-radius:5px;\r\n	height:40px;\r\n	line-height:40px;\r\n    white-space: nowrap;\r\n    position: relative;\r\n\r\n}\r\n\r\n\r\n.dmx .item2,\r\n.dmx .item2:hover,\r\n.dmx .item2-active,\r\n.dmx .item2-active:hover{\r\npadding:7px;\r\n    font: 10px tahoma;\r\n    font-weight: bold;\r\n	text-decoration:none;\r\n    display: block;\r\n    white-space: nowrap;\r\n    position: relative;\r\n    z-index: 500;\r\n	color:#003300;\r\n}\r\n\r\n.dmx .item2:hover{\r\nbackground-color:#003300;\r\ncolor:#FFFFFF;\r\n}\r\n\r\n\r\n.dmx .item2:hover,\r\n.dmx .item2-active,\r\n.dmx .item2-active:hover {\r\n\r\n}\r\n.dmx .arrow,\r\n.dmx .arrow:hover {\r\n    padding: 3px 16px 4px 8px;\r\n}\r\n.dmx .item2 img,\r\n.dmx .item2-active img{\r\n    position: absolute;\r\n    top: 4px;\r\n    right: 1px;\r\n    border: 0;\r\n}\r\n.dmx .section{\r\nbackground-color:#FFFFFF;\r\nwidth:180px;\r\n    position: absolute;\r\n    visibility: hidden;\r\n    z-index: -1;\r\n	box-shadow:1px 1px 1px #006600;\r\n}\r\ndiv.content\r\n{\r\nbackground-color:#FFFFFF;\r\nfloat:left;\r\nwidth:773px;\r\npadding-bottom:20px;\r\n\r\n\r\n}\r\n\r\ndiv.contents_{\r\nfont-size:18px;}\r\n\r\n\r\n/*heading*/\r\ndiv.heading\r\n{\r\npadding-top:25px;\r\npadding-bottom:25px;\r\npadding-right:50px;\r\npadding-left:50px;\r\n\r\nbackground: #ECF1EF;\r\nmargin:0px;\r\n  font: 20px arial;\r\n    color: #000000;\r\n    font-weight: bold;\r\n    position: relative;\r\n    display: block;\r\n    white-space: nowrap;\r\n}\r\n\r\ndiv.loguser\r\n{\r\npadding-top:12.5px;\r\npadding-bottom:12.5px;\r\npadding-right:25px;\r\npadding-left:25px;\r\n/*padding:5px;*/\r\nbackground: #ECF1EF;\r\nmargin:0px;\r\n  font: 10px arial;\r\n    color: #000000;\r\n    font-weight: bold;\r\n    position: relative;\r\n     display: block;\r\n    white-space: nowrap;\r\n}\r\n\r\n\r\n\r\ndiv.borderheading\r\n{\r\n\r\nborder:1px solid black;\r\nposition: relative;\r\ndisplay: block;\r\n    white-space: nowrap;\r\n}\r\ndiv.bordercontents\r\n{\r\n\r\nborder:3px solid black;\r\nposition: relative;\r\ndisplay: block;\r\n    white-space: nowrap;\r\n	height:300px;\r\n}\r\n\r\n\r\n\r\n\r\n/*Title*/\r\nTit1 {\r\ntext-align:center;\r\ntext-transform:uppercase;	\r\n}\r\nbody{\r\nbackground-image:url(images2/body3.jpg);\r\nmargin:0;\r\npadding:0;\r\n}\r\n\r\n\r\ndiv.bordermenu\r\n{\r\nfont-family:Arial, Helvetica, sans-serif;\r\nline-height:60px;\r\ntext-indent:15px;\r\ncolor:#000000;\r\ntext-transform:capitalize;\r\ntext-align:left;\r\n}\r\ndiv.outercontent{\r\n\r\n}\r\ndiv.container{\r\nbackground-color:#FFFFFF;\r\nborder:1px groove #A7C942;\r\nheight:720px;\r\nwidth:1150px;\r\n}\r\ndiv.header{\r\nbackground-image:url(images2/nablink.jpg);\r\nbackground-size:100% 100%;\r\nheight:150px;\r\nwidth:100%;\r\nline-height:150px;}\r\n\r\n#leftp{\r\nmargin:0;\r\npadding:0;\r\ntext-indent:20px;\r\ncolor:#FFFFFF;\r\nfloat:left;\r\ntext-shadow:1px 1px 1px #FFFFFF;\r\nfont-family:arial;\r\nfont-size:2.6em;\r\nposition:relative;\r\nanimation:myfirst 5s;\r\n-moz-animation:myfirst 5s; /* Firefox */\r\n-webkit-animation:myfirst 5s; /* Safari and Chrome */\r\n}\r\n\r\n\r\n\r\n\r\n@keyframes myfirst\r\n{\r\n0%   {background:red; left:0px; top:0px;}\r\n25%  {background:yellow; left:200px; top:0px;}\r\n50%  {background:blue; left:200px; top:200px;}\r\n75%  {background:green; left:0px; top:200px;}\r\n100% {background:red; left:0px; top:0px;}\r\n}\r\n\r\n@-moz-keyframes myfirst /* Firefox */\r\n{\r\n0%   {color:red; left:0px; top:0px;}\r\n25%  {color:yellow; left:400px; top:500px;}\r\n50%  {color:blue; left:700px; top:400px;}\r\n75%  {color:green; left:0px; top:100px;}\r\n100% {color:red; left:0px; top:0px;-moz-transform:rotate(720deg);}\r\n}\r\n\r\n@-webkit-keyframes myfirst /* Safari and Chrome */\r\n{\r\n0%   {color:red; left:0px; top:0px;}\r\n25%  {color:yellow; left:400px; top:500px;}\r\n50%  {color:blue; left:700px; top:400px;}\r\n75%  {color:green; left:0px; top:100px;}\r\n100% {color:red; left:0px; top:0px;-moz-transform:rotate(720deg);}\r\n}\r\n\r\n\r\n\r\n\r\n#rightp{\r\nfont-size:9px;\r\nfloat:right;\r\ncolor:#FFFFFF;\r\nmargin-right:10px;\r\nfont-family:arial;}\r\n\r\n\r\ndiv.navlink{\r\nbackground-image:url(images2/nablink.jpg);\r\nbackground-size:100% 100%;\r\nheight:50px;\r\nwidth:100%;}\r\n\r\n\r\n\r\n\r\ndiv.footer{\r\nwidth:1150px;\r\nheight:40px;\r\nbackground-color:#003300;\r\nline-height:40px;\r\ncolor:#FFFFFF;\r\nfont-family:Arial,Helvetica, sans-serif;\r\ntext-align:center;\r\nfont-size:10px;\r\ntext-indent:80px;}\r\n\r\ndiv.contentheader{\r\ncolor:#000000;\r\nheight:60px;\r\nwidth:100%;\r\n}\r\n\r\na.themes{\r\ntext-decoration:none;\r\ncolor:#FFFFFF;\r\nfont-size:9px;\r\n}\r\na.themes:hover{\r\ntext-decoration:underline;}\r\ndiv.contentright{\r\nborder-left:4px dotted #006600;\r\nheight:517px;\r\nwidth:370px;\r\nfloat:right;\r\n}\r\n\r\n\r\n\r\n\r\n* html .dmx td { position: relative; } /* ie 5.0 fix */\r\n\r\n\r\n\r\n/*______________________________________________________________________________*/\r\n\r\n\r\n\r\n.sortable{\r\nfont-family:Arial, Helvetica, sans-serif;\r\nwidth:100%;\r\nborder-collapse:collapse;}\r\n\r\n.sortable td, .sortable th{\r\n\r\nfont-size:1em;\r\nborder:1px solid #98bf21;\r\npadding:3px 7px 2px 7px;\r\n\r\n}\r\n\r\n.sortable th{\r\nfont-size:.9em;\r\ntext-align:left;\r\npadding-top:8px;\r\npadding-bottom:7px;\r\nbackground-color:#A7C942;\r\ncolor:#ffffff;\r\n}\r\n.sortable th a{\r\ntext-decoration:none;\r\ncolor:#ffffff;\r\nfont-size:9px;}\r\n\r\n\r\n.unsortable{\r\ncolor:#FFFFFF;\r\n-moz-border-radius-topright:10px;\r\n}\r\n\r\n.left{-moz-border-radius-topleft:10px;}\r\n\r\n\r\n\r\ntable.sortable td {\r\nfont-size:12px;\r\nfont-family:Arial, Helvetica, sans-serif;\r\ncolor:#999999;\r\n		border-width:0px;\r\n		text-align:left;\r\n		text-indent:10px;\r\n}\r\ntable.sortable td a{\r\ntext-decoration:none;\r\ncolor:#999999;\r\n}\r\ntable.sortable tr.odd td {\r\ncolor:#999999;\r\nbackground-color:#EAF2D3;\r\n}\r\n\r\ntable.sortable tr.odd td a:hover{\r\n\r\ntext-decoration:underline;}\r\n\r\ntable.sortable tr.even td {\r\n}\r\n\r\n\r\ntable.sortable tr.even td a:hover{\r\ncolor:#999999;\r\ntext-decoration:underline;\r\n}\r\n\r\n\r\n\r\ntable.sortable tr.sortbottom td {\r\n	border-top: 1px solid #444;\r\n	background-color: #ccc;\r\n	font-weight: bold;\r\n}\r\n\r\n\r\n.sortableto{\r\n}\r\n.sortableto tr td{\r\nfont-family:Arial, Helvetica, sans-serif;\r\ncolor:#000000;\r\nfont-size:12px;}\r\n.sortableto tr td input{\r\npadding:3px;\r\nborder:0;\r\nborder:1px solid #CCCCCC;\r\ncolor:#666666;\r\nborder-radius:5px;}\r\n\r\n.sortableto tr td input.send{\r\nbackground-color:#006600;\r\npadding:5px;\r\ncolor:#FFFFFF;\r\nborder-radius:10px;\r\nborder:0;}\r\ndiv.footerto{\r\n\r\nbackground-color:#A7C942;\r\nheight:20px;\r\nline-height:20px;\r\ntext-align:left;\r\n}\r\n\r\ndiv.footerto input.footer{\r\nbackground-color:#A7C942;\r\nborder:0;\r\ncolor:#FFFFFF;}\r\ndiv.footerto input.footer:hover{\r\ntext-decoration:underline;}\r\n\r\n.sortabletree{\r\nmargin-left:40px;\r\n}\r\n.sortabletree tr td{\r\ncolor:#FFFFFF;}\r\n.sortabletree tr td input{\r\npadding:5px;\r\ncolor:#666666;\r\nborder-radius:5px;}\r\n.sortabletree tr td input.send{\r\nbackground-color:#666666;\r\npadding:10px;\r\ncolor:#FFFFFF;\r\nborder-radius:10px;\r\nborder:0;}\r\n\r\n\r\n.sample tr td{\r\nfont-family:Arial, Helvetica, sans-serif;\r\ncolor:#999999;\r\ntext-transform:capitalize;\r\nwidth:300px;\r\nmargin:0;\r\n}\r\n.sample{\r\nborder:1px groove #666666;\r\nborder-radius:10px;\r\npadding:10px;}\r\n.sample tr th{\r\nbackground-color:#333333;\r\ncolor:#FFFFFF;\r\nfont-size:16px;\r\nborder-radius:10px;}\r\n\r\n');
/*!40000 ALTER TABLE `tbl_themes` ENABLE KEYS */;


--
-- Definition of table `usersaccess`
--

DROP TABLE IF EXISTS `usersaccess`;
CREATE TABLE `usersaccess` (
  `EmpNumber` varchar(15) CHARACTER SET latin1 DEFAULT NULL,
  `MenuCode` varchar(40) CHARACTER SET latin1 NOT NULL,
  `SubMenu` varchar(40) CHARACTER SET latin1 NOT NULL,
  KEY `FK_epmaccess_1` (`MenuCode`),
  KEY `FK_epmaccess_2` (`SubMenu`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;

--
-- Dumping data for table `usersaccess`
--

/*!40000 ALTER TABLE `usersaccess` DISABLE KEYS */;
INSERT INTO `usersaccess` (`EmpNumber`,`MenuCode`,`SubMenu`) VALUES 
 ('123456','Accounting','accounts'),
 ('123456','System','Users'),
 ('123456','Sales','DeliveryReceipt'),
 ('123456','Sales','SalesInvoice'),
 ('123456','Warehouse','Dispatching'),
 ('123456','Warehouse','Preparation'),
 ('123456','Accounting','subaccounts'),
 ('123456','HR','EmployeeInformation'),
 ('a123456','Accounting','accounts'),
 ('123456','System','UserModule'),
 ('123456','System','UserSubModule'),
 ('123456','Reports','Accounting');
/*!40000 ALTER TABLE `usersaccess` ENABLE KEYS */;


--
-- Definition of table `usersprofile`
--

DROP TABLE IF EXISTS `usersprofile`;
CREATE TABLE `usersprofile` (
  `EmpNumber` varchar(15) CHARACTER SET latin1 NOT NULL,
  `EmpUserName` varchar(20) CHARACTER SET latin1 NOT NULL,
  `EmpPassword` varchar(20) CHARACTER SET latin1 DEFAULT NULL,
  PRIMARY KEY (`EmpNumber`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;

--
-- Dumping data for table `usersprofile`
--

/*!40000 ALTER TABLE `usersprofile` DISABLE KEYS */;
INSERT INTO `usersprofile` (`EmpNumber`,`EmpUserName`,`EmpPassword`) VALUES 
 ('12','a','a'),
 ('123456','Rogelio','Malvecino'),
 ('1234567','Marivic','Marivic'),
 ('123ARNOLD','Arnold','Arnold'),
 ('123JEFF','Jeffrey','Jeffrey'),
 ('21','John','John'),
 ('234567','Jonel','Ubalde'),
 ('321','a','a'),
 ('3423','dsa',' rogelio'),
 ('435','bong',' bong'),
 ('789','Michael',' Jordan'),
 ('8888','ROGER',' ROGER'),
 ('a','dsa',' dsafsa'),
 ('a123456','Jimmy','Jimmy'),
 ('ag','ag',' ag'),
 ('MARLINA','marlina','marlina'),
 ('PRINCESS','Princess','Princess');
/*!40000 ALTER TABLE `usersprofile` ENABLE KEYS */;


--
-- Definition of table `xxxtbl_price`
--

DROP TABLE IF EXISTS `xxxtbl_price`;
CREATE TABLE `xxxtbl_price` (
  `Price_Id` varchar(10) CHARACTER SET latin1 NOT NULL,
  `Price_description` varchar(30) CHARACTER SET latin1 NOT NULL,
  PRIMARY KEY (`Price_Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Dumping data for table `xxxtbl_price`
--

/*!40000 ALTER TABLE `xxxtbl_price` DISABLE KEYS */;
INSERT INTO `xxxtbl_price` (`Price_Id`,`Price_description`) VALUES 
 ('01','Region 1'),
 ('02','REGION II');
/*!40000 ALTER TABLE `xxxtbl_price` ENABLE KEYS */;


--
-- Definition of procedure `rp_BalanceSheet`
--

DROP PROCEDURE IF EXISTS `rp_BalanceSheet`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `rp_BalanceSheet`(IN mBalanceSheetType_tx VARCHAR(1),
                                                          IN mMonth1 INTEGER,
                                                          IN mYear1 INTEGER,
                                                           IN mMonth2 INTEGER,
                                                           IN mYear2 INTEGER)
BEGIN
SELECT 1 AS 'Seq_no',
                        a.AccountID_cd,
                        CASE WHEN SUM(IFNULL(a.DebitAmount_no,0)) > SUM(IFNULL(a.CreditAmount_no,0))
                                THEN ROUND(SUM(IFNULL(a.DebitAmount_no,0)) - SUM(IFNULL(a.CreditAmount_no,0)),4)
                                ELSE 0 END AS 'Debit',
                        CASE WHEN SUM(IFNULL(a.CreditAmount_no,0)) > SUM(IFNULL(a.DebitAmount_no,0))
                                THEN ROUND(SUM(IFNULL(a.CreditAmount_no,0)) -SUM(IFNULL(a.DebitAmount_no,0)),4)
                                ELSE 0 END AS 'Credit',
                        CASE WHEN SUM(IFNULL(a.CurrentDebitAmount_no,0)) > SUM(IFNULL(a.CurrentCreditAmount_no,0))
                                THEN ROUND(SUM(IFNULL(a.CurrentDebitAmount_no,0)) - SUM(IFNULL(a.CurrentCreditAmount_no,0)),4)
                                ELSE 0 END AS 'CurrentDebit',
                        CASE WHEN SUM(IFNULL(a.CurrentCreditAmount_no,0)) > SUM(IFNULL(a.CurrentDebitAmount_no,0))
                                THEN ROUND(SUM(IFNULL(a.CurrentCreditAmount_no,0)) - SUM(IFNULL(a.CurrentDebitAmount_no,0)),4)
                                ELSE 0 END AS 'CurrentCredit'
                                
FROM

(SELECT   a.CRID_cd AS 'ControlID_cd',
                          a.CRDate_dt AS 'ControlDate_dt',
                          b.AccountID_cd,
                          b.Seq_no,
                          ROUND(b.DebitAmount_no,4) AS DebitAmount_no,
                          ROUND(b.CreditAmount_no,4) AS CreditAmount_no,
                          0 AS CurrentDebitAmount_no,
                          0 AS CurrentCreditAmount_no,
                          '1' AS Type_tx

                FROM tb_tcashreceiptshdr a

                LEFT JOIN
                (SELECT   CRID_cd,
                          AccountID_cd,
                          Seq_no,
                          ROUND(DebitAmount_no,4) AS DebitAmount_no,
                          ROUND(CreditAmount_no,4) AS CreditAmount_no,
                          '1' AS Type_tx
                FROM tb_tcashreceiptsdtl) b
                ON a.CRID_cd = b.CRID_cd

                WHERE     YEAR(a.CRDate_dt) <= mYear1 AND MONTH(a.CRDate_dt) <= mMonth1 AND a.Post_yn = '1'





                UNION





                SELECT    a.CRID_cd AS 'ControlID_cd',
                          a.CRDate_dt AS 'ControlDate_dt',
                          b.AccountID_cd,
                          b.Seq_no,
                          0 AS DebitAmount_no,
                          0 AS CreditAmount_no,
                          ROUND(b.DebitAmount_no,4) AS CurrentDebitAmount_no ,
                          ROUND(b.CreditAmount_no,4) AS CurrentCreditAmount_no,
                          '1' AS Type_tx

                FROM tb_tcashreceiptshdr a

                LEFT JOIN
                (SELECT  CRID_cd,
                         AccountID_cd,
                         Seq_no,
                         ROUND(DebitAmount_no,4) AS DebitAmount_no ,
                         ROUND(CreditAmount_no,4) AS CreditAmount_no,
                         '1' AS Type_tx
                FROM tb_tcashreceiptsdtl) b
                ON a.CRID_cd = b.CRID_cd

                WHERE    YEAR(a.CRDate_dt) <= mYear2 AND MONTH(a.CRDate_dt) <= mMonth2  AND a.Post_yn = '1'






                UNION





                SELECT   a.PBID_cd AS 'ControlID_cd',
                         a.PBDate_dt AS 'ControlDate_dt',
                         b.AccountID_cd,
                         b.Seq_no,
                         ROUND(b.DebitAmount_no,4) AS DebitAmount_no,
                         ROUND(b.CreditAmount_no,4) AS CreditAmount_no,
                         0 AS CurrentDebitAmount_no,
                         0 AS CurrentCreditAmount_no,
                         '2' AS Type_tx

                FROM tb_tpurchaseshdr a

                LEFT JOIN
                (SELECT PBID_cd,
                        AccountID_cd,
                        Seq_no,
                        ROUND(DebitAmount_no,4) AS DebitAmount_no,
                        ROUND(CreditAmount_no,4) AS CreditAmount_no,
                        '2' AS Type_tx
                FROM tb_tpurchasesdtl) b
                ON a.PBID_cd = b.PBID_cd

                WHERE  YEAR(a.PBDate_dt) <= mYear1 AND MONTH(a.PBDate_dt) <= mMonth1  AND a.Post_yn = '1'





                UNION





                SELECT  a.PBID_cd AS 'ControlID_cd',
                        a.PBDate_dt AS 'ControlDate_dt',
                        b.AccountID_cd,
                        b.Seq_no,
                        0 AS DebitAmount_no,
                        0 AS CreditAmount_no,
                        ROUND(b.DebitAmount_no,4) AS CurrentDebitAmount_no ,
                        ROUND(b.CreditAmount_no,4) AS CurrentCreditAmount_no,
                        '2' AS Type_tx

                FROM tb_tpurchaseshdr a

                LEFT JOIN
                (SELECT PBID_cd,
                        AccountID_cd,
                        Seq_no,
                        ROUND(DebitAmount_no,4) AS DebitAmount_no ,
                        ROUND(CreditAmount_no,4) AS CreditAmount_no,
                        '2' AS Type_tx
                FROM tb_tpurchasesdtl) b
                ON a.PBID_cd = b.PBID_cd

                WHERE   YEAR(a.PBDate_dt) <= mYear2 AND MONTH(a.PBDate_dt) <= mMonth2    AND a.Post_yn = '1'





                UNION





                SELECT  a.CSID_cd AS 'ControlID_cd',
                        a.CSDate_dt AS 'ControlDate_dt',
                        b.AccountID_cd,
                        b.Seq_no,
                        ROUND(b.DebitAmount_no,4) AS DebitAmount_no,
                        ROUND(b.CreditAmount_no,4) AS CreditAmount_no,
                        0 AS CurrentDebitAmount_no,
                        0 AS CurrentCreditAmount_no,
                        '3' AS Type_tx

                FROM tb_tcashsaleshdr a

                LEFT JOIN
                (SELECT CSID_cd,
                        AccountID_cd,
                        Seq_no,
                        ROUND(DebitAmount_no,4) AS DebitAmount_no,
                        ROUND(CreditAmount_no,4) AS CreditAmount_no,
                        '3' AS Type_tx
                FROM tb_tcashsalesdtl) b
                ON a.CSID_cd = b.CSID_cd

                WHERE   YEAR(a.CSDate_dt) <= mYear1 AND MONTH(a.CSDate_dt) <= mMonth1  AND a.Post_yn = '1'





                UNION





                SELECT   a.CSID_cd AS 'ControlID_cd',
                         a.CSDate_dt AS 'ControlDate_dt',
                         b.AccountID_cd,
                         b.Seq_no,
                         0 AS DebitAmount_no,
                         0 AS CreditAmount_no,
                         ROUND(b.DebitAmount_no,4) AS CurrentDebitAmount_no ,
                         ROUND(b.CreditAmount_no,4) AS CurrentCreditAmount_no,
                         '3' AS Type_tx

                FROM tb_tcashsaleshdr a

                LEFT JOIN
                (SELECT  CSID_cd,
                         AccountID_cd,
                         Seq_no,
                         ROUND(DebitAmount_no,4) AS DebitAmount_no ,
                         ROUND(CreditAmount_no,4) AS CreditAmount_no,
                         '3' AS Type_tx
                FROM tb_tcashsalesdtl) b
                ON a.CSID_cd = b.CSID_cd

                WHERE    YEAR(a.CSDate_dt) <= mYear2 AND MONTH(a.CSDate_dt) <= mMonth2  AND a.Post_yn = '1'






                UNION





                SELECT  a.BSID_cd AS 'ControlID_cd',
                        a.BSDate_dt AS 'ControlDate_dt',
                        b.AccountID_cd,
                        b.Seq_no,
                        ROUND(b.DebitAmount_no,4) AS DebitAmount_no,
                        ROUND(b.CreditAmount_no,4) AS CreditAmount_no,
                        0 AS CurrentDebitAmount_no,
                        0 AS CurrentCreditAmount_no,
                        '4' AS Type_tx

                FROM tb_tchargesaleshdr a

                LEFT JOIN
                (SELECT BSID_cd,
                        AccountID_cd,
                        Seq_no,
                        ROUND(DebitAmount_no,4) AS DebitAmount_no,
                        ROUND(CreditAmount_no,4) AS CreditAmount_no,
                        '4' AS Type_tx
                FROM tb_tchargesalesdtl) b
                ON a.BSID_cd = b.BSID_cd

                WHERE   YEAR(a.BSDate_dt) <= mYear1 AND MONTH(a.BSDate_dt) <= mMonth1 AND a.Post_yn = '1'





                UNION





                SELECT   a.BSID_cd AS 'ControlID_cd',
                         a.BSDate_dt AS 'ControlDate_dt',
                         b.AccountID_cd,
                         b.Seq_no,
                         0 AS DebitAmount_no,
                         0 AS CreditAmount_no,
                         ROUND(b.DebitAmount_no,4) AS CurrentDebitAmount_no ,
                         ROUND(b.CreditAmount_no,4) AS CurrentCreditAmount_no,
                         '4' AS Type_tx

                FROM tb_tchargesaleshdr a

                LEFT JOIN
                (SELECT  BSID_cd,
                         AccountID_cd,
                         Seq_no,
                         ROUND(DebitAmount_no,4) AS DebitAmount_no ,
                         ROUND(CreditAmount_no,4) AS CreditAmount_no,
                         '4' AS Type_tx
                FROM tb_tchargesalesdtl) b
                ON a.BSID_cd = b.BSID_cd

                WHERE    YEAR(a.BSDate_dt) <= mYear2 AND MONTH(a.BSDate_dt) <= mMonth2 AND a.Post_yn = '1'





                UNION





                SELECT  a.CDID_cd AS 'ControlID_cd',
                        a.CDDate_dt AS 'ControlDate_dt',
                        b.AccountID_cd,
                        b.Seq_no,
                        ROUND(b.DebitAmount_no,4) AS DebitAmount_no,
                        ROUND(b.CreditAmount_no,4) AS CreditAmount_no,
                        0 AS CurrentDebitAmount_no,
                        0 AS CurrentCreditAmount_no,
                        '5' AS Type_tx

                FROM tb_tcheckdisbursementhdr a

                LEFT JOIN
                (SELECT CDID_cd,
                        AccountID_cd,
                        Seq_no,
                        ROUND(DebitAmount_no,4) AS DebitAmount_no,
                        ROUND(CreditAmount_no,4) AS CreditAmount_no,
                        '5' AS Type_tx
                FROM tb_tcheckdisbursementdtl) b
                ON a.CDID_cd = b.CDID_cd

                WHERE   YEAR(a.CDDate_dt) <= mYear1 AND MONTH(a.CDDate_dt) <= mMonth1  AND a.Post_yn = '1'





                UNION





                SELECT  a.CDID_cd AS 'ControlID_cd',
                        a.CDDate_dt AS 'ControlDate_dt',
                        b.AccountID_cd,
                        b.Seq_no,
                        0 AS DebitAmount_no,
                        0 AS CreditAmount_no,
                        ROUND(b.DebitAmount_no,4) AS CurrentDebitAmount_no ,
                        ROUND(b.CreditAmount_no,4) AS CurrentCreditAmount_no,
                        '5' AS Type_tx

                FROM tb_tcheckdisbursementhdr a

                LEFT JOIN
                (SELECT CDID_cd,
                        AccountID_cd,
                        Seq_no,
                        ROUND(DebitAmount_no,4) AS DebitAmount_no ,
                        ROUND(CreditAmount_no,4) AS CreditAmount_no,
                        '5' AS Type_tx
                FROM tb_tcheckdisbursementdtl) b
                ON a.CDID_cd = b.CDID_cd

                WHERE   YEAR(a.CDDate_dt) <= mYear2 AND MONTH(a.CDDate_dt) <= mMonth2   AND a.Post_yn = '1'





                UNION





                SELECT  a.GJID_cd AS 'ControlID_cd',
                        a.GJDate_dt AS 'ControlDate_dt',
                        b.AccountID_cd,
                        b.Seq_no,
                        ROUND(b.DebitAmount_no,4) AS DebitAmount_no,
                        ROUND(b.CreditAmount_no,4) AS CreditAmount_no,
                        0 AS CurrentDebitAmount_no,
                        0 AS CurrentCreditAmount_no,
                        '6' AS Type_tx

                FROM tb_tgeneraljournalhdr a

                LEFT JOIN
                (SELECT GJID_cd,
                        AccountID_cd,
                        Seq_no,
                        ROUND(DebitAmount_no,4) AS DebitAmount_no,
                        ROUND(CreditAmount_no,4) AS CreditAmount_no,
                        '6' AS Type_tx
                FROM tb_tgeneraljournaldtl) b
                ON a.GJID_cd = b.GJID_cd

                WHERE   YEAR(a.GJDate_dt) <= mYear1 AND MONTH(a.GJDate_dt) <= mMonth1   AND a.Post_yn = '1'






                UNION





                SELECT  a.GJID_cd AS 'ControlID_cd',
                        a.GJDate_dt AS 'ControlDate_dt',
                        b.AccountID_cd,
                        b.Seq_no,
                        0 AS DebitAmount_no,
                        0 AS CreditAmount_no,
                        ROUND(b.DebitAmount_no,4) AS CurrentDebitAmount_no ,
                        ROUND(b.CreditAmount_no,4) AS CurrentCreditAmount_no,
                        '6' AS Type_tx

                FROM tb_tgeneraljournalhdr a

                LEFT JOIN
                (SELECT GJID_cd,
                        AccountID_cd,
                        Seq_no,
                        ROUND(DebitAmount_no,4) AS DebitAmount_no ,
                        ROUND(CreditAmount_no,4) AS CreditAmount_no,
                        '6' AS Type_tx
                FROM tb_tgeneraljournaldtl) b
                ON a.GJID_cd = b.GJID_cd

                WHERE   YEAR(a.GJDate_dt) <= mYear2 AND MONTH(a.GJDate_dt) <= mMonth2 AND a.Post_yn = '1') a
                
                
               GROUP BY a.AccountID_cd
                ;


END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `rp_BalanceSheet_Select`
--

DROP PROCEDURE IF EXISTS `rp_BalanceSheet_Select`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `rp_BalanceSheet_Select`(IN mBalanceSheetType_tx VARCHAR(1), IN mMonth1 INTEGER, IN mYear1 INTEGER, IN mMonth2 INTEGER, IN mYear2 INTEGER, iN mStatus varchar(1))
BEGIN

    
    
        if mBalanceSheetType_tx <> '0' then

                SELECT a.AccountID_cd,
                       a.AccountDesc_tx,
                       CASE a.Debit_yn
                                WHEN '1' THEN SUM(IFNULL(b.Debit,0)) - SUM(IFNULL(b.Credit,0))
                                ELSE SUM(IFNULL(b.Credit,0)) - SUM(IFNULL(b.Debit,0)) END AS 'LastAmount_no',
                       CASE a.Debit_yn
                                WHEN '1' THEN SUM(IFNULL(b.CurrentDebit,0)) - SUM(IFNULL(b.CurrentCredit,0))
                                ELSE SUM(IFNULL(b.CurrentCredit,0)) - SUM(IFNULL(b.CurrentDebit,0)) END AS 'CurrentAmount_no'

                FROM tb_mcoahdr a

		LEFT JOIN
		(SELECT 1 AS 'Seq_no',
                        a.AccountID_cd,
                        CASE WHEN SUM(IFNULL(a.DebitAmount_no,0)) > SUM(IFNULL(a.CreditAmount_no,0))
                                THEN ROUND(SUM(IFNULL(a.DebitAmount_no,0)) - SUM(IFNULL(a.CreditAmount_no,0)),4)
                                ELSE 0 END AS 'Debit',
                        CASE WHEN SUM(IFNULL(a.CreditAmount_no,0)) > SUM(IFNULL(a.DebitAmount_no,0))
                                THEN ROUND(SUM(IFNULL(a.CreditAmount_no,0)) -SUM(IFNULL(a.DebitAmount_no,0)),4)
                                ELSE 0 END AS 'Credit',
                        CASE WHEN SUM(IFNULL(a.CurrentDebitAmount_no,0)) > SUM(IFNULL(a.CurrentCreditAmount_no,0))
                                THEN ROUND(SUM(IFNULL(a.CurrentDebitAmount_no,0)) - SUM(IFNULL(a.CurrentCreditAmount_no,0)),4)
                                ELSE 0 END AS 'CurrentDebit',
                        CASE WHEN SUM(IFNULL(a.CurrentCreditAmount_no,0)) > SUM(IFNULL(a.CurrentDebitAmount_no,0))
                                THEN ROUND(SUM(IFNULL(a.CurrentCreditAmount_no,0)) - SUM(IFNULL(a.CurrentDebitAmount_no,0)),4)
                                ELSE 0 END AS 'CurrentCredit'
                           
                         
                         
                 FROM
                (SELECT   a.CRID_cd AS 'ControlID_cd',
                          a.CRDate_dt AS 'ControlDate_dt',
                          b.CRID_cd,
                          b.AccountID_cd,
                          b.Seq_no,
                          ROUND(b.DebitAmount_no,4) AS DebitAmount_no,
                          ROUND(b.CreditAmount_no,4) AS CreditAmount_no,
                          0 AS CurrentDebitAmount_no,
                          0 AS CurrentCreditAmount_no,
                          '1' AS Type_tx

                FROM tb_tcashreceiptshdr as a

                LEFT JOIN tb_tcashreceiptsdtl as b
                ON a.CRID_cd = b.CRID_cd

                WHERE     YEAR(a.CRDate_dt) = mYear1 AND MONTH(a.CRDate_dt) <= mMonth1 AND a.Post_yn LIKE CONCAT('',mStatus,'%')





                UNION





                SELECT    a.CRID_cd AS 'ControlID_cd',
                          a.CRDate_dt AS 'ControlDate_dt',
                          b.CRID_CD,
                          b.AccountID_cd,
                          b.Seq_no,
                          0 AS DebitAmount_no,
                          0 AS CreditAmount_no,
                          ROUND(b.DebitAmount_no,4) AS CurrentDebitAmount_no ,
                          ROUND(b.CreditAmount_no,4) AS CurrentCreditAmount_no,
                          '1' AS Type_tx

                FROM tb_tcashreceiptshdr as a

                LEFT JOIN tb_tcashreceiptsdtl as b
                ON a.CRID_cd = b.CRID_cd

                WHERE    YEAR(a.CRDate_dt) = mYear2 AND MONTH(a.CRDate_dt) <= mMonth2  AND a.Post_yn LIKE CONCAT('',mStatus,'%')






                UNION





                SELECT   a.PBID_cd AS 'ControlID_cd',
                         a.PBDate_dt AS 'ControlDate_dt',
                         b.PBID_cd,
                         b.AccountID_cd,
                         b.Seq_no,
                         ROUND(b.DebitAmount_no,4) AS DebitAmount_no,
                         ROUND(b.CreditAmount_no,4) AS CreditAmount_no,
                         0 AS CurrentDebitAmount_no,
                         0 AS CurrentCreditAmount_no,
                         '2' AS Type_tx

                FROM tb_tpurchaseshdr as a

                LEFT JOIN tb_tpurchasesdtl as b
                ON a.PBID_cd = b.PBID_cd

                WHERE  YEAR(a.PBDate_dt) = mYear1 AND MONTH(a.PBDate_dt) <= mMonth1  AND a.Post_yn LIKE CONCAT('',mStatus,'%')





                UNION





                SELECT  a.PBID_cd AS 'ControlID_cd',
                        a.PBDate_dt AS 'ControlDate_dt',
						b.PBID_cd,
                        b.AccountID_cd,
                        b.Seq_no,
                        0 AS DebitAmount_no,
                        0 AS CreditAmount_no,
                        ROUND(b.DebitAmount_no,4) AS CurrentDebitAmount_no ,
                        ROUND(b.CreditAmount_no,4) AS CurrentCreditAmount_no,
                        '2' AS Type_tx

                FROM tb_tpurchaseshdr as a

                LEFT JOIN tb_tpurchasesdtl as b
                ON a.PBID_cd = b.PBID_cd

                WHERE   YEAR(a.PBDate_dt) = mYear2 AND MONTH(a.PBDate_dt) <= mMonth2    AND a.Post_yn LIKE CONCAT('',mStatus,'%')





                UNION





                SELECT  a.CSID_cd AS 'ControlID_cd',
                        a.CSDate_dt AS 'ControlDate_dt', 
                        b.CSID_cd,
                        b.AccountID_cd,
                        b.Seq_no,
                        ROUND(b.DebitAmount_no,4) AS DebitAmount_no,
                        ROUND(b.CreditAmount_no,4) AS CreditAmount_no,
                        0 AS CurrentDebitAmount_no,
                        0 AS CurrentCreditAmount_no,
                        '3' AS Type_tx

                FROM tb_tcashsaleshdr as a

                LEFT JOIN tb_tcashsalesdtl as b
                ON a.CSID_cd = b.CSID_cd

                WHERE   YEAR(a.CSDate_dt) = mYear1 AND MONTH(a.CSDate_dt) <= mMonth1  AND a.Post_yn LIKE CONCAT('',mStatus,'%')





                UNION





                SELECT   a.CSID_cd AS 'ControlID_cd',
                         a.CSDate_dt AS 'ControlDate_dt',
                         b.CSID_cd,
                         b.AccountID_cd,
                         b.Seq_no,
                         0 AS DebitAmount_no,
                         0 AS CreditAmount_no,
                         ROUND(b.DebitAmount_no,4) AS CurrentDebitAmount_no ,
                         ROUND(b.CreditAmount_no,4) AS CurrentCreditAmount_no,
                         '3' AS Type_tx

                FROM tb_tcashsaleshdr as a

                LEFT JOIN tb_tcashsalesdtl as b
                ON a.CSID_cd = b.CSID_cd

                WHERE    YEAR(a.CSDate_dt) = mYear2 AND MONTH(a.CSDate_dt) <= mMonth2  AND a.Post_yn LIKE CONCAT('',mStatus,'%')






                UNION





                SELECT  a.BSID_cd AS 'ControlID_cd',
                        a.BSDate_dt AS 'ControlDate_dt',
                        b.BSID_cd,
                        b.AccountID_cd,
                        b.Seq_no,
                        ROUND(b.DebitAmount_no,4) AS DebitAmount_no,
                        ROUND(b.CreditAmount_no,4) AS CreditAmount_no,
                        0 AS CurrentDebitAmount_no,
                        0 AS CurrentCreditAmount_no,
                        '4' AS Type_tx

                FROM tb_tchargesaleshdr as a

                LEFT JOIN tb_tchargesalesdtl as b
                ON a.BSID_cd = b.BSID_cd

                WHERE   YEAR(a.BSDate_dt) = mYear1 AND MONTH(a.BSDate_dt) <= mMonth1 AND a.Post_yn LIKE CONCAT('',mStatus,'%')





                UNION





                SELECT   a.BSID_cd AS 'ControlID_cd',
                         a.BSDate_dt AS 'ControlDate_dt',
                         b.BSID_cd,
                         b.AccountID_cd,
                         b.Seq_no,
                         0 AS DebitAmount_no,
                         0 AS CreditAmount_no,
                         ROUND(b.DebitAmount_no,4) AS CurrentDebitAmount_no ,
                         ROUND(b.CreditAmount_no,4) AS CurrentCreditAmount_no,
                         '4' AS Type_tx

                FROM tb_tchargesaleshdr as a

                LEFT JOIN tb_tchargesalesdtl as b
                ON a.BSID_cd = b.BSID_cd

                WHERE    YEAR(a.BSDate_dt) = mYear2 AND MONTH(a.BSDate_dt) <= mMonth2 AND a.Post_yn LIKE CONCAT('',mStatus,'%')





                UNION





                SELECT  a.CDID_cd AS 'ControlID_cd',
                        a.CDDate_dt AS 'ControlDate_dt',
                        b.CDID_cd,
                        b.AccountID_cd,
                        b.Seq_no,
                        ROUND(b.DebitAmount_no,4) AS DebitAmount_no,
                        ROUND(b.CreditAmount_no,4) AS CreditAmount_no,
                        0 AS CurrentDebitAmount_no,
                        0 AS CurrentCreditAmount_no,
                        '5' AS Type_tx

                FROM tb_tcheckdisbursementhdr as a

                LEFT JOIN tb_tcheckdisbursementdtl as b
                ON a.CDID_cd = b.CDID_cd

                WHERE   YEAR(a.CDDate_dt) = mYear1 AND MONTH(a.CDDate_dt) <= mMonth1  AND a.Post_yn LIKE CONCAT('',mStatus,'%')





                UNION





                SELECT  a.CDID_cd AS 'ControlID_cd',
                        a.CDDate_dt AS 'ControlDate_dt',
                        b.CDID_cd,
                        b.AccountID_cd,
                        b.Seq_no,
                        0 AS DebitAmount_no,
                        0 AS CreditAmount_no,
                        ROUND(b.DebitAmount_no,4) AS CurrentDebitAmount_no ,
                        ROUND(b.CreditAmount_no,4) AS CurrentCreditAmount_no,
                        '5' AS Type_tx

                FROM tb_tcheckdisbursementhdr as a

                LEFT JOIN tb_tcheckdisbursementdtl as b
                ON a.CDID_cd = b.CDID_cd

                WHERE   YEAR(a.CDDate_dt) = mYear2 AND MONTH(a.CDDate_dt) <= mMonth2   AND a.Post_yn LIKE CONCAT('',mStatus,'%')





                UNION





                SELECT  a.GJID_cd AS 'ControlID_cd',
                        a.GJDate_dt AS 'ControlDate_dt',
                        b.GJID_cd,
                        b.AccountID_cd,
                        b.Seq_no,
                        ROUND(b.DebitAmount_no,4) AS DebitAmount_no,
                        ROUND(b.CreditAmount_no,4) AS CreditAmount_no,
                        0 AS CurrentDebitAmount_no,
                        0 AS CurrentCreditAmount_no,
                        '6' AS Type_tx

                FROM tb_tgeneraljournalhdr as a

                LEFT JOIN tb_tgeneraljournaldtl as b
                ON a.GJID_cd = b.GJID_cd

                WHERE   YEAR(a.GJDate_dt) = mYear1 AND MONTH(a.GJDate_dt) <= mMonth1   AND a.Post_yn LIKE CONCAT('',mStatus,'%')






                UNION





                SELECT  a.GJID_cd AS 'ControlID_cd',
                        a.GJDate_dt AS 'ControlDate_dt',
                        b.GJID_cd,
                        b.AccountID_cd,
                        b.Seq_no,
                        0 AS DebitAmount_no,
                        0 AS CreditAmount_no,
                        ROUND(b.DebitAmount_no,4) AS CurrentDebitAmount_no ,
                        ROUND(b.CreditAmount_no,4) AS CurrentCreditAmount_no,
                        '6' AS Type_tx

                FROM tb_tgeneraljournalhdr as a

                LEFT JOIN tb_tgeneraljournaldtl as b
                ON a.GJID_cd = b.GJID_cd

                WHERE   YEAR(a.GJDate_dt) = mYear2 AND MONTH(a.GJDate_dt) <= mMonth2 AND a.Post_yn LIKE CONCAT('',mStatus,'%')) a


                GROUP BY a.AccountID_cd) b
                ON a.AccountID_cd = b.AccountID_cd


                LEFT JOIN tb_mcoagroup as c
                ON a.GroupID_cd = c.GroupID_cd

                WHERE a.BalanceSheet_yn = '1' AND
                      a.BalanceSheetType_tx = mBalanceSheetType_tx

		GROUP BY a.BalanceSheetType_tx,
                         a.AccountID_cd,
                         a.AccountDesc_tx,
                         a.Debit_yn,
                         b.Debit,
                         b.Credit,
                         a.GroupID_cd

		ORDER BY a.BalanceSheetType_tx,
                         a.AccountID_cd;


        end if;


    
    
    
    






END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `rp_CashFlow_Select`
--

DROP PROCEDURE IF EXISTS `rp_CashFlow_Select`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `rp_CashFlow_Select`(IN mCashFlowType_tx VARCHAR(1), IN mMonth1 INTEGER, IN mYear1 INTEGER, IN mMonth2 INTEGER, IN mYear2 INTEGER, IN mStatus VARCHAR(1))
BEGIN

    
    
        if mCashFlowType_tx <> '0' then

                SELECT a.AccountID_cd,
                       a.AccountDesc_tx,
                       CASE a.Debit_yn
                                WHEN '1' THEN SUM(IFNULL(b.Debit,0)) - SUM(IFNULL(b.Credit,0))
                                ELSE SUM(IFNULL(b.Credit,0)) - SUM(IFNULL(b.Debit,0)) END AS 'LastAmount_no',
                       CASE a.Debit_yn
                                WHEN '1' THEN SUM(IFNULL(b.CurrentDebit,0)) - SUM(IFNULL(b.CurrentCredit,0))
                                ELSE SUM(IFNULL(b.CurrentCredit,0)) - SUM(IFNULL(b.CurrentDebit,0)) END AS 'CurrentAmount_no'

                FROM tb_mcoahdr a

		LEFT JOIN
		(SELECT 1 AS 'Seq_no',
                        a.AccountID_cd,
                        CASE WHEN SUM(IFNULL(a.DebitAmount_no,0)) > SUM(IFNULL(a.CreditAmount_no,0))
                                THEN ROUND(SUM(IFNULL(a.DebitAmount_no,0)) - SUM(IFNULL(a.CreditAmount_no,0)),4)
                                ELSE 0 END AS 'Debit',
                        CASE WHEN SUM(IFNULL(a.CreditAmount_no,0)) > SUM(IFNULL(a.DebitAmount_no,0))
                                THEN ROUND(SUM(IFNULL(a.CreditAmount_no,0)) -SUM(IFNULL(a.DebitAmount_no,0)),4)
                                ELSE 0 END AS 'Credit',
                        CASE WHEN SUM(IFNULL(a.CurrentDebitAmount_no,0)) > SUM(IFNULL(a.CurrentCreditAmount_no,0))
                                THEN ROUND(SUM(IFNULL(a.CurrentDebitAmount_no,0)) - SUM(IFNULL(a.CurrentCreditAmount_no,0)),4)
                                ELSE 0 END AS 'CurrentDebit',
                        CASE WHEN SUM(IFNULL(a.CurrentCreditAmount_no,0)) > SUM(IFNULL(a.CurrentDebitAmount_no,0))
                                THEN ROUND(SUM(IFNULL(a.CurrentCreditAmount_no,0)) - SUM(IFNULL(a.CurrentDebitAmount_no,0)),4)
                                ELSE 0 END AS 'CurrentCredit'
                           
                         
                         
                 FROM
                (SELECT   a.CRID_cd AS 'ControlID_cd',
                          a.CRDate_dt AS 'ControlDate_dt',
                          b.CRID_cd,
                          b.AccountID_cd,
                          b.Seq_no,
                          ROUND(b.DebitAmount_no,4) AS DebitAmount_no,
                          ROUND(b.CreditAmount_no,4) AS CreditAmount_no,
                          0 AS CurrentDebitAmount_no,
                          0 AS CurrentCreditAmount_no,
                          '1' AS Type_tx

                FROM tb_tcashreceiptshdr as a

                LEFT JOIN tb_tcashreceiptsdtl as b
                ON a.CRID_cd = b.CRID_cd

                WHERE     YEAR(a.CRDate_dt) = mYear1 AND MONTH(a.CRDate_dt) <= mMonth1 AND a.Post_yn LIKE CONCAT('',mStatus,'%')





                UNION





                SELECT    a.CRID_cd AS 'ControlID_cd',
                          a.CRDate_dt AS 'ControlDate_dt',
                          b.CRID_CD,
                          b.AccountID_cd,
                          b.Seq_no,
                          0 AS DebitAmount_no,
                          0 AS CreditAmount_no,
                          ROUND(b.DebitAmount_no,4) AS CurrentDebitAmount_no ,
                          ROUND(b.CreditAmount_no,4) AS CurrentCreditAmount_no,
                          '1' AS Type_tx

                FROM tb_tcashreceiptshdr as a

                LEFT JOIN tb_tcashreceiptsdtl as b
                ON a.CRID_cd = b.CRID_cd

                WHERE    YEAR(a.CRDate_dt) = mYear2 AND MONTH(a.CRDate_dt) <= mMonth2  AND a.Post_yn LIKE CONCAT('',mStatus,'%')






                UNION





                SELECT   a.PBID_cd AS 'ControlID_cd',
                         a.PBDate_dt AS 'ControlDate_dt',
                         b.PBID_cd,
                         b.AccountID_cd,
                         b.Seq_no,
                         ROUND(b.DebitAmount_no,4) AS DebitAmount_no,
                         ROUND(b.CreditAmount_no,4) AS CreditAmount_no,
                         0 AS CurrentDebitAmount_no,
                         0 AS CurrentCreditAmount_no,
                         '2' AS Type_tx

                FROM tb_tpurchaseshdr as a

                LEFT JOIN tb_tpurchasesdtl as b
                ON a.PBID_cd = b.PBID_cd

                WHERE  YEAR(a.PBDate_dt) = mYear1 AND MONTH(a.PBDate_dt) <= mMonth1  AND a.Post_yn LIKE CONCAT('',mStatus,'%')





                UNION





                SELECT  a.PBID_cd AS 'ControlID_cd',
                        a.PBDate_dt AS 'ControlDate_dt',
						b.PBID_cd,
                        b.AccountID_cd,
                        b.Seq_no,
                        0 AS DebitAmount_no,
                        0 AS CreditAmount_no,
                        ROUND(b.DebitAmount_no,4) AS CurrentDebitAmount_no ,
                        ROUND(b.CreditAmount_no,4) AS CurrentCreditAmount_no,
                        '2' AS Type_tx

                FROM tb_tpurchaseshdr as a

                LEFT JOIN tb_tpurchasesdtl as b
                ON a.PBID_cd = b.PBID_cd

                WHERE   YEAR(a.PBDate_dt) = mYear2 AND MONTH(a.PBDate_dt) <= mMonth2    AND a.Post_yn LIKE CONCAT('',mStatus,'%')





                UNION





                SELECT  a.CSID_cd AS 'ControlID_cd',
                        a.CSDate_dt AS 'ControlDate_dt', 
                        b.CSID_cd,
                        b.AccountID_cd,
                        b.Seq_no,
                        ROUND(b.DebitAmount_no,4) AS DebitAmount_no,
                        ROUND(b.CreditAmount_no,4) AS CreditAmount_no,
                        0 AS CurrentDebitAmount_no,
                        0 AS CurrentCreditAmount_no,
                        '3' AS Type_tx

                FROM tb_tcashsaleshdr as a

                LEFT JOIN tb_tcashsalesdtl as b
                ON a.CSID_cd = b.CSID_cd

                WHERE   YEAR(a.CSDate_dt) = mYear1 AND MONTH(a.CSDate_dt) <= mMonth1  AND a.Post_yn LIKE CONCAT('',mStatus,'%')





                UNION





                SELECT   a.CSID_cd AS 'ControlID_cd',
                         a.CSDate_dt AS 'ControlDate_dt',
                         b.CSID_cd,
                         b.AccountID_cd,
                         b.Seq_no,
                         0 AS DebitAmount_no,
                         0 AS CreditAmount_no,
                         ROUND(b.DebitAmount_no,4) AS CurrentDebitAmount_no ,
                         ROUND(b.CreditAmount_no,4) AS CurrentCreditAmount_no,
                         '3' AS Type_tx

                FROM tb_tcashsaleshdr as a

                LEFT JOIN tb_tcashsalesdtl as b
                ON a.CSID_cd = b.CSID_cd

                WHERE    YEAR(a.CSDate_dt) = mYear2 AND MONTH(a.CSDate_dt) <= mMonth2  AND a.Post_yn LIKE CONCAT('',mStatus,'%')






                UNION





                SELECT  a.BSID_cd AS 'ControlID_cd',
                        a.BSDate_dt AS 'ControlDate_dt',
                        b.BSID_cd,
                        b.AccountID_cd,
                        b.Seq_no,
                        ROUND(b.DebitAmount_no,4) AS DebitAmount_no,
                        ROUND(b.CreditAmount_no,4) AS CreditAmount_no,
                        0 AS CurrentDebitAmount_no,
                        0 AS CurrentCreditAmount_no,
                        '4' AS Type_tx

                FROM tb_tchargesaleshdr as a

                LEFT JOIN tb_tchargesalesdtl as b
                ON a.BSID_cd = b.BSID_cd

                WHERE   YEAR(a.BSDate_dt) = mYear1 AND MONTH(a.BSDate_dt) <= mMonth1 AND a.Post_yn LIKE CONCAT('',mStatus,'%')





                UNION





                SELECT   a.BSID_cd AS 'ControlID_cd',
                         a.BSDate_dt AS 'ControlDate_dt',
                         b.BSID_cd,
                         b.AccountID_cd,
                         b.Seq_no,
                         0 AS DebitAmount_no,
                         0 AS CreditAmount_no,
                         ROUND(b.DebitAmount_no,4) AS CurrentDebitAmount_no ,
                         ROUND(b.CreditAmount_no,4) AS CurrentCreditAmount_no,
                         '4' AS Type_tx

                FROM tb_tchargesaleshdr as a

                LEFT JOIN tb_tchargesalesdtl as b
                ON a.BSID_cd = b.BSID_cd

                WHERE    YEAR(a.BSDate_dt) = mYear2 AND MONTH(a.BSDate_dt) <= mMonth2 AND a.Post_yn LIKE CONCAT('',mStatus,'%')





                UNION





                SELECT  a.CDID_cd AS 'ControlID_cd',
                        a.CDDate_dt AS 'ControlDate_dt',
                        b.CDID_cd,
                        b.AccountID_cd,
                        b.Seq_no,
                        ROUND(b.DebitAmount_no,4) AS DebitAmount_no,
                        ROUND(b.CreditAmount_no,4) AS CreditAmount_no,
                        0 AS CurrentDebitAmount_no,
                        0 AS CurrentCreditAmount_no,
                        '5' AS Type_tx

                FROM tb_tcheckdisbursementhdr as a

                LEFT JOIN tb_tcheckdisbursementdtl as b
                ON a.CDID_cd = b.CDID_cd

                WHERE   YEAR(a.CDDate_dt) = mYear1 AND MONTH(a.CDDate_dt) <= mMonth1  AND a.Post_yn LIKE CONCAT('',mStatus,'%')





                UNION





                SELECT  a.CDID_cd AS 'ControlID_cd',
                        a.CDDate_dt AS 'ControlDate_dt',
                        b.CDID_cd,
                        b.AccountID_cd,
                        b.Seq_no,
                        0 AS DebitAmount_no,
                        0 AS CreditAmount_no,
                        ROUND(b.DebitAmount_no,4) AS CurrentDebitAmount_no ,
                        ROUND(b.CreditAmount_no,4) AS CurrentCreditAmount_no,
                        '5' AS Type_tx

                FROM tb_tcheckdisbursementhdr as a

                LEFT JOIN tb_tcheckdisbursementdtl as b
                ON a.CDID_cd = b.CDID_cd

                WHERE   YEAR(a.CDDate_dt) = mYear2 AND MONTH(a.CDDate_dt) <= mMonth2   AND a.Post_yn LIKE CONCAT('',mStatus,'%')





                UNION





                SELECT  a.GJID_cd AS 'ControlID_cd',
                        a.GJDate_dt AS 'ControlDate_dt',
                        b.GJID_cd,
                        b.AccountID_cd,
                        b.Seq_no,
                        ROUND(b.DebitAmount_no,4) AS DebitAmount_no,
                        ROUND(b.CreditAmount_no,4) AS CreditAmount_no,
                        0 AS CurrentDebitAmount_no,
                        0 AS CurrentCreditAmount_no,
                        '6' AS Type_tx

                FROM tb_tgeneraljournalhdr as a

                LEFT JOIN tb_tgeneraljournaldtl as b
                ON a.GJID_cd = b.GJID_cd

                WHERE   YEAR(a.GJDate_dt) = mYear1 AND MONTH(a.GJDate_dt) <= mMonth1   AND a.Post_yn LIKE CONCAT('',mStatus,'%')






                UNION





                SELECT  a.GJID_cd AS 'ControlID_cd',
                        a.GJDate_dt AS 'ControlDate_dt',
                        b.GJID_cd,
                        b.AccountID_cd,
                        b.Seq_no,
                        0 AS DebitAmount_no,
                        0 AS CreditAmount_no,
                        ROUND(b.DebitAmount_no,4) AS CurrentDebitAmount_no ,
                        ROUND(b.CreditAmount_no,4) AS CurrentCreditAmount_no,
                        '6' AS Type_tx

                FROM tb_tgeneraljournalhdr as a

                LEFT JOIN tb_tgeneraljournaldtl as b
                ON a.GJID_cd = b.GJID_cd

                WHERE   YEAR(a.GJDate_dt) = mYear2 AND MONTH(a.GJDate_dt) <= mMonth2 AND a.Post_yn LIKE CONCAT('',mStatus,'%')) a


                GROUP BY a.AccountID_cd) b
                ON a.AccountID_cd = b.AccountID_cd


                LEFT JOIN tb_mcoagroup as c
                ON a.GroupID_cd = c.GroupID_cd

                WHERE a.CashFlow_yn = '1' AND
                      a.CashFlowType_tx = mCashFlowType_tx

		GROUP BY a.CashFlowType_tx,
                         a.AccountID_cd,
                         a.AccountDesc_tx,
                         a.Debit_yn,
                         b.Debit,
                         b.Credit,
                         a.GroupID_cd

		ORDER BY a.CashFlowType_tx,
                         a.AccountID_cd;


        end if;


    
    
    
    






END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `rp_CashReceiptsVoucher_Select`
--

DROP PROCEDURE IF EXISTS `rp_CashReceiptsVoucher_Select`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `rp_CashReceiptsVoucher_Select`(IN mEmployeeID_cd VARCHAR(15),
                                                                            IN mCenterID_id INTEGER,
                                                                            IN mCRID_cd VARCHAR(15))
BEGIN
        SELECT  a.CRID_cd,
                a.CRDate_dt,
                a.ReferenceID_cd,
                a.Amount_no,
                a.Particular_tx,
                b.Seq_no,
                b.AccountID_cd,
                IFNULL(c.AccountDesc_tx,'') AS AccountDesc_tx,
                b.SubsidiaryID_cd,
                IFNULL(d.SubsidiaryDesc_tx,'') AS SubsidiaryDesc_tx,
                CASE IFNULL(b.SubsidiaryID_cd,'')
                       WHEN '' THEN b.AccountID_cd
                       ELSE b.SubsidiaryID_cd END AS AccountID,
               CASE IFNULL(b.SubsidiaryID_cd,'')
                       WHEN '' THEN c.AccountDesc_tx
                       ELSE CONCAT(c.AccountDesc_tx,' - ',d.SubsidiaryDesc_tx) END AS AccountDesc,
                b.DebitAmount_no,
                b.CreditAmount_no
        FROM tb_tcashreceiptshdr a
        LEFT JOIN
        (SELECT *
        FROM tb_tcashreceiptsdtl) b
        ON a.CRID_cd = b.CRID_cd
        LEFT JOIN
        (SELECT *
        FROM gng_master.tb_mcoahdr) c
        ON b.AccountID_cd = c.AccountID_cd
        LEFT JOIN
        (SELECT *
        FROM gng_master.tb_mcoadtl) d
        ON b.SubsidiaryID_cd = d.SubsidiaryID_cd
        WHERE a.CRID_cd = mCRID_cd
        ORDER BY b.Seq_no;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `rp_CashSalesVoucher_Select`
--

DROP PROCEDURE IF EXISTS `rp_CashSalesVoucher_Select`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `rp_CashSalesVoucher_Select`(IN mEmployeeID_cd VARCHAR(15),
                                                                            IN mCenterID_id INTEGER,
                                                                            IN mCSID_cd VARCHAR(15))
BEGIN
        SELECT  a.CSID_cd,
                a.CSDate_dt,
                a.ReferenceID_cd,
                a.Amount_no,
                a.Particular_tx,
                b.Seq_no,
                b.AccountID_cd,
                IFNULL(c.AccountDesc_tx,'') AS AccountDesc_tx,
                b.SubsidiaryID_cd,
                IFNULL(d.SubsidiaryDesc_tx,'') AS SubsidiaryDesc_tx,
                CASE IFNULL(b.SubsidiaryID_cd,'')
                       WHEN '' THEN b.AccountID_cd
                       ELSE b.SubsidiaryID_cd END AS AccountID,
               CASE IFNULL(b.SubsidiaryID_cd,'')
                       WHEN '' THEN c.AccountDesc_tx
                       ELSE CONCAT(c.AccountDesc_tx,' - ',d.SubsidiaryDesc_tx) END AS AccountDesc,
                b.DebitAmount_no,
                b.CreditAmount_no
        FROM tb_tcashsaleshdr a
        LEFT JOIN
        (SELECT *
        FROM tb_tcashsalesdtl) b
        ON a.CSID_cd = b.CSID_cd
        LEFT JOIN
        (SELECT *
        FROM gng_master.tb_mcoahdr) c
        ON b.AccountID_cd = c.AccountID_cd
        LEFT JOIN
        (SELECT *
        FROM gng_master.tb_mcoadtl) d
        ON b.SubsidiaryID_cd = d.SubsidiaryID_cd
        WHERE a.CSID_cd = mCSID_cd
        ORDER BY b.Seq_no;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `rp_CheckDisbursementVoucher_Select`
--

DROP PROCEDURE IF EXISTS `rp_CheckDisbursementVoucher_Select`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `rp_CheckDisbursementVoucher_Select`(IN mEmployeeID_cd VARCHAR(15),
                                                                     IN mCenterID_id INTEGER,
                                                                     IN mCDID_cd VARCHAR(15))
BEGIN
        SELECT  DISTINCT a.CDID_cd,
                         a.CDDate_dt,
                         a.PaymasterID_cd,
                         a.BankID_cd,
                         f.SubsidiaryDesc_tx AS BankDesc_tx,
                         a.CheckNo_tx,
                         a.Amount_no,
                         a.Particular_tx,
                         c.PaymasterName_tx,
                         c.Address_tx,
                         c.TIN_tx,
                         b.Seq_no,
                         b.AccountID_cd,
                         IFNULL(d.AccountDesc_tx,'') AS AccountDesc_tx,
                         b.SubsidiaryID_cd,
                         IFNULL(e.SubsidiaryDesc_tx,'') AS SubsidiaryDesc_tx,
                         CASE IFNULL(b.SubsidiaryID_cd,'')
                               WHEN '' THEN b.AccountID_cd
                               ELSE b.SubsidiaryID_cd END AS AccountID,
                         CASE IFNULL(b.SubsidiaryID_cd,'')
                               WHEN '' THEN d.AccountDesc_tx
                               ELSE CONCAT(d.AccountDesc_tx,' - ',e.SubsidiaryDesc_tx) END AS AccountDesc,
                         b.DebitAmount_no,
                         b.CreditAmount_no

        FROM tb_tcheckdisbursementhdr a

        LEFT JOIN
        (SELECT *
        FROM tb_tcheckdisbursementdtl) b
        ON a.CDID_cd = b.CDID_cd

        LEFT JOIN
        (SELECT *
        FROM gng_master.tb_mpaymaster) c
        ON a.PaymasterID_cd = c.PaymasterID_cd

        LEFT JOIN
        (SELECT *
        FROM gng_master.tb_mcoahdr) d
        ON b.AccountID_cd = d.AccountID_cd

        LEFT JOIN
        (SELECT *
        FROM gng_master.tb_mcoadtl) e
        ON b.SubsidiaryID_cd = e.SubsidiaryID_cd

        LEFT JOIN
        (SELECT *
        FROM gng_master.tb_mcoadtl) f
        ON a.BankID_cd = f.SubsidiaryID_cd

        WHERE a.CDID_cd = mCDID_cd

        ORDER BY b.Seq_no;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `rp_ControlAccount_Select`
--

DROP PROCEDURE IF EXISTS `rp_ControlAccount_Select`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `rp_ControlAccount_Select`(IN mEmployeeID_cd VARCHAR(15), IN mAccountID_cd VARCHAR(5), IN mAccountDesc_tx VARCHAR(80), IN mTypeID_id INTEGER, IN mGroupID_cd VARCHAR(3))
BEGIN
        SELECT a.AccountID_cd,
               c.TypeID_id,
               a.BalanceSheet_yn,
               a.IncomeStatement_yn,
               a.CashFlow_yn,
               CASE c.TypeID_id
                       WHEN '1' THEN 'ASSET'
                       WHEN '2' THEN 'LIABILITIES'
                       WHEN '3' THEN 'CAPITAL'
                       WHEN '4' THEN 'REVENUE'
                       WHEN '5' THEN 'EXPENSES'
                       WHEN '6' THEN 'OTHERS' END AS 'TypeDesc_tx',
               a.GroupID_cd,
               c.GroupName_tx,
               a.AccountDesc_tx,
               IFNULL(b.SubsidiaryID_cd,'') AS 'SubsidiaryID_cd',
               IFNULL(b.SubsidiaryDesc_tx,'') AS 'SubsidiaryDesc_tx'
        FROM tb_mcoahdr a
        LEFT JOIN
        (SELECT *
        FROM tb_mcoadtl) b
        ON a.AccountID_cd = b.AccountID_cd
        LEFT JOIN
        (SELECT *
        FROM tb_mcoagroup) c
        ON a.GroupID_cd = c.GroupID_cd
        WHERE  a.AccountID_cd LIKE CONCAT(mAccountID_cd,'%') AND
               a.AccountDesc_tx LIKE CONCAT(mAccountDesc_tx,'%') AND
               IFNULL(c.TypeID_id,-1) = CASE mTypeID_id WHEN 0 THEN c.TypeID_id ELSE mTypeID_id END AND
               IFNULL(c.GroupID_cd,'') LIKE CONCAT(mGroupID_cd,'%')
        ORDER BY c.TypeID_id,
	         a.AccountID_cd,
	         b.SubsidiaryID_cd;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `rp_GeneralJournalVoucher_Select`
--

DROP PROCEDURE IF EXISTS `rp_GeneralJournalVoucher_Select`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `rp_GeneralJournalVoucher_Select`(IN mEmployeeID_cd VARCHAR(15), IN mGJID_cd VARCHAR(15))
BEGIN
        SELECT  a.GJID_cd,
                a.GJDate_dt,
                a.Rate_no,
                a.Amount_no,
                d.SubsidiaryDesc_tx AS BankDesc_tx,
                a.Particular_tx,
                b.Seq_no,
                b.AccountID_cd,
                IFNULL(c.AccountDesc_tx,'') AS AccountDesc_tx,
                b.SubsidiaryID_cd,
                IFNULL(d.SubsidiaryDesc_tx,'') AS SubsidiaryDesc_tx,
                CASE IFNULL(b.SubsidiaryID_cd,'')
                       WHEN '' THEN b.AccountID_cd
                       ELSE b.SubsidiaryID_cd END AS AccountID,
               CASE IFNULL(b.SubsidiaryID_cd,'')
                       WHEN '' THEN c.AccountDesc_tx
                       ELSE CONCAT(c.AccountDesc_tx,' - ',d.SubsidiaryDesc_tx) END AS AccountDesc,
                b.DebitAmount_no,
                b.CreditAmount_no
        FROM tb_tgeneraljournalhdr a
        LEFT JOIN
        (SELECT *
        FROM tb_tgeneraljournaldtl) b
        ON a.GJID_cd = b.GJID_cd
        LEFT JOIN
        (SELECT *
        FROM tb_mcoahdr) c
        ON b.AccountID_cd = c.AccountID_cd
        LEFT JOIN
        (SELECT *
        FROM tb_mcoadtl) d
        ON b.SubsidiaryID_cd = d.SubsidiaryID_cd
        WHERE a.GJID_cd = mGJID_cd
        ORDER BY b.Seq_no;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `rp_GeneralLedger_Select`
--

DROP PROCEDURE IF EXISTS `rp_GeneralLedger_Select`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `rp_GeneralLedger_Select`(IN mEmployeeID_cd VARCHAR(15), IN mAccountID_cd VARCHAR(5), IN mSubsidiaryID_cd VARCHAR(20), IN mJournal_tx VARCHAR(1), IN mStartDate_dt DATE, IN mEndDate_dt DATE, IN mStatus VARCHAR(1))
BEGIN
      declare mStatus_  varchar(1);
        set mStatus_ = CONCAT(mStatus,'%');

        SELECT a.*,
               b.Debit_yn,
               IFNULL(c.SubsidiaryDesc_tx,'') AS SubsidiaryDesc_tx

        FROM

                (SELECT 'Voucher#' AS 'Ref_tx',
                        CONCAT('CN# ',b.CheckNo_tx) AS 'Reference_tx',
                        b.CDID_cd AS 'DocNo_tx',
                        b.CDDate_dt AS 'DocDate_dt',
                        b.CheckNo_tx,
                        c.PaymasterName_tx,
                        b.Particular_tx,
                        CONCAT('checkdisbursement_search.php?Start=1&Page=1&ControlDate=&ReferenceNo=&PaymasterID=&Status=',
                        '&Month1=',(MONTH(mStartDate_dt)+0),'&Day1=',DAY(mStartDate_dt),'&Year1=',YEAR(mStartDate_dt),
                        '&Month2=',(MONTH(mEndDate_dt)+0),'&Day2=',DAY(mEndDate_dt),'&Year2=',YEAR(mEndDate_dt),
                        '&ControlNo=',b.CDID_cd) AS 'ModuleDesc_tx',
                        IFNULL(a.DebitAmount_no,0) As 'Debit',
                        IFNULL(a.CreditAmount_no,0) AS 'Credit',
                        a.AccountID_cd,
                        a.SubsidiaryID_cd,
                        a.Seq_no,
                        b.Journal_tx,
                        b.Post_yn

                FROM tb_tcheckdisbursementdtl AS a

                LEFT JOIN
                (SELECT CDID_cd,
	                CDDate_dt,
                        PaymasterID_cd,
	                Particular_tx,
                        CheckNo_tx,
	                '5' AS 'Journal_tx',
                        Post_yn

                FROM tb_tcheckdisbursementhdr WHERE CDDate_dt BETWEEN mStartDate_dt AND mEndDate_dt AND Post_yn like mStatus_) AS b
                ON a.CDID_cd = b.CDID_cd

                LEFT JOIN tb_mpaymaster AS c
                ON b.PaymasterID_cd = c.PaymasterID_cd

                WHERE   a.AccountID_cd like concat(mAccountID_cd,'%') AND
                        a.SubsidiaryID_cd = CASE mSubsidiaryID_cd
			                        WHEN '' THEN a.SubsidiaryID_cd
			                        ELSE mSubsidiaryID_cd END AND
                        ('5' = mJournal_tx OR mJournal_tx = '0') AND
                        b.CDDate_dt BETWEEN mStartDate_dt AND mEndDate_dt AND b.Post_yn like mStatus_



     


                UNION
               






                SELECT 'JV#' AS 'Ref_tx',
                        '' AS 'Reference_tx',
                        b.GJID_cd AS 'DocNo_tx',
                        b.GJDate_dt AS 'DocDate_dt',
                        '' AS 'CheckNo_tx',
                        c.PaymasterName_tx,
                        b.Particular_tx,
                        CONCAT('generaljournal_search.php?Start=1&ControlDate=&Status=&PaymasterID=',
                        '&Month1=',(MONTH(mStartDate_dt)+0),'&Day1=',DAY(mStartDate_dt),'&Year1=',YEAR(mStartDate_dt),
                        '&Month2=',(MONTH(mEndDate_dt)+0),'&Day2=',DAY(mEndDate_dt),'&Year2=',YEAR(mEndDate_dt),
                        '&ControlNo=',b.GJID_cd) AS 'ModuleDesc_tx',
                        IFNULL(a.DebitAmount_no,0) As 'Debit',
                        IFNULL(a.CreditAmount_no,0) AS 'Credit',
                        a.AccountID_cd,
                        a.SubsidiaryID_cd,
                        a.Seq_no,
                        b.Journal_tx,
                        b.Post_yn

                FROM tb_tgeneraljournaldtl AS a

                LEFT JOIN
                (SELECT GJID_cd,
	                      GJDate_dt,
                        '' AS PaymasterID_cd,
                        Particular_tx,
	                      '6' AS 'Journal_tx',
                        Post_yn,
                        baseline

                FROM tb_tgeneraljournalhdr WHERE GJDate_dt BETWEEN mStartDate_dt AND mEndDate_dt AND Post_yn like mStatus_) AS b
                ON a.GJID_cd = b.GJID_cd

                LEFT JOIN tb_mpaymaster AS c
                ON b.baseline = c.PaymasterID_cd

                WHERE   a.AccountID_cd like concat(mAccountID_cd,'%') AND
                        a.SubsidiaryID_cd = CASE mSubsidiaryID_cd
			                        WHEN '' THEN a.SubsidiaryID_cd
			                        ELSE mSubsidiaryID_cd END AND
                        ('6' = mJournal_tx OR mJournal_tx = '0') AND
                        b.GJDate_dt BETWEEN mStartDate_dt AND mEndDate_dt AND b.Post_yn like mStatus_
                        
   
    

                UNION







                SELECT 'CR#' AS 'Ref_tx',
                        '' AS 'Reference_tx',
                        b.CRID_cd AS 'DocNo_tx',
                        b.CRDate_dt AS 'DocDate_dt',
                        '' AS 'CheckNo_tx',
                        c.PaymasterName_tx,
                        b.Particular_tx,
                        CONCAT('cashreceipts_search.php?Start=1&ControlDate=&Status=&PaymasterID=',
                        '&Month1=',(MONTH(mStartDate_dt)+0),'&Day1=',DAY(mStartDate_dt),'&Year1=',YEAR(mStartDate_dt),
                        '&Month2=',(MONTH(mEndDate_dt)+0),'&Day2=',DAY(mEndDate_dt),'&Year2=',YEAR(mEndDate_dt),
                        '&ControlNo=',b.CRID_cd) AS 'ModuleDesc_tx',
                        IFNULL(a.DebitAmount_no,0) As 'Debit',
                        IFNULL(a.CreditAmount_no,0) AS 'Credit',
                        a.AccountID_cd,
                        a.SubsidiaryID_cd,
                        a.Seq_no,
                        b.Journal_tx,
                        b.Post_yn

                FROM tb_tcashreceiptsdtl AS a

                LEFT JOIN
                (SELECT CRID_cd,
	                      CRDate_dt,
                        '' AS PaymasterID_cd,
                        Particular_tx,
	                      '1' AS 'Journal_tx',
                        Post_yn,
                        baseline

                FROM tb_tcashreceiptshdr WHERE CRDate_dt BETWEEN mStartDate_dt AND mEndDate_dt AND Post_yn like mStatus_ ) AS b
                ON a.CRID_cd = b.CRID_cd

                LEFT JOIN tb_mpaymaster AS c
                ON b.baseline = c.PaymasterID_cd

                WHERE   a.AccountID_cd like concat(mAccountID_cd,'%') AND
                        a.SubsidiaryID_cd = CASE mSubsidiaryID_cd
			                        WHEN '' THEN a.SubsidiaryID_cd
			                        ELSE mSubsidiaryID_cd END AND
                        ('1' = mJournal_tx OR mJournal_tx = '0') AND
                        b.CRDate_dt BETWEEN mStartDate_dt AND mEndDate_dt  AND b.Post_yn like mStatus_
                        
   

                UNION







                SELECT 'CS#' AS 'Ref_tx',
                        '' AS 'Reference_tx',
                        b.CSID_cd AS 'DocNo_tx',
                        b.CSDate_dt AS 'DocDate_dt',
                        '' AS 'CheckNo_tx',
                        c.PaymasterName_tx,
                        b.Particular_tx,
                        CONCAT('cashsales_search.php?Start=1&ControlDate=&Status=&PaymasterID=',
                        '&Month1=',(MONTH(mStartDate_dt)+0),'&Day1=',DAY(mStartDate_dt),'&Year1=',YEAR(mStartDate_dt),
                        '&Month2=',(MONTH(mEndDate_dt)+0),'&Day2=',DAY(mEndDate_dt),'&Year2=',YEAR(mEndDate_dt),
                        '&ControlNo=',b.CSID_cd) AS 'ModuleDesc_tx',
                        IFNULL(a.DebitAmount_no,0) As 'Debit',
                        IFNULL(a.CreditAmount_no,0) AS 'Credit',
                        a.AccountID_cd,
                        a.SubsidiaryID_cd,
                        a.Seq_no,
                        b.Journal_tx,
                        b.Post_yn

                FROM tb_tcashsalesdtl AS a

                LEFT JOIN
                (SELECT CSID_cd,
	                      CSDate_dt,
                        '' AS PaymasterID_cd,
                        Particular_tx,
	                      '3' AS 'Journal_tx',
                        Post_yn,
                        baseline

                FROM tb_tcashsaleshdr WHERE CSDate_dt BETWEEN mStartDate_dt AND mEndDate_dt AND Post_yn like mStatus_) AS b
                ON a.CSID_cd = b.CSID_cd

                LEFT JOIN tb_mpaymaster AS c
                ON b.baseline = c.PaymasterID_cd

                WHERE   a.AccountID_cd like concat(mAccountID_cd,'%') AND
                        a.SubsidiaryID_cd = CASE mSubsidiaryID_cd
			                        WHEN '' THEN a.SubsidiaryID_cd
			                        ELSE mSubsidiaryID_cd END AND
                        ('3' = mJournal_tx OR mJournal_tx = '0') AND
                        b.CSDate_dt BETWEEN mStartDate_dt AND mEndDate_dt  AND b.Post_yn like mStatus_
                        
          

                UNION







                SELECT 'BS#' AS 'Ref_tx',
                        '' AS 'Reference_tx',
                        b.BSID_cd AS 'DocNo_tx',
                        b.BSDate_dt AS 'DocDate_dt',
                        '' AS 'CheckNo_tx',
                        c.PaymasterName_tx,
                        b.Particular_tx,
                        CONCAT('chargesales_search.php?Start=1&ControlDate=&Status=&PaymasterID=',
                        '&Month1=',(MONTH(mStartDate_dt)+0),'&Day1=',DAY(mStartDate_dt),'&Year1=',YEAR(mStartDate_dt),
                        '&Month2=',(MONTH(mEndDate_dt)+0),'&Day2=',DAY(mEndDate_dt),'&Year2=',YEAR(mEndDate_dt),
                        '&ControlNo=',b.BSID_cd) AS 'ModuleDesc_tx',
                        IFNULL(a.DebitAmount_no,0) As 'Debit',
                        IFNULL(a.CreditAmount_no,0) AS 'Credit',
                        a.AccountID_cd,
                        a.SubsidiaryID_cd,
                        a.Seq_no,
                        b.Journal_tx,
                        b.Post_yn

                FROM tb_tchargesalesdtl AS a

                LEFT JOIN
                (SELECT BSID_cd,
	                      BSDate_dt,
                        '' AS PaymasterID_cd,
                        Particular_tx,
	                      '4' AS 'Journal_tx',
                        Post_yn,
                        baseline

                FROM tb_tchargesaleshdr WHERE BSDate_dt BETWEEN mStartDate_dt AND mEndDate_dt AND Post_yn like mStatus_) AS  b
                ON a.BSID_cd = b.BSID_cd

                LEFT JOIN tb_mpaymaster AS c
                ON b.baseline = c.PaymasterID_cd

                WHERE   a.AccountID_cd like concat(mAccountID_cd,'%') AND
                        a.SubsidiaryID_cd = CASE mSubsidiaryID_cd
			                        WHEN '' THEN a.SubsidiaryID_cd
			                        ELSE mSubsidiaryID_cd END AND
                        ('4' = mJournal_tx OR mJournal_tx = '0') AND
                        b.BSDate_dt BETWEEN mStartDate_dt AND mEndDate_dt AND b.Post_yn like mStatus_                        
   



                UNION







                SELECT 'PU#' AS 'Ref_tx',
                        '' AS 'Reference_tx',
                        b.PBID_cd AS 'DocNo_tx',
                        b.PBDate_dt AS 'DocDate_dt',
                        '' AS 'CheckNo_tx',
                        c.PaymasterName_tx,
                        b.Particular_tx,
                        CONCAT('purchases_search.php?Start=1&ControlDate=&Status=&PaymasterID=',
                        '&Month1=',(MONTH(mStartDate_dt)+0),'&Day1=',DAY(mStartDate_dt),'&Year1=',YEAR(mStartDate_dt),
                        '&Month2=',(MONTH(mEndDate_dt)+0),'&Day2=',DAY(mEndDate_dt),'&Year2=',YEAR(mEndDate_dt),
                        '&ControlNo=',b.PBID_cd) AS 'ModuleDesc_tx',
                        IFNULL(a.DebitAmount_no,0) As 'Debit',
                        IFNULL(a.CreditAmount_no,0) AS 'Credit',
                        a.AccountID_cd,
                        a.SubsidiaryID_cd,
                        a.Seq_no,
                        b.Journal_tx,
                        b.Post_yn

                FROM tb_tpurchasesdtl AS a

                LEFT JOIN
                (SELECT PBID_cd,
	                      PBDate_dt,
                        '' AS PaymasterID_cd,
                        Particular_tx,
	                      '2' AS 'Journal_tx',
                        Post_yn,
                        baseline

                FROM tb_tpurchaseshdr WHERE PBDate_dt BETWEEN mStartDate_dt AND mEndDate_dt AND Post_yn like mStatus_) AS b
                ON a.PBID_cd = b.PBID_cd

                LEFT JOIN tb_mpaymaster AS c
                ON b.baseline = c.PaymasterID_cd

                WHERE   a.AccountID_cd like concat(mAccountID_cd,'%') AND
                        a.SubsidiaryID_cd = CASE mSubsidiaryID_cd
			                        WHEN '' THEN a.SubsidiaryID_cd
			                        ELSE mSubsidiaryID_cd END AND
                        ('2' = mJournal_tx OR mJournal_tx = '0') AND
                        b.PBDate_dt BETWEEN mStartDate_dt AND mEndDate_dt AND b.Post_yn like mStatus_                 
                        
                        
                        
                        
                        ) AS a


        LEFT JOIN tb_mcoahdr AS b
        ON a.AccountID_cd = b.AccountID_cd

        LEFT JOIN tb_mcoadtl AS c
        ON a.SubsidiaryID_cd = c.SubsidiaryID_cd

        ORDER BY a.DocDate_dt ASC,
                 a.Journal_tx ASC,
                 a.Ref_tx ASC;
 


END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `rp_GeneralLedger_Select_`
--

DROP PROCEDURE IF EXISTS `rp_GeneralLedger_Select_`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `rp_GeneralLedger_Select_`(IN mEmployeeID_cd VARCHAR(15), IN mAccountID_cd VARCHAR(5), IN mSubsidiaryID_cd VARCHAR(20), IN mJournal_tx VARCHAR(1), IN mStartDate_dt DATE, IN mEndDate_dt DATE, IN mStatus VARCHAR(1))
BEGIN
       declare mStatus_  varchar(1);
        set mStatus_ = CONCAT(mStatus,'%');

select CONCAT('generalledger_search_.php?Start=2&ControlNo=',AccountID_cd,'&SubsidiaryNo=',SubsidiaryID_cd,'&Journal=',mJournal_tx,'',
                        '&Month1=',(MONTH(mStartDate_dt)),'&Day1=',DAY(mStartDate_dt),'&Year1=',YEAR(mStartDate_dt),
                        '&Month2=',(MONTH(mEndDate_dt)),'&Day2=',DAY(mEndDate_dt),'&Year2=',YEAR(mEndDate_dt)) AS ModuleDesc_tx, '' as Ref_tx,AccountDesc_tx as Reference_tx, AccountID_cd as DocNo_tx, AccountID_cd as DocDate_dt, '' as CheckNo_tx,SubsidiaryID_cd as PaymasterName_tx, SubsidiaryDesc_tx as  Particular_tx, Debit,Credit,AccountID_cd,SubsidiaryID_cd,'' as Seq_no, '' as Journal_tx, '' as Post_yn, Debit_yn,'' as SubsidiaryDesc_tx    from

(select b.AccountID_cd, b.Debit_yn, b.AccountDesc_tx, b.SubsidiaryID_cd, b.Subsidiarydesc_tx, IF(sum(debit-credit)>0,sum(debit-credit),0) as debit, IF(sum(debit-credit)<0,sum(credit-debit),0) as credit from 
(select a.AccountID_cd,a.Debit_yn, a.AccountDesc_tx,a.SubsidiaryID_cd,a.Subsidiarydesc_tx,sum(a.DebitAmount_no) as debit,sum(a.CreditAmount_no) as credit FROM
(select 1 as Journal,dtl.AccountID_cd, masthdr.Debit_yn, masthdr.AccountDesc_tx,dtl.SubsidiaryID_cd, mastdtl.Subsidiarydesc_tx,dtl.DebitAmount_no,dtl.CreditAmount_no from tb_tcashreceiptshdr as hdr 
left join tb_tcashreceiptsdtl as dtl on hdr.crid_cd=dtl.crid_cd
left join tb_mcoahdr as masthdr on masthdr.AccountID_cd = dtl.AccountID_cd
left join tb_mcoadtl as mastdtl on mastdtl.SubsidiaryID_cd = dtl.SubsidiaryID_cd
where   dtl.AccountID_cd like concat(mAccountID_cd,'%') AND
dtl.SubsidiaryID_cd = CASE mSubsidiaryID_cd
						WHEN '' THEN dtl.SubsidiaryID_cd
						ELSE mSubsidiaryID_cd END AND
hdr.crdate_dt between  mStartDate_dt AND mEndDate_dt AND hdr.Post_yn like mStatus_

union all
select  2 as Journal, dtl.AccountID_cd, masthdr.Debit_yn, masthdr.AccountDesc_tx,dtl.SubsidiaryID_cd, mastdtl.Subsidiarydesc_tx,dtl.DebitAmount_no,dtl.CreditAmount_no from tb_tpurchaseshdr as hdr 
left join tb_tpurchasesdtl as dtl on hdr.pbid_cd=dtl.pbid_cd
left join tb_mcoahdr as masthdr on masthdr.AccountID_cd = dtl.AccountID_cd
left join tb_mcoadtl as mastdtl on mastdtl.SubsidiaryID_cd = dtl.SubsidiaryID_cd
where   dtl.AccountID_cd like concat(mAccountID_cd,'%') AND
dtl.SubsidiaryID_cd = CASE mSubsidiaryID_cd
						WHEN '' THEN dtl.SubsidiaryID_cd
						ELSE mSubsidiaryID_cd END AND
hdr.pbdate_dt between  mStartDate_dt AND mEndDate_dt AND hdr.Post_yn like mStatus_

union all
select 3 as Journal,dtl.AccountID_cd, masthdr.Debit_yn, masthdr.AccountDesc_tx,dtl.SubsidiaryID_cd, mastdtl.Subsidiarydesc_tx,dtl.DebitAmount_no,dtl.CreditAmount_no from tb_tcashsaleshdr as hdr 
left join tb_tcashsalesdtl as dtl on hdr.csid_cd=dtl.csid_cd
left join tb_mcoahdr as masthdr on masthdr.AccountID_cd = dtl.AccountID_cd
left join tb_mcoadtl as mastdtl on mastdtl.SubsidiaryID_cd = dtl.SubsidiaryID_cd
where   dtl.AccountID_cd like concat(mAccountID_cd,'%') AND
dtl.SubsidiaryID_cd = CASE mSubsidiaryID_cd
						WHEN '' THEN dtl.SubsidiaryID_cd
						ELSE mSubsidiaryID_cd END AND
hdr.csdate_dt between  mStartDate_dt AND mEndDate_dt AND hdr.Post_yn like mStatus_

union all
select 4 as Journal,dtl.AccountID_cd, masthdr.Debit_yn, masthdr.AccountDesc_tx,dtl.SubsidiaryID_cd, mastdtl.Subsidiarydesc_tx,dtl.DebitAmount_no,dtl.CreditAmount_no from tb_tchargesaleshdr as hdr 
left join tb_tchargesalesdtl as dtl on hdr.bsid_cd=dtl.bsid_cd
left join tb_mcoahdr as masthdr on masthdr.AccountID_cd = dtl.AccountID_cd
left join tb_mcoadtl as mastdtl on mastdtl.SubsidiaryID_cd = dtl.SubsidiaryID_cd
where   dtl.AccountID_cd like concat(mAccountID_cd,'%') AND
dtl.SubsidiaryID_cd = CASE mSubsidiaryID_cd
						WHEN '' THEN dtl.SubsidiaryID_cd
						ELSE mSubsidiaryID_cd END AND
hdr.bsdate_dt between  mStartDate_dt AND mEndDate_dt AND hdr.Post_yn like mStatus_

union all
select 5 as Journal,dtl.AccountID_cd, masthdr.Debit_yn, masthdr.AccountDesc_tx,dtl.SubsidiaryID_cd, mastdtl.Subsidiarydesc_tx,dtl.DebitAmount_no,dtl.CreditAmount_no from tb_tcheckdisbursementhdr as hdr 
left join tb_tcheckdisbursementdtl as dtl on hdr.cdid_cd=dtl.cdid_cd
left join tb_mcoahdr as masthdr on masthdr.AccountID_cd = dtl.AccountID_cd
left join tb_mcoadtl as mastdtl on mastdtl.SubsidiaryID_cd = dtl.SubsidiaryID_cd
where   dtl.AccountID_cd like concat(mAccountID_cd,'%') AND
dtl.SubsidiaryID_cd = CASE mSubsidiaryID_cd
						WHEN '' THEN dtl.SubsidiaryID_cd
						ELSE mSubsidiaryID_cd END AND
hdr.cddate_dt between  mStartDate_dt AND mEndDate_dt AND hdr.Post_yn like mStatus_
union all
select 6 as Journal,dtl.AccountID_cd, masthdr.Debit_yn, masthdr.AccountDesc_tx,dtl.SubsidiaryID_cd, mastdtl.Subsidiarydesc_tx,dtl.DebitAmount_no,dtl.CreditAmount_no from tb_tgeneraljournalhdr as hdr 
left join tb_tgeneraljournaldtl as dtl on hdr.gjid_cd=dtl.gjid_cd
left join tb_mcoahdr as masthdr on masthdr.AccountID_cd = dtl.AccountID_cd
left join tb_mcoadtl as mastdtl on mastdtl.SubsidiaryID_cd = dtl.SubsidiaryID_cd
where   dtl.AccountID_cd like concat(mAccountID_cd,'%') AND
dtl.SubsidiaryID_cd = CASE mSubsidiaryID_cd
						WHEN '' THEN dtl.SubsidiaryID_cd
						ELSE mSubsidiaryID_cd END AND
hdr.gjdate_dt between  mStartDate_dt AND mEndDate_dt AND hdr.Post_yn like mStatus_) as a
where a.Journal =mJournal_tx OR mJournal_tx =0 group by a.AccountID_cd,a.AccountDesc_tx,a.SubsidiaryID_cd,a.Subsidiarydesc_tx
order by a.SubsidiaryID_cd) as b group by b.AccountID_cd, b.AccountDesc_tx, b.SubsidiaryID_cd) as c;



END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `rp_IncomeStatement_Select`
--

DROP PROCEDURE IF EXISTS `rp_IncomeStatement_Select`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `rp_IncomeStatement_Select`(IN mType_tx VARCHAR(1), IN mIncomeStatementType_tx VARCHAR(1), IN mMonth1 INTEGER, IN mYear1 INTEGER, IN mMonth2 INTEGER, IN mYear2 INTEGER, iN mStatus varchar(1))
BEGIN
      
        
        
        
        
        
        
        
        
        
        
       declare mYear3 INT; 
       declare mMonth3 INT;
       if mMonth2 = 1 then
       		set @mMonth3 = 1;
            set @mYear3 = mYear2; 
       end IF;     
       IF mMonth2 = 2 then
       		set @mMonth3 = 1;  
            set @mYear3 = mYear2; 
       end IF;
       IF mMonth2 = 3 then
       		set @mMonth3 = 2;  
       		set @mYear3 = mYear2;
       end IF;
       if mMonth2 = 4 then
       		set @mMonth3 = 3;
            set @mYear3 = mYear2;
       end if;
       if mMonth2 = 5 then
       		set @mMonth3 = 4; 
            set @mYear3 = mYear2;
       end IF;
       if mMonth2 = 6 then
       		set @mMonth3 = 5;
            set @mYear3 = mYear2;
       end if;
		if mMonth2 = 7 then
       		set @mMonth3 = 6;
           set @mYear3 = mYear2; 
       end if;
       if mMonth2 = 8 then
       		set @mMonth3 = 7;
            set @mYear3 = mYear2;
       end IF;
       if mMonth2 = 9 then
       		set @mMonth3 = 8;
            set @mYear3 = mYear2;
       end if;
       if mMonth2 = 10 then
       		set @mMonth3 = 9;
            set @mYear3 = mYear2;
       end if;
       if mMonth2 = 11 then
       		set @mMonth3 = 10;
            set @mYear3 = mYear2;
       end if;
       if mMonth2 = 12 then
       		set @mMonth3 = 11;
            set @mYear3 = mYear2;
       end if;
              
        if mType_tx <> '0' then
                SELECT a.AccountID_cd,
                       a.AccountDesc_tx,
                       CASE a.Debit_yn
                                WHEN '1' THEN SUM(IFNULL(b.LastYearDebitAmount_no,0)) - SUM(IFNULL(b.LastYearCreditAmount_no,0))
                                ELSE SUM(IFNULL(b.LastYearCreditAmount_no,0)) - SUM(IFNULL(b.LastYearDebitAmount_no,0)) END AS 'LastYearAmount_no',
                       CASE a.Debit_yn
                                WHEN '1' THEN SUM(IFNULL(b.LastDebitAmount_no,0)) - SUM(IFNULL(b.LastCreditAmount_no,0))
                                ELSE SUM(IFNULL(b.LastCreditAmount_no,0)) - SUM(IFNULL(b.LastDebitAmount_no,0)) END AS 'LastAmount_no',
                       CASE a.Debit_yn
                                WHEN '1' THEN SUM(IFNULL(b.CurrentDebitAmount_no,0)) - SUM(IFNULL(b.CurrentCreditAmount_no,0))
                                ELSE SUM(IFNULL(b.CurrentCreditAmount_no,0)) - SUM(IFNULL(b.CurrentDebitAmount_no,0)) END AS 'CurrentAmount_no',
                       CASE a.Debit_yn
                                WHEN '1' THEN SUM(IFNULL(b.ThisDebitAmount_no,0)) - SUM(IFNULL(b.ThisCreditAmount_no,0))
                                ELSE SUM(IFNULL(b.ThisCreditAmount_no,0)) - SUM(IFNULL(b.ThisDebitAmount_no,0)) END AS 'ThisAmount_no'
                FROM tb_mcoahdr a
                LEFT JOIN
                (SELECT 1 AS 'Seq_no',
                        a.AccountID_cd,
                        CASE WHEN SUM(IFNULL(a.LastYearDebitAmount_no,0)) > SUM(IFNULL(a.LastYearCreditAmount_no,0))
                                THEN ROUND(SUM(IFNULL(a.LastYearDebitAmount_no,0)) - SUM(IFNULL(a.LastYearCreditAmount_no,0)),4)
                                ELSE 0 END AS 'LastYearDebitAmount_no',
                        CASE WHEN SUM(IFNULL(a.LastYearCreditAmount_no,0)) > SUM(IFNULL(a.LastYearDebitAmount_no,0))
                                THEN ROUND(SUM(IFNULL(a.LastYearCreditAmount_no,0)) -SUM(IFNULL(a.LastYearDebitAmount_no,0)),4)
                                ELSE 0 END AS 'LastYearCreditAmount_no',
                        CASE WHEN SUM(IFNULL(a.LastDebitAmount_no,0)) > SUM(IFNULL(a.LastCreditAmount_no,0))
                                THEN ROUND(SUM(IFNULL(a.LastDebitAmount_no,0)) - SUM(IFNULL(a.LastCreditAmount_no,0)),4)
                                ELSE 0 END AS 'LastDebitAmount_no',
                        CASE WHEN SUM(IFNULL(a.LastCreditAmount_no,0)) > SUM(IFNULL(a.LastDebitAmount_no,0))
                                THEN ROUND(SUM(IFNULL(a.LastCreditAmount_no,0)) -SUM(IFNULL(a.LastDebitAmount_no,0)),4)
                                ELSE 0 END AS 'LastCreditAmount_no',
                        CASE WHEN SUM(IFNULL(a.CurrentDebitAmount_no,0)) > SUM(IFNULL(a.CurrentCreditAmount_no,0))
                                THEN ROUND(SUM(IFNULL(a.CurrentDebitAmount_no,0)) - SUM(IFNULL(a.CurrentCreditAmount_no,0)),4)
                                ELSE 0 END AS 'CurrentDebitAmount_no',
                        CASE WHEN SUM(IFNULL(a.CurrentCreditAmount_no,0)) > SUM(IFNULL(a.CurrentDebitAmount_no,0))
                                THEN ROUND(SUM(IFNULL(a.CurrentCreditAmount_no,0)) -SUM(IFNULL(a.CurrentDebitAmount_no,0)),4)
                                ELSE 0 END AS 'CurrentCreditAmount_no',
                        CASE WHEN SUM(IFNULL(a.ThisDebitAmount_no,0)) > SUM(IFNULL(a.ThisCreditAmount_no,0))
                                THEN ROUND(SUM(IFNULL(a.ThisDebitAmount_no,0)) - SUM(IFNULL(a.ThisCreditAmount_no,0)),4)
                                ELSE 0 END AS 'ThisDebitAmount_no',
                        CASE WHEN SUM(IFNULL(a.ThisCreditAmount_no,0)) > SUM(IFNULL(a.ThisDebitAmount_no,0))
                                THEN ROUND(SUM(IFNULL(a.ThisCreditAmount_no,0)) -SUM(IFNULL(a.ThisDebitAmount_no,0)),4)
                                ELSE 0 END AS 'ThisCreditAmount_no'
                FROM
                (SELECT   a.CRID_cd AS 'ControlID_cd',
                          a.CRDate_dt AS 'ControlDate_dt',
                          b.CRID_cd,
                          b.AccountID_cd,
                          b.Seq_no,
                          ROUND(b.DebitAmount_no,4) AS LastYearDebitAmount_no,
                          ROUND(b.CreditAmount_no,4) AS LastYearCreditAmount_no,
                          0 AS LastDebitAmount_no,
                          0 AS LastCreditAmount_no,
                          0 AS CurrentDebitAmount_no,
                          0 AS CurrentCreditAmount_no,
                          0 AS ThisDebitAmount_no,
                          0 AS ThisCreditAmount_no,
                          '1' AS Type_tx
                FROM tb_tcashreceiptshdr as a
                LEFT JOIN tb_tcashreceiptsdtl as b
                ON a.CRID_cd = b.CRID_cd
                WHERE    YEAR(a.CRDate_dt) = mYear1 AND MONTH(a.CRDate_dt) = mMonth1 AND Post_yn LIKE CONCAT('',mStatus,'%')


                UNION ALL
                SELECT    a.CRID_cd AS 'ControlID_cd',
                          a.CRDate_dt AS 'ControlDate_dt',
                          b.CRID_cd,
                          b.AccountID_cd,
                          b.Seq_no,
                          0 AS LastYearDebitAmount_no,
                          0 AS LastYearCreditAmount_no,
                          ROUND(b.DebitAmount_no,4) AS LastDebitAmount_no,
                          ROUND(b.CreditAmount_no,4) AS LastCreditAmount_no,
                          0 AS CurrentDebitAmount_no,
                          0 AS CurrentCreditAmount_no,
                          0 AS ThisDebitAmount_no,
                          0 AS ThisCreditAmount_no,
                          '1' AS Type_tx
                FROM tb_tcashreceiptshdr as a
                LEFT JOIN tb_tcashreceiptsdtl as b
                ON a.CRID_cd = b.CRID_cd
                WHERE   YEAR(a.CRDate_dt) = @mYear3 AND MONTH(a.CRDate_dt) <= @mMonth3  AND Post_yn  LIKE CONCAT('',mStatus,'%')


                UNION ALL
                SELECT    a.CRID_cd AS 'ControlID_cd',
                          a.CRDate_dt AS 'ControlDate_dt',
                          b.CRID_cd,
                          b.AccountID_cd,
                          b.Seq_no,
                          0 AS LastYearDebitAmount_no,
                          0 AS LastYearCreditAmount_no,
                          0 AS LastDebitAmount_no,
                          0 AS LastCreditAmount_no,
                          ROUND(b.DebitAmount_no,4) AS CurrentDebitAmount_no,
                          ROUND(b.CreditAmount_no,4) AS CurrentCreditAmount_no,
                          0 AS ThisDebitAmount_no,
                          0 AS ThisCreditAmount_no,
                          '1' AS Type_tx
                FROM tb_tcashreceiptshdr as a
                LEFT JOIN tb_tcashreceiptsdtl as b
                ON a.CRID_cd = b.CRID_cd
                WHERE   YEAR(a.CRDate_dt) = mYear2 AND MONTH(a.CRDate_dt) = mMonth2 AND Post_yn  LIKE CONCAT('',mStatus,'%')


                UNION  ALL
                SELECT    a.CRID_cd AS 'ControlID_cd',
                          a.CRDate_dt AS 'ControlDate_dt',
                          b.CRID_cd,
                          b.AccountID_cd,
                          b.Seq_no,
                          0 AS LastYearDebitAmount_no,
                          0 AS LastYearCreditAmount_no,
                          0 AS LastDebitAmount_no,
                          0 AS LastCreditAmount_no,
                          0 AS CurrentDebitAmount_no,
                          0 AS CurrentCreditAmount_no,
                          ROUND(b.DebitAmount_no,4) AS ThisDebitAmount_no,
                          ROUND(b.CreditAmount_no,4) AS ThisCreditAmount_no,
                          '1' AS Type_tx
                FROM tb_tcashreceiptshdr as a
                LEFT JOIN tb_tcashreceiptsdtl as b
                ON a.CRID_cd = b.CRID_cd
                WHERE    YEAR(a.CRDate_dt) = mYear2 AND MONTH(a.CRDate_dt) <= mMonth2 AND Post_yn  LIKE CONCAT('',mStatus,'%')


                UNION ALL
                SELECT    a.PBID_cd AS 'ControlID_cd',
                          a.PBDate_dt AS 'ControlDate_dt',
                          b.PBID_cd,
                          b.AccountID_cd,
                          b.Seq_no,
                          ROUND(b.DebitAmount_no,4) AS LastYearDebitAmount_no,
                          ROUND(b.CreditAmount_no,4) AS LastYearCreditAmount_no,
                          0 AS LastDebitAmount_no,
                          0 AS LastCreditAmount_no,
                          0 AS CurrentDebitAmount_no,
                          0 AS CurrentCreditAmount_no,
                          0 AS ThisDebitAmount_no,
                          0 AS ThisCreditAmount_no,
                          '2' AS Type_tx
                FROM tb_tpurchaseshdr as a
                LEFT JOIN tb_tpurchasesdtl as b
                ON a.PBID_cd = b.PBID_cd
                WHERE     YEAR(a.PBDate_dt) = mYear1 AND MONTH(a.PBDate_dt) = mMonth1 AND Post_yn LIKE CONCAT('',mStatus,'%')


                UNION  ALL
                SELECT    a.PBID_cd AS 'ControlID_cd',
                          a.PBDate_dt AS 'ControlDate_dt',
                          b.PBID_cd,
                          b.AccountID_cd,
                          b.Seq_no,
                          0 AS LastYearDebitAmount_no,
                          0 AS LastYearCreditAmount_no,
                          ROUND(b.DebitAmount_no,4) AS LastDebitAmount_no,
                          ROUND(b.CreditAmount_no,4) AS LastCreditAmount_no,
                          0 AS CurrentDebitAmount_no,
                          0 AS CurrentCreditAmount_no,
                          0 AS ThisDebitAmount_no,
                          0 AS ThisCreditAmount_no,
                          '2' AS Type_tx
                FROM tb_tpurchaseshdr as a
                LEFT JOIN tb_tpurchasesdtl as b
                ON a.PBID_cd = b.PBID_cd
                WHERE    YEAR(a.PBDate_dt) = @mYear3 AND MONTH(a.PBDate_dt) <= @mMonth3 AND Post_yn LIKE CONCAT('',mStatus,'%')


                UNION ALL
                SELECT    a.PBID_cd AS 'ControlID_cd',
                          a.PBDate_dt AS 'ControlDate_dt',
                          b.PBID_cd,
                          b.AccountID_cd,
                          b.Seq_no,
                          0 AS LastYearDebitAmount_no,
                          0 AS LastYearCreditAmount_no,
                          0 AS LastDebitAmount_no,
                          0 AS LastCreditAmount_no,
                          ROUND(b.DebitAmount_no,4) AS CurrentDebitAmount_no,
                          ROUND(b.CreditAmount_no,4) AS CurrentCreditAmount_no,
                          0 AS ThisDebitAmount_no,
                          0 AS ThisCreditAmount_no,
                          '2' AS Type_tx
                FROM tb_tpurchaseshdr as a
                LEFT JOIN tb_tpurchasesdtl as b
                ON a.PBID_cd = b.PBID_cd
                WHERE     YEAR(a.PBDate_dt) = mYear2 AND MONTH(a.PBDate_dt) = mMonth2 AND Post_yn LIKE CONCAT('',mStatus,'%')


                UNION ALL
                SELECT    a.PBID_cd AS 'ControlID_cd',
                          a.PBDate_dt AS 'ControlDate_dt',
                          b.PBID_cd,
                          b.AccountID_cd,
                          b.Seq_no,
                          0 AS LastYearDebitAmount_no,
                          0 AS LastYearCreditAmount_no,
                          0 AS LastDebitAmount_no,
                          0 AS LastCreditAmount_no,
                          0 AS CurrentDebitAmount_no,
                          0 AS CurrentCreditAmount_no,
                          ROUND(b.DebitAmount_no,4) AS ThisDebitAmount_no,
                          ROUND(b.CreditAmount_no,4) AS ThisCreditAmount_no,
                          '2' AS Type_tx
                FROM tb_tpurchaseshdr as a
                LEFT JOIN tb_tpurchasesdtl as b
                ON a.PBID_cd = b.PBID_cd
                WHERE   YEAR(a.PBDate_dt) = mYear2 AND MONTH(a.PBDate_dt) <= mMonth2 AND Post_yn LIKE CONCAT('',mStatus,'%')


                UNION  ALL
                SELECT    a.CSID_cd AS 'ControlID_cd',
                          a.CSDate_dt AS 'ControlDate_dt',
                          b.CSID_cd,
                          b.AccountID_cd,
                          b.Seq_no,
                          ROUND(b.DebitAmount_no,4) AS LastYearDebitAmount_no,
                          ROUND(b.CreditAmount_no,4) AS LastYearCreditAmount_no,
                          0 AS LastDebitAmount_no,
                          0 AS LastCreditAmount_no,
                          0 AS CurrentDebitAmount_no,
                          0 AS CurrentCreditAmount_no,
                          0 AS ThisDebitAmount_no,
                          0 AS ThisCreditAmount_no,
                          '3' AS Type_tx
                FROM tb_tcashsaleshdr as a
                LEFT JOIN tb_tcashsalesdtl as b
                ON a.CSID_cd = b.CSID_cd
                WHERE      YEAR(a.CSDate_dt) = mYear1 AND MONTH(a.CSDate_dt) = mMonth1 AND Post_yn LIKE CONCAT('',mStatus,'%')


                UNION ALL
                SELECT    a.CSID_cd AS 'ControlID_cd',
                          a.CSDate_dt AS 'ControlDate_dt',
                          b.CSID_cd,
                          b.AccountID_cd,
                          b.Seq_no,
                          0 AS LastYearDebitAmount_no,
                          0 AS LastYearCreditAmount_no,
                          ROUND(b.DebitAmount_no,4) AS LastDebitAmount_no,
                          ROUND(b.CreditAmount_no,4) AS LastCreditAmount_no,
                          0 AS CurrentDebitAmount_no,
                          0 AS CurrentCreditAmount_no,
                          0 AS ThisDebitAmount_no,
                          0 AS ThisCreditAmount_no,
                          '3' AS Type_tx
                FROM tb_tcashsaleshdr as a
                LEFT JOIN tb_tcashsalesdtl as b
                ON a.CSID_cd = b.CSID_cd
                WHERE    YEAR(a.CSDate_dt) = @mYear3 AND MONTH(a.CSDate_dt) <= @mMonth3 AND Post_yn LIKE CONCAT('',mStatus,'%')


                UNION  ALL
                SELECT    a.CSID_cd AS 'ControlID_cd',
                          a.CSDate_dt AS 'ControlDate_dt',
                          b.CSID_cd,
                          b.AccountID_cd,
                          b.Seq_no,
                          0 AS LastYearDebitAmount_no,
                          0 AS LastYearCreditAmount_no,
                          0 AS LastDebitAmount_no,
                          0 AS LastCreditAmount_no,
                          ROUND(b.DebitAmount_no,4) AS CurrentDebitAmount_no,
                          ROUND(b.CreditAmount_no,4) AS CurrentCreditAmount_no,
                          0 AS ThisDebitAmount_no,
                          0 AS ThisCreditAmount_no,
                          '3' AS Type_tx
                FROM tb_tcashsaleshdr as a
                LEFT JOIN tb_tcashsalesdtl as b
                ON a.CSID_cd = b.CSID_cd
                WHERE    YEAR(a.CSDate_dt) = mYear2 AND MONTH(a.CSDate_dt) = mMonth2 AND Post_yn LIKE CONCAT('',mStatus,'%')


                UNION ALL
                SELECT    a.CSID_cd AS 'ControlID_cd',
                          a.CSDate_dt AS 'ControlDate_dt',
                          b.CSID_cd,
                          b.AccountID_cd,
                          b.Seq_no,
                          0 AS LastYearDebitAmount_no,
                          0 AS LastYearCreditAmount_no,
                          0 AS LastDebitAmount_no,
                          0 AS LastCreditAmount_no,
                          0 AS CurrentDebitAmount_no,
                          0 AS CurrentCreditAmount_no,
                          ROUND(b.DebitAmount_no,4) AS ThisDebitAmount_no,
                          ROUND(b.CreditAmount_no,4) AS ThisCreditAmount_no,
                          '3' AS Type_tx
                FROM tb_tcashsaleshdr as a
                LEFT JOIN tb_tcashsalesdtl as b
                ON a.CSID_cd = b.CSID_cd
                WHERE     YEAR(a.CSDate_dt) = mYear2 AND MONTH(a.CSDate_dt) <= mMonth2 AND Post_yn LIKE CONCAT('',mStatus,'%')


                UNION ALL
                SELECT    a.BSID_cd AS 'ControlID_cd',
                          a.BSDate_dt AS 'ControlDate_dt',
                          b.BSID_cd,
                          b.AccountID_cd,
                          b.Seq_no,
                          ROUND(b.DebitAmount_no,4) AS LastYearDebitAmount_no,
                          ROUND(b.CreditAmount_no,4) AS LastYearCreditAmount_no,
                          0 AS LastDebitAmount_no,
                          0 AS LastCreditAmount_no,
                          0 AS CurrentDebitAmount_no,
                          0 AS CurrentCreditAmount_no,
                          0 AS ThisDebitAmount_no,
                          0 AS ThisCreditAmount_no,
                          '4' AS Type_tx
                FROM tb_tchargesaleshdr as a
                LEFT JOIN tb_tchargesalesdtl as b
                ON a.BSID_cd = b.BSID_cd
                WHERE      YEAR(a.BSDate_dt) = mYear1 AND MONTH(a.BSDate_dt) = mMonth1 AND Post_yn LIKE CONCAT('',mStatus,'%')


                UNION  ALL
                SELECT    a.BSID_cd AS 'ControlID_cd',
                          a.BSDate_dt AS 'ControlDate_dt',
                          b.BSID_cd,
                          b.AccountID_cd,
                          b.Seq_no,
                          0 AS LastYearDebitAmount_no,
                          0 AS LastYearCreditAmount_no,
                          ROUND(b.DebitAmount_no,4) AS LastDebitAmount_no,
                          ROUND(b.CreditAmount_no,4) AS LastCreditAmount_no,
                          0 AS CurrentDebitAmount_no,
                          0 AS CurrentCreditAmount_no,
                          0 AS ThisDebitAmount_no,
                          0 AS ThisCreditAmount_no,
                          '4' AS Type_tx
                FROM tb_tchargesaleshdr as a
                LEFT JOIN tb_tchargesalesdtl as b
                ON a.BSID_cd = b.BSID_cd
                WHERE    YEAR(a.BSDate_dt) = @mYear3 AND MONTH(a.BSDate_dt) <= @mMonth3 AND Post_yn LIKE CONCAT('',mStatus,'%')


                UNION ALL
                SELECT    a.BSID_cd AS 'ControlID_cd',
                          a.BSDate_dt AS 'ControlDate_dt',
                          b.BSID_cd,
                          b.AccountID_cd,
                          b.Seq_no,
                          0 AS LastYearDebitAmount_no,
                          0 AS LastYearCreditAmount_no,
                          0 AS LastDebitAmount_no,
                          0 AS LastCreditAmount_no,
                          ROUND(b.DebitAmount_no,4) AS CurrentDebitAmount_no,
                          ROUND(b.CreditAmount_no,4) AS CurrentCreditAmount_no,
                          0 AS ThisDebitAmount_no,
                          0 AS ThisCreditAmount_no,
                          '4' AS Type_tx
                FROM tb_tchargesaleshdr as a
                LEFT JOIN tb_tchargesalesdtl as b
                ON a.BSID_cd = b.BSID_cd
                WHERE    YEAR(a.BSDate_dt) = mYear2 AND MONTH(a.BSDate_dt) = mMonth2 AND Post_yn LIKE CONCAT('',mStatus,'%')


                UNION ALL
                SELECT    a.BSID_cd AS 'ControlID_cd',
                          a.BSDate_dt AS 'ControlDate_dt',
                          b.BSID_cd,
                          b.AccountID_cd,
                          b.Seq_no,
                          0 AS LastYearDebitAmount_no,
                          0 AS LastYearCreditAmount_no,
                          0 AS LastDebitAmount_no,
                          0 AS LastCreditAmount_no,
                          0 AS CurrentDebitAmount_no,
                          0 AS CurrentCreditAmount_no,
                          ROUND(b.DebitAmount_no,4) AS ThisDebitAmount_no,
                          ROUND(b.CreditAmount_no,4) AS ThisCreditAmount_no,
                          '4' AS Type_tx
                FROM tb_tchargesaleshdr as a
                LEFT JOIN tb_tchargesalesdtl as b
                ON a.BSID_cd = b.BSID_cd
                WHERE    YEAR(a.BSDate_dt) = mYear2 AND MONTH(a.BSDate_dt) <= mMonth2 AND Post_yn LIKE CONCAT('',mStatus,'%')


                UNION  ALL
                SELECT    a.CDID_cd AS 'ControlID_cd',
                          a.CDDate_dt AS 'ControlDate_dt',
                          b.CDID_cd,
                          b.AccountID_cd,
                          b.Seq_no,
                          ROUND(b.DebitAmount_no,4) AS LastYearDebitAmount_no,
                          ROUND(b.CreditAmount_no,4) AS LastYearCreditAmount_no,
                          0 AS LastDebitAmount_no,
                          0 AS LastCreditAmount_no,
                          0 AS CurrentDebitAmount_no,
                          0 AS CurrentCreditAmount_no,
                          0 AS ThisDebitAmount_no,
                          0 AS ThisCreditAmount_no,
                          '5' AS Type_tx
                FROM tb_tcheckdisbursementhdr as a
                LEFT JOIN tb_tcheckdisbursementdtl as b
                ON a.CDID_cd = b.CDID_cd
                WHERE    YEAR(a.CDDate_dt) = mYear1 AND MONTH(a.CDDate_dt) = mMonth1 AND Post_yn LIKE CONCAT('',mStatus,'%')


                UNION  ALL
                SELECT    a.CDID_cd AS 'ControlID_cd',
                          a.CDDate_dt AS 'ControlDate_dt',
                          b.CDID_cd,
                          b.AccountID_cd,
                          b.Seq_no,
                          0 AS LastYearDebitAmount_no,
                          0 AS LastYearCreditAmount_no,
                          ROUND(b.DebitAmount_no,4) AS LastDebitAmount_no,
                          ROUND(b.CreditAmount_no,4) AS LastCreditAmount_no,
                          0 AS CurrentDebitAmount_no,
                          0 AS CurrentCreditAmount_no,
                          0 AS ThisDebitAmount_no,
                          0 AS ThisCreditAmount_no,
                          '5' AS Type_tx
                FROM tb_tcheckdisbursementhdr as a
                LEFT JOIN tb_tcheckdisbursementdtl as b
                ON a.CDID_cd = b.CDID_cd
                WHERE    YEAR(a.CDDate_dt) = @mYear3 AND MONTH(a.CDDate_dt) <= @mMonth3 AND Post_yn LIKE CONCAT('',mStatus,'%')


                UNION  ALL
                SELECT    a.CDID_cd AS 'ControlID_cd',
                          a.CDDate_dt AS 'ControlDate_dt',
                          b.CDID_cd,
                          b.AccountID_cd,
                          b.Seq_no,
                          0 AS LastYearDebitAmount_no,
                          0 AS LastYearCreditAmount_no,
                          0 AS LastDebitAmount_no,
                          0 AS LastCreditAmount_no,
                          ROUND(b.DebitAmount_no,4) AS CurrentDebitAmount_no,
                          ROUND(b.CreditAmount_no,4) AS CurrentCreditAmount_no,
                          0 AS ThisDebitAmount_no,
                          0 AS ThisCreditAmount_no,
                          '5' AS Type_tx
                FROM tb_tcheckdisbursementhdr as a
                LEFT JOIN tb_tcheckdisbursementdtl as b
                ON a.CDID_cd = b.CDID_cd
                WHERE    YEAR(a.CDDate_dt) = mYear2 AND MONTH(a.CDDate_dt) = mMonth2 AND Post_yn LIKE CONCAT('',mStatus,'%')


                UNION ALL
                SELECT    a.CDID_cd AS 'ControlID_cd',
                          a.CDDate_dt AS 'ControlDate_dt',
                          b.CDID_cd,
                          b.AccountID_cd,
                          b.Seq_no,
                          0 AS LastYearDebitAmount_no,
                          0 AS LastYearCreditAmount_no,
                          0 AS LastDebitAmount_no,
                          0 AS LastCreditAmount_no,
                          0 AS CurrentDebitAmount_no,
                          0 AS CurrentCreditAmount_no,
                          ROUND(b.DebitAmount_no,4) AS ThisDebitAmount_no,
                          ROUND(b.CreditAmount_no,4) AS ThisCreditAmount_no,
                          '5' AS Type_tx
                FROM tb_tcheckdisbursementhdr as a
                LEFT JOIN tb_tcheckdisbursementdtl as b
                ON a.CDID_cd = b.CDID_cd
                WHERE    YEAR(a.CDDate_dt) = mYear2 AND MONTH(a.CDDate_dt) <= mMonth2 AND Post_yn LIKE CONCAT('',mStatus,'%')
                UNION ALL


                SELECT    a.GJID_cd AS 'ControlID_cd',
                          a.GJDate_dt AS 'ControlDate_dt',
                          b.GJID_cd,
                          b.AccountID_cd,
                          b.Seq_no,
                          ROUND(b.DebitAmount_no,4) AS LastYearDebitAmount_no,
                          ROUND(b.CreditAmount_no,4) AS LastYearCreditAmount_no,
                          0 AS LastDebitAmount_no,
                          0 AS LastCreditAmount_no,
                          0 AS CurrentDebitAmount_no,
                          0 AS CurrentCreditAmount_no,
                          0 AS ThisDebitAmount_no,
                          0 AS ThisCreditAmount_no,
                          '6' AS Type_tx
                FROM tb_tgeneraljournalhdr as a
                LEFT JOIN tb_tgeneraljournaldtl as b
                ON a.GJID_cd = b.GJID_cd
                WHERE     YEAR(a.GJDate_dt) = mYear1 AND MONTH(a.GJDate_dt) = mMonth1 AND Post_yn LIKE CONCAT('',mStatus,'%')


                UNION  ALL
                SELECT    a.GJID_cd AS 'ControlID_cd',
                          a.GJDate_dt AS 'ControlDate_dt',
                          b.GJID_cd,
                          b.AccountID_cd,
                          b.Seq_no,
                          0 AS LastYearDebitAmount_no,
                          0 AS LastYearCreditAmount_no,
                          ROUND(b.DebitAmount_no,4) AS LastDebitAmount_no,
                          ROUND(b.CreditAmount_no,4) AS LastCreditAmount_no,
                          0 AS CurrentDebitAmount_no,
                          0 AS CurrentCreditAmount_no,
                          0 AS ThisDebitAmount_no,
                          0 AS ThisCreditAmount_no,
                          '6' AS Type_tx
                FROM tb_tgeneraljournalhdr as a
                LEFT JOIN tb_tgeneraljournaldtl as b
                ON a.GJID_cd = b.GJID_cd
                WHERE    YEAR(a.GJDate_dt) = @mYear3 AND MONTH(a.GJDate_dt) <= @mMonth3 AND Post_yn LIKE CONCAT('',mStatus,'%')


                UNION ALL
                SELECT    a.GJID_cd AS 'ControlID_cd',
                          a.GJDate_dt AS 'ControlDate_dt',
                          b.GJID_cd,
                          b.AccountID_cd,
                          b.Seq_no,
                          0 AS LastYearDebitAmount_no,
                          0 AS LastYearCreditAmount_no,
                          0 AS LastDebitAmount_no,
                          0 AS LastCreditAmount_no,
                          ROUND(b.DebitAmount_no,4) AS CurrentDebitAmount_no,
                          ROUND(b.CreditAmount_no,4) AS CurrentCreditAmount_no,
                          0 AS ThisDebitAmount_no,
                          0 AS ThisCreditAmount_no,
                          '6' AS Type_tx
                FROM tb_tgeneraljournalhdr as a
                LEFT JOIN tb_tgeneraljournaldtl as b
                ON a.GJID_cd = b.GJID_cd
                WHERE    YEAR(a.GJDate_dt) = mYear2 AND MONTH(a.GJDate_dt) = mMonth2 AND Post_yn LIKE CONCAT('',mStatus,'%')


                UNION ALL
                SELECT    a.GJID_cd AS 'ControlID_cd',
                          a.GJDate_dt AS 'ControlDate_dt',
                          b.GJID_cd,
                          b.AccountID_cd,
                          b.Seq_no,
                          0 AS LastYearDebitAmount_no,
                          0 AS LastYearCreditAmount_no,
                          0 AS LastDebitAmount_no,
                          0 AS LastCreditAmount_no,
                          0 AS CurrentDebitAmount_no,
                          0 AS CurrentCreditAmount_no,
                          ROUND(b.DebitAmount_no,4) AS ThisDebitAmount_no,
                          ROUND(b.CreditAmount_no,4) AS ThisCreditAmount_no,
                          '6' AS Type_tx
                FROM tb_tgeneraljournalhdr as a
                LEFT JOIN tb_tgeneraljournaldtl as b
                ON a.GJID_cd = b.GJID_cd
                
                
                WHERE     YEAR(a.GJDate_dt) = mYear2 AND MONTH(a.GJDate_dt) <= mMonth2 AND Post_yn LIKE CONCAT('',mStatus,'%')) a
                GROUP BY a.AccountID_cd) b
                ON a.AccountID_cd = b.AccountID_cd
                
                LEFT JOIN tb_mcoagroup as c
                ON a.GroupID_cd = c.GroupID_cd
                WHERE a.IncomeStatement_yn = '1' AND
                      a.IncomeStatementType_tx = mIncomeStatementType_tx
                GROUP BY a.IncomeStatementType_tx,
                         a.AccountID_cd,
                         a.AccountDesc_tx,
                         a.Debit_yn,
                         b.LastYearDebitAmount_no,
                         b.LastYearCreditAmount_no,
                         a.GroupID_cd
                ORDER BY a.IncomeStatementType_tx,
                         a.AccountID_cd;
        end if;      
        
        
        
        
        
        
        
        
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `rp_IncomeStatement_Select_`
--

DROP PROCEDURE IF EXISTS `rp_IncomeStatement_Select_`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `rp_IncomeStatement_Select_`(IN mIncomeStatementType_tx VARCHAR(1), IN mMonth INTEGER, IN mYear INTEGER, in mStatus varchar(1))
BEGIN


                SELECT a.AccountID_cd,
                       a.AccountDesc_tx,
                       CASE a.Debit_yn
                               WHEN '1' THEN SUM(IFNULL(b.Debit,0)) - SUM(IFNULL(b.Credit,0))
                               ELSE SUM(IFNULL(b.Credit,0)) - SUM(IFNULL(b.Debit,0)) END AS 'Amount_no'

                FROM tb_mcoahdr a

                LEFT JOIN
                (SELECT 1 AS 'Seq_no',
                        a.AccountID_cd,
                        CASE WHEN SUM(IFNULL(a.DebitAmount_no,0)) > SUM(IFNULL(a.CreditAmount_no,0))
                                THEN ROUND(SUM(IFNULL(a.DebitAmount_no,0)) - SUM(IFNULL(a.CreditAmount_no,0)),4)
                                ELSE 0 END AS 'Debit',
                        CASE WHEN SUM(IFNULL(a.CreditAmount_no,0)) > SUM(IFNULL(a.DebitAmount_no,0))
                                THEN ROUND(SUM(IFNULL(a.CreditAmount_no,0)) -SUM(IFNULL(a.DebitAmount_no,0)),4)
                                ELSE 0 END AS 'Credit'

                FROM
                (SELECT   a.CRID_cd AS 'ControlID_cd',
                          a.CRDate_dt AS 'ControlDate_dt',
                          b.AccountID_cd,
                          b.Seq_no,
                          ROUND(b.DebitAmount_no,4) AS DebitAmount_no,
                          ROUND(b.CreditAmount_no,4) AS CreditAmount_no,
                          '1' AS Type_tx

                FROM tb_tcashreceiptshdr a

                LEFT JOIN
                (SELECT   CRID_cd,
                          AccountID_cd,
                          Seq_no,
                          ROUND(DebitAmount_no,4) AS DebitAmount_no,
                          ROUND(CreditAmount_no,4) AS CreditAmount_no,
                          '1' AS Type_tx
                FROM tb_tcashreceiptsdtl) b
                ON a.CRID_cd = b.CRID_cd

                WHERE    YEAR(a.CRDate_dt) = mYear AND MONTH(a.CRDate_dt) <= mMonth AND Post_yn  LIKE CONCAT('',mStatus,'%')











                UNION














                SELECT    a.PBID_cd AS 'ControlID_cd',
                          a.PBDate_dt AS 'ControlDate_dt',
                          b.AccountID_cd,
                          b.Seq_no,
                          ROUND(b.DebitAmount_no,4) AS DebitAmount_no,
                          ROUND(b.CreditAmount_no,4) AS CreditAmount_no,
                          '2' AS Type_tx

                FROM tb_tpurchaseshdr a

                LEFT JOIN
                (SELECT   PBID_cd,
                          AccountID_cd,
                          Seq_no,
                          ROUND(DebitAmount_no,4) AS DebitAmount_no,
                          ROUND(CreditAmount_no,4) AS CreditAmount_no,
                          '2' AS Type_tx
                FROM tb_tpurchasesdtl) b
                ON a.PBID_cd = b.PBID_cd

                WHERE      YEAR(a.PBDate_dt) = mYear AND MONTH(a.PBDate_dt) <= mMonth AND Post_yn LIKE CONCAT('',mStatus,'%')







                UNION













                SELECT    a.CSID_cd AS 'ControlID_cd',
                          a.CSDate_dt AS 'ControlDate_dt',
                          b.AccountID_cd,
                          b.Seq_no,
                          ROUND(b.DebitAmount_no,4) AS DebitAmount_no,
                          ROUND(b.CreditAmount_no,4) AS CreditAmount_no,
                          '3' AS Type_tx

                FROM tb_tcashsaleshdr a

                LEFT JOIN
                (SELECT   CSID_cd,
                          AccountID_cd,
                          Seq_no,
                          ROUND(DebitAmount_no,4) AS DebitAmount_no,
                          ROUND(CreditAmount_no,4) AS CreditAmount_no,
                          '3' AS Type_tx
                FROM tb_tcashsalesdtl) b
                ON a.CSID_cd = b.CSID_cd

                WHERE   YEAR(a.CSDate_dt) = mYear AND MONTH(a.CSDate_dt) <= mMonth  AND Post_yn LIKE CONCAT('',mStatus,'%')










                UNION















                SELECT    a.BSID_cd AS 'ControlID_cd',
                          a.BSDate_dt AS 'ControlDate_dt',
                          b.AccountID_cd,
                          b.Seq_no,
                          ROUND(b.DebitAmount_no,4) AS DebitAmount_no,
                          ROUND(b.CreditAmount_no,4) AS CreditAmount_no,
                          '4' AS Type_tx

                FROM tb_tchargesaleshdr a

                LEFT JOIN
                (SELECT   BSID_cd,
                          AccountID_cd,
                          Seq_no,
                          ROUND(DebitAmount_no,4) AS DebitAmount_no,
                          ROUND(CreditAmount_no,4) AS CreditAmount_no,
                          '4' AS Type_tx
                FROM tb_tchargesalesdtl) b
                ON a.BSID_cd = b.BSID_cd

                WHERE    YEAR(a.BSDate_dt) = mYear AND MONTH(a.BSDate_dt) <= mMonth  AND Post_yn LIKE CONCAT('',mStatus,'%')







                UNION









                SELECT    a.CDID_cd AS 'ControlID_cd',
                          a.CDDate_dt AS 'ControlDate_dt',
                          b.AccountID_cd,
                          b.Seq_no,
                          ROUND(b.DebitAmount_no,4) AS DebitAmount_no,
                          ROUND(b.CreditAmount_no,4) AS CreditAmount_no,
                          '5' AS Type_tx

                FROM tb_tcheckdisbursementhdr a

                LEFT JOIN
                (SELECT   CDID_cd,
                          AccountID_cd,
                          Seq_no,
                          ROUND(DebitAmount_no,4) AS DebitAmount_no,
                          ROUND(CreditAmount_no,4) AS CreditAmount_no,
                          '5' AS Type_tx
                FROM tb_tcheckdisbursementdtl) b
                ON a.CDID_cd = b.CDID_cd

                WHERE     YEAR(a.CDDate_dt) = mYear AND MONTH(a.CDDate_dt) <= mMonth  AND Post_yn LIKE CONCAT('',mStatus,'%')

















                UNION















                SELECT    a.GJID_cd AS 'ControlID_cd',
                          a.GJDate_dt AS 'ControlDate_dt',
                          b.AccountID_cd,
                          b.Seq_no,
                          ROUND(b.DebitAmount_no,4) AS DebitAmount_no,
                          ROUND(b.CreditAmount_no,4) AS CreditAmount_no,
                          '6' AS Type_tx

                FROM tb_tgeneraljournalhdr a

                LEFT JOIN
                (SELECT   GJID_cd,
                          AccountID_cd,
                          Seq_no,
                          ROUND(DebitAmount_no,4) AS DebitAmount_no,
                          ROUND(CreditAmount_no,4) AS CreditAmount_no,
                          '6' AS Type_tx
                FROM tb_tgeneraljournaldtl) b
                ON a.GJID_cd = b.GJID_cd

                WHERE      YEAR(a.GJDate_dt) = mYear AND MONTH(a.GJDate_dt) <= mMonth AND Post_yn LIKE CONCAT('',mStatus,'%')) a


                GROUP BY a.AccountID_cd) b
                ON a.AccountID_cd = b.AccountID_cd


                LEFT JOIN
                (SELECT *
                FROM tb_mcoagroup)c
                ON a.GroupID_cd = c.GroupID_cd

                WHERE a.IncomeStatement_yn = '1' AND
                      a.IncomeStatementType_tx = mIncomeStatementType_tx

                GROUP BY a.IncomeStatementType_tx,
                         a.AccountID_cd,
                         a.AccountDesc_tx,
                         a.Debit_yn,
                         b.Debit,
                         b.Credit,
                         a.GroupID_cd

                ORDER BY a.IncomeStatementType_tx,
                         a.AccountID_cd;






END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `rp_IncomeStatement_Select__`
--

DROP PROCEDURE IF EXISTS `rp_IncomeStatement_Select__`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `rp_IncomeStatement_Select__`(IN mIncomeStatementType_tx VARCHAR(1), IN mYear_no INTEGER, IN mMonth INTEGER, IN mYear INTEGER, in mStatus varchar(1))
BEGIN


                SELECT a.AccountID_cd,
                       a.AccountDesc_tx,
                       CASE a.Debit_yn
                               WHEN '1' THEN SUM(IFNULL(b.Debit,0)) - SUM(IFNULL(b.Credit,0))
                               ELSE SUM(IFNULL(b.Credit,0)) - SUM(IFNULL(b.Debit,0)) END AS 'Amount_no'

                FROM tb_mcoahdr a

                LEFT JOIN
                (SELECT 1 AS 'Seq_no',
                        a.AccountID_cd,
                        CASE WHEN SUM(IFNULL(a.DebitAmount_no,0)) > SUM(IFNULL(a.CreditAmount_no,0))
                                THEN ROUND(SUM(IFNULL(a.DebitAmount_no,0)) - SUM(IFNULL(a.CreditAmount_no,0)),4)
                                ELSE 0 END AS 'Debit',
                        CASE WHEN SUM(IFNULL(a.CreditAmount_no,0)) > SUM(IFNULL(a.DebitAmount_no,0))
                                THEN ROUND(SUM(IFNULL(a.CreditAmount_no,0)) -SUM(IFNULL(a.DebitAmount_no,0)),4)
                                ELSE 0 END AS 'Credit'

                FROM
                (SELECT   a.CRID_cd AS 'ControlID_cd',
                          a.CRDate_dt AS 'ControlDate_dt',
                          b.AccountID_cd,
                          b.Seq_no,
                          ROUND(b.DebitAmount_no,4) AS DebitAmount_no,
                          ROUND(b.CreditAmount_no,4) AS CreditAmount_no,
                          '1' AS Type_tx

                FROM tb_tcashreceiptshdr a

                LEFT JOIN
                (SELECT   CRID_cd,
                          AccountID_cd,
                          Seq_no,
                          ROUND(DebitAmount_no,4) AS DebitAmount_no,
                          ROUND(CreditAmount_no,4) AS CreditAmount_no,
                          '1' AS Type_tx
                FROM tb_tcashreceiptsdtl) b
                ON a.CRID_cd = b.CRID_cd

                WHERE    YEAR(a.CRDate_dt) = mYear AND MONTH(a.CRDate_dt) <= mMonth AND Post_yn LIKE CONCAT('',mStatus,'%')












                UNION














                SELECT    a.PBID_cd AS 'ControlID_cd',
                          a.PBDate_dt AS 'ControlDate_dt',
                          b.AccountID_cd,
                          b.Seq_no,
                          ROUND(b.DebitAmount_no,4) AS DebitAmount_no,
                          ROUND(b.CreditAmount_no,4) AS CreditAmount_no,
                          '2' AS Type_tx

                FROM tb_tpurchaseshdr a

                LEFT JOIN
                (SELECT   PBID_cd,
                          AccountID_cd,
                          Seq_no,
                          ROUND(DebitAmount_no,4) AS DebitAmount_no,
                          ROUND(CreditAmount_no,4) AS CreditAmount_no,
                          '2' AS Type_tx
                FROM tb_tpurchasesdtl) b
                ON a.PBID_cd = b.PBID_cd

                WHERE    YEAR(a.PBDate_dt) = mYear AND MONTH(a.PBDate_dt) <= mMonth AND Post_yn LIKE CONCAT('',mStatus,'%') 







                UNION













                SELECT    a.CSID_cd AS 'ControlID_cd',
                          a.CSDate_dt AS 'ControlDate_dt',
                          b.AccountID_cd,
                          b.Seq_no,
                          ROUND(b.DebitAmount_no,4) AS DebitAmount_no,
                          ROUND(b.CreditAmount_no,4) AS CreditAmount_no,
                          '3' AS Type_tx

                FROM tb_tcashsaleshdr a

                LEFT JOIN
                (SELECT   CSID_cd,
                          AccountID_cd,
                          Seq_no,
                          ROUND(DebitAmount_no,4) AS DebitAmount_no,
                          ROUND(CreditAmount_no,4) AS CreditAmount_no,
                          '3' AS Type_tx
                FROM tb_tcashsalesdtl) b
                ON a.CSID_cd = b.CSID_cd

                WHERE    YEAR(a.CSDate_dt) = mYear AND MONTH(a.CSDate_dt) <= mMonth AND Post_yn LIKE CONCAT('',mStatus,'%') 










                UNION















                SELECT    a.BSID_cd AS 'ControlID_cd',
                          a.BSDate_dt AS 'ControlDate_dt',
                          b.AccountID_cd,
                          b.Seq_no,
                          ROUND(b.DebitAmount_no,4) AS DebitAmount_no,
                          ROUND(b.CreditAmount_no,4) AS CreditAmount_no,
                          '4' AS Type_tx

                FROM tb_tchargesaleshdr a

                LEFT JOIN
                (SELECT   BSID_cd,
                          AccountID_cd,
                          Seq_no,
                          ROUND(DebitAmount_no,4) AS DebitAmount_no,
                          ROUND(CreditAmount_no,4) AS CreditAmount_no,
                          '4' AS Type_tx
                FROM tb_tchargesalesdtl) b
                ON a.BSID_cd = b.BSID_cd

                 WHERE    YEAR(a.BSDate_dt) = mYear AND MONTH(a.BSDate_dt) <= mMonth AND Post_yn LIKE CONCAT('',mStatus,'%')







                UNION









                SELECT    a.CDID_cd AS 'ControlID_cd',
                          a.CDDate_dt AS 'ControlDate_dt',
                          b.AccountID_cd,
                          b.Seq_no,
                          ROUND(b.DebitAmount_no,4) AS DebitAmount_no,
                          ROUND(b.CreditAmount_no,4) AS CreditAmount_no,
                          '5' AS Type_tx

                FROM tb_tcheckdisbursementhdr a

                LEFT JOIN
                (SELECT   CDID_cd,
                          AccountID_cd,
                          Seq_no,
                          ROUND(DebitAmount_no,4) AS DebitAmount_no,
                          ROUND(CreditAmount_no,4) AS CreditAmount_no,
                          '5' AS Type_tx
                FROM tb_tcheckdisbursementdtl) b
                ON a.CDID_cd = b.CDID_cd

                WHERE    YEAR(a.CDDate_dt) = mYear AND MONTH(a.CDDate_dt) <= mMonth AND Post_yn LIKE CONCAT('',mStatus,'%') 

















                UNION















                SELECT    a.GJID_cd AS 'ControlID_cd',
                          a.GJDate_dt AS 'ControlDate_dt',
                          b.AccountID_cd,
                          b.Seq_no,
                          ROUND(b.DebitAmount_no,4) AS DebitAmount_no,
                          ROUND(b.CreditAmount_no,4) AS CreditAmount_no,
                          '6' AS Type_tx

                FROM tb_tgeneraljournalhdr a

                LEFT JOIN
                (SELECT   GJID_cd,
                          AccountID_cd,
                          Seq_no,
                          ROUND(DebitAmount_no,4) AS DebitAmount_no,
                          ROUND(CreditAmount_no,4) AS CreditAmount_no,
                          '6' AS Type_tx
                FROM tb_tgeneraljournaldtl) b
                ON a.GJID_cd = b.GJID_cd

                 WHERE    YEAR(a.GJDate_dt) = mYear AND MONTH(a.GJDate_dt) <= mMonth AND Post_yn LIKE CONCAT('',mStatus,'%') ) a


                GROUP BY a.AccountID_cd) b
                ON a.AccountID_cd = b.AccountID_cd


                LEFT JOIN
                (SELECT *
                FROM tb_mcoagroup)c
                ON a.GroupID_cd = c.GroupID_cd

                WHERE a.IncomeStatement_yn = '1' AND
                      a.IncomeStatementType_tx = mIncomeStatementType_tx

                GROUP BY a.IncomeStatementType_tx,
                         a.AccountID_cd,
                         a.AccountDesc_tx,
                         a.Debit_yn,
                         b.Debit,
                         b.Credit,
                         a.GroupID_cd

                ORDER BY a.IncomeStatementType_tx,
                         a.AccountID_cd;






END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `rp_TrialBalance_Select`
--

DROP PROCEDURE IF EXISTS `rp_TrialBalance_Select`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `rp_TrialBalance_Select`(IN mEployeeID_cd VARCHAR(15), IN mAccountID_cd VARCHAR(5), IN mJournal_tx VARCHAR(1), IN mStartDate_dt DATE, IN mEndDate_dt DATE, IN mStatus VARCHAR(1))
BEGIN
		declare mStatus_  varchar(1);
        set mStatus_ = CONCAT(mStatus,'%');

        SELECT  DISTINCT a.AccountID_cd,
		IFNULL(b.AccountDesc_tx,'') AS 'AccountDesc_tx',
		CASE WHEN SUM(IFNULL(a.DebitAmount_no,0)) > SUM(IFNULL(a.CreditAmount_no,0))
                     THEN ROUND(SUM(IFNULL(a.DebitAmount_no,0)) - SUM(IFNULL(a.CreditAmount_no,0)),4)
                     ELSE 0 END AS 'Debit',
                CASE WHEN SUM(IFNULL(a.CreditAmount_no,0)) > SUM(IFNULL(a.DebitAmount_no,0))
                     THEN ROUND(SUM(IFNULL(a.CreditAmount_no,0)) - SUM(IFNULL(a.DebitAmount_no,0)),4)
                     ELSE 0 END AS 'Credit',
		(SELECT COUNT(SubsidiaryID_cd) FROM tb_mcoadtl WHERE AccountID_cd = a.AccountID_cd) AS 'TotRec_no',
		SUM(a.Seq_no) AS TotReq,
		b.Debit_yn,
                b.GroupID_cd,
                c.GroupName_tx

        FROM
                (SELECT a.CRID_cd AS 'ControlID_cd',
		        a.CRDate_dt AS 'ControlDate_dt',
		        b.AccountID_cd,
		        b.Seq_no,
		        ROUND(b.DebitAmount_no,4) AS DebitAmount_no ,
		        ROUND(b.CreditAmount_no,4) AS CreditAmount_no,
		        '1' as 'Journal_tx'

                FROM tb_tcashreceiptshdr a

	        LEFT JOIN
	        tb_tcashreceiptsdtl as b
	        ON a.CRID_cd = b.CRID_cd

                WHERE   b.AccountID_cd = CASE mAccountID_cd
				                WHEN '' THEN b.AccountID_cd
				                ELSE mAccountID_cd END AND
                        ('1' = mJournal_tx OR mJournal_tx = '0') AND 
                        a.Post_yn like mStatus_ AND
                        a.CRDate_dt BETWEEN mStartDate_dt AND mEndDate_dt






                UNION







                SELECT  a.PBID_cd AS 'ControlID_cd',
		        a.PBDate_dt AS 'ControlDate_dt',
		        b.AccountID_cd,
		        b.Seq_no,
		        ROUND(b.DebitAmount_no,4) AS DebitAmount_no ,
		        ROUND(b.CreditAmount_no,4) AS CreditAmount_no,
		        '2' as 'Journal_tx'

                FROM tb_tpurchaseshdr a

	        LEFT JOIN
	        tb_tpurchasesdtl as b
	        ON a.PBID_cd = b.PBID_cd

                WHERE   b.AccountID_cd = CASE mAccountID_cd
				                WHEN '' THEN b.AccountID_cd
				                ELSE mAccountID_cd END AND
                        ('2' = mJournal_tx OR mJournal_tx = '0') AND 
                        a.Post_yn like mStatus_ AND
                        a.PBDate_dt BETWEEN mStartDate_dt AND mEndDate_dt





                UNION










                SELECT  a.CSID_cd AS 'ControlID_cd',
		        a.CSDate_dt AS 'ControlDate_dt',
		        b.AccountID_cd,
		        b.Seq_no,
		        ROUND(b.DebitAmount_no,4) AS DebitAmount_no ,
		        ROUND(b.CreditAmount_no,4) AS CreditAmount_no,
		        '3' as 'Journal_tx'

                FROM tb_tcashsaleshdr a

	        LEFT JOIN
	        tb_tcashsalesdtl as b
	        ON a.CSID_cd = b.CSID_cd

                WHERE   b.AccountID_cd = CASE mAccountID_cd
				                WHEN '' THEN b.AccountID_cd
				                ELSE mAccountID_cd END AND
                        ('3' = mJournal_tx OR mJournal_tx = '0') AND  
                        a.Post_yn like mStatus_ AND
                        a.CSDate_dt BETWEEN mStartDate_dt AND mEndDate_dt






                UNION






                SELECT  a.BSID_cd AS 'ControlID_cd',
		        a.BSDate_dt AS 'ControlDate_dt',
		        b.AccountID_cd,
		        b.Seq_no,
		        ROUND(b.DebitAmount_no,4) AS DebitAmount_no ,
		        ROUND(b.CreditAmount_no,4) AS CreditAmount_no,
		        '4' as 'Journal_tx'

                FROM tb_tchargesaleshdr a

	        LEFT JOIN
	        tb_tchargesalesdtl as b
	        ON a.BSID_cd = b.BSID_cd

                WHERE   b.AccountID_cd = CASE mAccountID_cd
                                                WHEN '' THEN b.AccountID_cd
				                ELSE mAccountID_cd END AND
                        ('4' = mJournal_tx OR mJournal_tx = '0') AND 
                        a.Post_yn like mStatus_ AND
                        a.BSDate_dt BETWEEN mStartDate_dt AND mEndDate_dt





                UNION






                SELECT  a.CDID_cd AS 'ControlID_cd',
		        a.CDDate_dt AS 'ControlDate_dt',
		        b.AccountID_cd,
		        b.Seq_no,
		        ROUND(b.DebitAmount_no,4) AS DebitAmount_no ,
		        ROUND(b.CreditAmount_no,4) AS CreditAmount_no,
		        '5' as 'Journal_tx'

                FROM tb_tcheckdisbursementhdr a

	        LEFT JOIN
	        tb_tcheckdisbursementdtl as b
	        ON a.CDID_cd = b.CDID_cd

                WHERE   b.AccountID_cd = CASE mAccountID_cd
				                WHEN '' THEN b.AccountID_cd
				                ELSE mAccountID_cd END AND
                        ('5' = mJournal_tx OR mJournal_tx = '0') AND 
                        a.Post_yn like mStatus_ AND
                        a.CDDate_dt BETWEEN mStartDate_dt AND mEndDate_dt








                UNION






                SELECT  a.GJID_cd AS 'ControlID_cd',
		        a.GJDate_dt AS 'ControlDate_dt',
		        b.AccountID_cd,
		        b.Seq_no,
		        ROUND(b.DebitAmount_no,4) AS DebitAmount_no ,
		        ROUND(b.CreditAmount_no,4) AS CreditAmount_no,
		        '6' as 'Journal_tx'

                FROM tb_tgeneraljournalhdr a

	        LEFT JOIN
	        tb_tgeneraljournaldtl as b
	        ON a.GJID_cd = b.GJID_cd

                WHERE   b.AccountID_cd = CASE mAccountID_cd
				                WHEN '' THEN b.AccountID_cd
				                ELSE mAccountID_cd END AND
                        ('6' = mJournal_tx OR mJournal_tx = '0') AND 
                        a.Post_yn like mStatus_ AND
                        a.GJDate_dt BETWEEN mStartDate_dt AND mEndDate_dt) a


        LEFT JOIN  
        tb_mcoahdr as b
        ON a.AccountID_cd = b.AccountID_cd

        LEFT JOIN
        tb_mcoagroup as c
        ON b.GroupID_cd = c.GroupID_cd


        WHERE a.AccountID_cd <> ''

        GROUP BY a.AccountID_cd,
	         b.AccountDesc_tx,
	         b.Debit_yn

        ORDER BY b.AccountID_cd;
    
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `spEmployeeAjaxSearch`
--

DROP PROCEDURE IF EXISTS `spEmployeeAjaxSearch`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `spEmployeeAjaxSearch`(IN empCode VARCHAR(15),
                                                        IN empFirstName VARCHAR(20))
BEGIN
     Select * from employeeinformation where EmpNumber like concat('%',empCode,'%') and EmpFirstName like concat('%',empFirstName,'%') and status=1;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `spEmployeeDelete`
--

DROP PROCEDURE IF EXISTS `spEmployeeDelete`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `spEmployeeDelete`(in mEmpNumber varchar(15))
BEGIN
update employeeinformation set Status = 5 where EmpNumber = mEmpNumber;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `spemployeedetailQuery`
--

DROP PROCEDURE IF EXISTS `spemployeedetailQuery`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `spemployeedetailQuery`(IN empNumber varchar(15))
BEGIN

set @MyNumber = empNumber;
set @sql = 'SELECT *  from employeeinformation_detail where EmpNumber = ?';

     PREPARE stmt FROM @sql;
     EXECUTE stmt USING @MyNumber;
     DEALLOCATE PREPARE stmt;

END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `spemployeequeryPhoto`
--

DROP PROCEDURE IF EXISTS `spemployeequeryPhoto`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `spemployeequeryPhoto`(IN empNumber varchar(50), imgDesc varchar(100))
BEGIN
     select * from employeeinformation_detail where EmpNumber = empNumber and imageDescription = imgDesc;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `spEmployeeSave`
--

DROP PROCEDURE IF EXISTS `spEmployeeSave`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `spEmployeeSave`(in mEmpNumber varchar(15),
                                                                in mFirstName varchar(20),
                                                                in mMiddleName varchar(20),
                                                                in mLastName varchar(20),
                                                                in mEmail varchar (20),
                                                                in mCPnum varchar (20),
                                                                in mMBnumber varchar (20),
                                                                in mGender varchar (20),
                                                                in mStatus varchar (20),
                                                                in mReligion varchar (20),
                                                                in mMonth varchar (20),
                                                                in mDay varchar (20),
                                                                in mYear varchar (20),
                                                                in mHeight varchar (20),
                                                                in mWeight varchar (20),
                                                                in mHomeAddress varchar (200),
                                                                in mCollege varchar (200),
                                                                in mYRC varchar (20),
                                                                in mHigh varchar (200),
                                                                in mYRH varchar (20),
                                                                in mELEM varchar (200),
                                                                in mYRE varchar (20))
BEGIN

insert into employeeinformation (EmpNumber,
                                EmpFirstName,
                                EmpMiddleName,
                                EmpLastName,
                                EmpEmail,
                                EmpCElpnumber,
                                EmpMobileNumber,
                                EmpGender,
                                EmpStatus,
                                EmpReligion,
                                EmpMonth,
                                EmpDay,
                                EmpYear,
                                EmpHeight,
                                EmpWeight,
                                EmpHomeAddress,
                                EmpCollege,
                                EmpCYAttended
                                ,EmpHigh,
                                EmpYRHattended,
                                EmpElem,
                                EmpELEYRattended,
                                EmpBirthDay)
                                value
                                (mEmpNumber,
                                mFirstName,
                                mMiddleName,
                                mLastName,
                                mEmail,
                                mCPnum,
                                mMBnumber,
                                mGender,
                                mStatus,
                                mReligion,
                                mMonth,
                                mDay,
                                mYear,
                                mHeight,
                                mWeight,
                                mHomeAddress,
                                mCollege,
                                mYRC,
                                mHigh,
                                mYRH,
                                mELEM,
                                mYRE,'1/1/2009') ;

END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `spemployeesavePhoto`
--

DROP PROCEDURE IF EXISTS `spemployeesavePhoto`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `spemployeesavePhoto`(IN empNumber varchar(50),
                                                                    IN imgDesc varchar(100),
                                                                    IN img longblob)
BEGIN
       insert into employeeinformation_detail (EmpNumber, imageDescription,image) values (empNumber,imgDesc,img);
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `spEmployeeSearch`
--

DROP PROCEDURE IF EXISTS `spEmployeeSearch`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `spEmployeeSearch`()
BEGIN
     select * from   employeeinformation where Status <> 5;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `spemployeeSearchAjax`
--

DROP PROCEDURE IF EXISTS `spemployeeSearchAjax`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `spemployeeSearchAjax`(IN fname VARCHAR(20),
                                                                    IN lname VARCHAR(20))
BEGIN

    SET @fname := CONCAT('%',(fname),'%');

    SET @lname := CONCAT('%',(lname),'%');

    SELECT EmpNumber,EmpFirstName,EmpLastName FROM employeeinformation  WHERE EmpFirstName LIKE @fname and EmpLastName like @lname and Status='1';


END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `spEmployeeSelect`
--

DROP PROCEDURE IF EXISTS `spEmployeeSelect`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `spEmployeeSelect`(in mEmpNumber varchar(15))
BEGIN
 select * from employeeinformation where EmpNumber = mEmpNumber;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `spEmpMenuUsersSelect`
--

DROP PROCEDURE IF EXISTS `spEmpMenuUsersSelect`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `spEmpMenuUsersSelect`(in mEmpNumber varchar(15))
BEGIN
  select emp.EmpNumber, emp.EmpFirstName,emp.EmpLastName from usersprofile as usr, employeeinformation as emp  
  WHERE usr.EmpNumber = mEmpNumber and usr.EmpNumber = emp.EmpNumber;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `spEmpUserFilter`
--

DROP PROCEDURE IF EXISTS `spEmpUserFilter`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `spEmpUserFilter`()
BEGIN
      SELECT * FROM employeeinformation where Status <> 5 and EmpNumber not in (select EmpNumber from usersprofile);
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `spEmpUserSaving`
--

DROP PROCEDURE IF EXISTS `spEmpUserSaving`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `spEmpUserSaving`(in mEmpNumber varchar(15), in mUserName varchar(20), IN mPassword varchar(20))
BEGIN


insert into usersprofile (EmpNumber,EmpUserName,EmpPassword)
value (mEmpNumber,trim(mUserName),trim(mPassword)) ;

END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `spEmpUsersSearch`
--

DROP PROCEDURE IF EXISTS `spEmpUsersSearch`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `spEmpUsersSearch`()
BEGIN
  select emp.EmpNumber, emp.EmpFirstName,emp.EmpLastName from usersprofile as usr, employeeinformation as emp  
      WHERE usr.EmpNumber = emp.EmpNumber and emp.Status <>5;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `spEmpUsersSelect`
--

DROP PROCEDURE IF EXISTS `spEmpUsersSelect`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `spEmpUsersSelect`(in mEmpNumber varchar(15))
BEGIN
 select * from employeeinformation where EmpNumber = mEmpNumber;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `spEmpUserUpdate`
--

DROP PROCEDURE IF EXISTS `spEmpUserUpdate`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `spEmpUserUpdate`(in mEmpNumber varchar(15), in mUserName varchar(20), IN mPassword varchar(20))
BEGIN


update usersprofile SET EmpUserName=trim(mUserName) ,EmpPassword = trim(mPassword) where EmpNumber = mEmpNumber;

END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `spFoo`
--

DROP PROCEDURE IF EXISTS `spFoo`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `spFoo`()
BEGIN
SELECT 'Foo' FROM DUAL;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `spmainmenuQuery`
--

DROP PROCEDURE IF EXISTS `spmainmenuQuery`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `spmainmenuQuery`(in menu_Name VARCHAR(100))
BEGIN

set @MyName = menu_Name;
set @sql = 'SELECT *  from mainmenu where MenuName = ?';

     PREPARE stmt FROM @sql;
     EXECUTE stmt USING @MyName;
     DEALLOCATE PREPARE stmt;

END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `spmainmenuQuery1`
--

DROP PROCEDURE IF EXISTS `spmainmenuQuery1`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `spmainmenuQuery1`(in menu_Code VARCHAR(100))
BEGIN

set @MyCode = menu_Code;
set @sql = 'SELECT *  from mainmenu where MenuCode = ?';

     PREPARE stmt FROM @sql;
     EXECUTE stmt USING @MyCode;
     DEALLOCATE PREPARE stmt;

END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `spMainMenuSaving`
--

DROP PROCEDURE IF EXISTS `spMainMenuSaving`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `spMainMenuSaving`(IN mMenuCode VARCHAR(50), IN mMenuName VARCHAR(100), IN mMenuOrder INTEGER(11), IN Author VARCHAR(15),Stamp datetime)
BEGIN

	 insert into mainmenu (MenuCode,
                                 MenuName,
                                 MenuOrder,
                                 Author,
                                 Stamp)
                                 values
                                 (mMenuCode,
                                 mMenuName,
                                 mMenuOrder,
                                 Author,
                                 now());
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `spMainMenuSearch`
--

DROP PROCEDURE IF EXISTS `spMainMenuSearch`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `spMainMenuSearch`(in mMenuCode varchar(50), in mMenuName varchar(100))
BEGIN
 
   select * from mainmenu where menucode like  concat(mMenucode,'%') and
                                menuname like concat(mMenuName,'%');

END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `spMainMenuSearchAjax`
--

DROP PROCEDURE IF EXISTS `spMainMenuSearchAjax`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `spMainMenuSearchAjax`(IN menuCode VARCHAR(20),
                                                                    IN menuName VARCHAR(100))
BEGIN

    SET @menuCode := CONCAT('%',(menuCode),'%');

    SET @menuName := CONCAT('%',(menuName),'%');

   SELECT * FROM mainmenu where MenuCode like @menuCode and MenuName like @menuName;


END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `spmainmenuSearchCode`
--

DROP PROCEDURE IF EXISTS `spmainmenuSearchCode`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `spmainmenuSearchCode`(IN menuCode varchar(40))
BEGIN
   SELECT * from mainmenu where MenuCode like concat('%',menuCode,'%');
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `spmainmenuSearchName`
--

DROP PROCEDURE IF EXISTS `spmainmenuSearchName`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `spmainmenuSearchName`(IN menuName varchar(40))
BEGIN
   SELECT * from mainmenu where MenuName like concat('%',menuName,'%');
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `spmainmenuSelect`
--

DROP PROCEDURE IF EXISTS `spmainmenuSelect`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `spmainmenuSelect`()
BEGIN
       select * from mainmenu;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `spmainmenuUpdate`
--

DROP PROCEDURE IF EXISTS `spmainmenuUpdate`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `spmainmenuUpdate`(IN Menu_Code varchar(10),

                                        IN Menu_Name VARCHAR(100),
                                        IN Author varchar(50),
                                        IN Stamp Datetime)
BEGIN

          UPDATE mainmenu

          SET MenuCode =Menu_Code,
          MenuName = Menu_Name,
          Author=Author,
          Stamp=now()


          where MenuCode = Menu_Code;

END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `spMenuAccess`
--

DROP PROCEDURE IF EXISTS `spMenuAccess`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `spMenuAccess`(in mEmpNumber varchar(15))
BEGIN
 
  
select distinct a.MenuCode, b.MenuName from mainmenuaccess as a, mainmenu as b 
where a.EmpNumber = mEmpNumber and a.MenuCode=b.MenuCode order by b.MenuOrder;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `spMenus`
--

DROP PROCEDURE IF EXISTS `spMenus`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `spMenus`()
BEGIN
 select m.Menucode,m.MenuName,s.SubMenu,s.SubMenuName from mainmenu as m, submenu as s
 where m.MenuCode = s.MenuCode order by m.MenuOrder;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `spSearchMenuLocation`
--

DROP PROCEDURE IF EXISTS `spSearchMenuLocation`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `spSearchMenuLocation`(IN mSubMenu varchar(20))
BEGIN
 select main.MenuName, sub.SubMenuName from submenu as sub ,mainmenu as main WHERE
 sub.SubMenu = mSubMenu and sub.MenuCode = main.MenuCode;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `spSigningIn`
--

DROP PROCEDURE IF EXISTS `spSigningIn`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `spSigningIn`(in mUserName varchar(20), IN mUserPassword varchar(20))
BEGIN
 Select CONCAT(empinfo.EmpFirstName,' ',empinfo.EmpLastName) as EmployeeName, users.EmpNumber,users.EmpUserName,users.EmpPassword  from usersprofile as users left join employeeinformation as empinfo 
 on users.EmpNumber = empinfo.EmpNumber
 where BINARY users.EmpUserName = mUserName and BINARY users.EmpPassword = mUserPassword;

END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `spSubMenuAccess`
--

DROP PROCEDURE IF EXISTS `spSubMenuAccess`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `spSubMenuAccess`(IN mEmpNumber VARCHAR(15), IN mMenuCode VARCHAR(40))
BEGIN


  

  select submnu.SubMenu,submnu.SubMenuName, submnu.Pages, subaccess.EmpNumber,subaccess.MenuCode,subaccess.SubMenuCode from submenuaccess  as subaccess
  left join submenu as submnu on submnu.SubMenu = subaccess.SubMenuCode
  where subaccess.EmpNumber = mEmpNumber
  and subaccess.MenuCode = mMenuCode order by submnu.SubMenuOrder;  
 
 
 
  


END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `spsubmenuDelete`
--

DROP PROCEDURE IF EXISTS `spsubmenuDelete`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `spsubmenuDelete`(in subMenu_Code varchar(10))
BEGIN

set @MyCode= subMenu_Code;
set @sql = 'DELETE from submenu where SubMenu = ? ';

     PREPARE stmt FROM @sql;
     EXECUTE stmt USING @MyCode;
     DEALLOCATE PREPARE stmt;

END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `spsubmenuQuery`
--

DROP PROCEDURE IF EXISTS `spsubmenuQuery`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `spsubmenuQuery`(in submenu_Name VARCHAR(100))
BEGIN

set @MyName = submenu_Name;
set @sql = 'SELECT *  from submenu where SubMenuName = ?';

     PREPARE stmt FROM @sql;
     EXECUTE stmt USING @MyName;
     DEALLOCATE PREPARE stmt;

END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `spsubmenuQuery1`
--

DROP PROCEDURE IF EXISTS `spsubmenuQuery1`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `spsubmenuQuery1`(in submenu_Code VARCHAR(100))
BEGIN

set @MyCode = submenu_Code;
set @sql = 'SELECT *  from submenu where SubMenu = ?';

     PREPARE stmt FROM @sql;
     EXECUTE stmt USING @MyCOde;
     DEALLOCATE PREPARE stmt;

END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `spsubmenuSaving`
--

DROP PROCEDURE IF EXISTS `spsubmenuSaving`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `spsubmenuSaving`(IN mMenuCode varchar(100),
                                                 In mSubMenuCode varchar(100),
                                                 IN mSubMenuName varchar(100),
                                                 IN mSubMenuPage varchar(100),
                                                 IN SubOrder int(11)
                                                 )
BEGIN
        insert into submenu (MenuCode,
                            SubMenu,
                            SubMenuName,
                            Pages,
                            SubMenuOrder)
                            values
                            (
                            mMenuCode,
                            mSubMenuCode,
                            mSubMenuName,
                            mSubMenuPage,
                            SubOrder

                            ) ;


END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `spSubMenuSearch`
--

DROP PROCEDURE IF EXISTS `spSubMenuSearch`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `spSubMenuSearch`(iN mMenuCode varchar(20))
BEGIN
 select * from submenu where MenuCode= mMenuCode;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `spsubmenuSearchAjax`
--

DROP PROCEDURE IF EXISTS `spsubmenuSearchAjax`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `spsubmenuSearchAjax`(IN subCode VARCHAR(20),
                                                                    IN subName VARCHAR(100))
BEGIN

    SET @subCode := CONCAT('%',(subCode),'%');

    SET @subName := CONCAT('%',(subName),'%');

    SELECT * FROM submenu WHERE Submenu LIKE @subCode and SubMenuName like @subName;


END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `spsubmenuSelect`
--

DROP PROCEDURE IF EXISTS `spsubmenuSelect`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `spsubmenuSelect`()
BEGIN
    SELECT * FROM submenu;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `spsubmenuUpdate`
--

DROP PROCEDURE IF EXISTS `spsubmenuUpdate`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `spsubmenuUpdate`()
BEGIN
  
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `spSubMenuUsersSearch`
--

DROP PROCEDURE IF EXISTS `spSubMenuUsersSearch`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `spSubMenuUsersSearch`(in mEmpNumber vaRCHAR(15))
BEGIN
  select emp.EmpNumber, emp.EmpFirstName,emp.EmpLastName,smenu.SubMenu,smenu.SubMenuName
  from usersprofile as usr, employeeinformation as emp, mainmenuaccess as menuaccess, submenu as smenu
  WHERE usr.EmpNumber = mEmpNumber and usr.EmpNumber = emp.EmpNumber and menuaccess.MenuCode = smenu.MenuCode
  and menuaccess.EmpNumber = mEmpNumber;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `spsupplierDelete`
--

DROP PROCEDURE IF EXISTS `spsupplierDelete`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `spsupplierDelete`(in Supplier_Code varchar(20))
BEGIN

set @MyGroup = Supplier_Code;
set @sql = 'DELETE from suppliers_record  where SupplierCode = ?';

     PREPARE stmt FROM @sql;
     EXECUTE stmt USING @MyGroup;
     DEALLOCATE PREPARE stmt;

END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `spsupplierQuery`
--

DROP PROCEDURE IF EXISTS `spsupplierQuery`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `spsupplierQuery`(in sCode VARCHAR(20))
BEGIN

set @MyCode = sCode;
set @sql = 'SELECT *  from suppliers_record where SupplierCode = ?';

     PREPARE stmt FROM @sql;
     EXECUTE stmt USING @MyCode;
     DEALLOCATE PREPARE stmt;

END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `spsupplierSaving`
--

DROP PROCEDURE IF EXISTS `spsupplierSaving`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `spsupplierSaving`(
IN sCode VARCHAR(10),
IN sName VARCHAR(40),
IN sAdd VARCHAR(100),
IN sContact VARCHAR(100),
IN sPhone VARCHAR(100),
IN sMobile VARCHAR(100),
IN sEmail VARCHAR(100),
IN sFax VARCHAR(100),
IN sAuthor VARCHAR(100),
IN sStamp datetime
 )
BEGIN

insert into suppliers_record (SupplierCode,
                             SupplierName,
                             SupplierAddress,
                             ContactPerson,
                             SupplierPhone,
                             SupplierMobile,
                             SupplierEmail,
                             SupplierFax,
                             Author,
                             Stamp

                             ) value

                             (sCode,
                             sName,
                             sAdd,
                             sContact,
                             sPhone,
                             sMobile,
                             sEmail,
                             sFax,
                             sAuthor,
                             now()

                             );


END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `spsuppliersDelete`
--

DROP PROCEDURE IF EXISTS `spsuppliersDelete`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `spsuppliersDelete`()
BEGIN
  
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `spsupplierSelect`
--

DROP PROCEDURE IF EXISTS `spsupplierSelect`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `spsupplierSelect`()
BEGIN
        select * from suppliers_record;

END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `spsupplierUpdate`
--

DROP PROCEDURE IF EXISTS `spsupplierUpdate`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `spsupplierUpdate`(
IN sCode VARCHAR(10),
IN sName VARCHAR(40),
IN sAdd VARCHAR(100),
IN sContact VARCHAR(100),
IN sPhone VARCHAR(100),
IN sMobile VARCHAR(100),
IN sEmail VARCHAR(100),
IN sFax VARCHAR(100),
IN sAuthor VARCHAR(100),
IN sStamp datetime
 )
BEGIN

Update suppliers_record Set SupplierCode=sCode,
                             SupplierName=sName,
                             SupplierAddress=sAdd,
                             ContactPerson=sContact,
                             SupplierPhone=sPhone,
                             SupplierMobile=sMobile,
                             SupplierEmail=sEmail,
                             SupplierFax=sFax,
                             Author=sAuthor,
                             Stamp=   now()
                             where SupplierCode=sCode;


END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `spUserCommandSaving`
--

DROP PROCEDURE IF EXISTS `spUserCommandSaving`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `spUserCommandSaving`(in mEmpNumber varchar(15), in mValues longtext)
BEGIN
declare mSql longtext;

     delete from commandaccess where EmpNumber = mEmpNumber;

           set mSql = concat('insert into commandaccess (EmpNumber,MenuCode,SubMenuCode, CmdName) values ', mValues);

     SET @sql = mSql;
     PREPARE stmt FROM @sql;
     EXECUTE stmt;
     DEALLOCATE PREPARE stmt;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `spUserCommandSearch`
--

DROP PROCEDURE IF EXISTS `spUserCommandSearch`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `spUserCommandSearch`(in mEmpNumber varchar(15))
BEGIN

select a.SubMenuCode,a.EmpNumber,a.MenuCode,a.MenuOrder,a.SubMenuOrder, a.CmdName, a.CmdOrder, (select CmdName from commandaccess where EmpNumber = mEmpnumber and MenuCode = a.MenuCode and SubMenuCode= a.SubMenuCode and CmdName = a.CmdName)as active from
(select distinct subaccess.SubMenuCode,emp.EmpNumber, mainaccess.MenuCode, main.MenuOrder,sub.SubMenuOrder, cmd.CmdName,cmd.CmdOrder  from usersprofile as emp
left join mainmenuaccess as mainaccess on mainaccess.EmpNumber = emp.EmpNumber
left join submenuaccess as subaccess  on subaccess.MenuCode = mainaccess.MenuCode
left join mainmenu as main on main.MenuCode = mainaccess.MenuCode
left join submenu as sub on sub.SubMenu = subaccess.SubMenuCode
left join commands as cmd on cmd.SubMenu = sub.SubMenu
where emp.EmpNumber = mEmpNumber and mainaccess.EmpNumber = mEmpNumber and subaccess.EmpNumber = mEmpNumber order by main.MenuOrder, sub.SubMenuOrder
) as a order by a.MenuOrder, a.SubMenuOrder, a.CmdOrder;

END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `spUserMainModuleSaving`
--

DROP PROCEDURE IF EXISTS `spUserMainModuleSaving`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `spUserMainModuleSaving`(IN mEmpNumber VARCHAR(15), IN mValues LONGTEXT)
BEGIN
	 declare mSql longtext;

     delete from mainmenuaccess where EmpNumber = mEmpNumber;
     set mSql = concat('insert into mainmenuaccess (EmpNumber,MenuCode) values ', mValues);
     SET @sql = mSql;
     PREPARE stmt FROM @sql;
     EXECUTE stmt;
     DEALLOCATE PREPARE stmt;

     delete from submenuaccess where EmpNumber = mEmpNumber and MenuCode not in(select MenuCode from mainmenuaccess where EmpNumber = mEmpNumber);  
     
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `spUserMainModuleSearch`
--

DROP PROCEDURE IF EXISTS `spUserMainModuleSearch`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `spUserMainModuleSearch`(in mEmpNumber varchar(20))
BEGIN
   
 
 select MenuCode, MenuName, (select Menucode from mainmenuaccess where MenuCode = menu.MenuCode and EmpNumber = mEmpNumber) as active from mainmenu as menu 
 ;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `spUsersDelete`
--

DROP PROCEDURE IF EXISTS `spUsersDelete`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `spUsersDelete`(in mEmpNumber varchar(15))
BEGIN
 delete from usersprofile where EmpNumber = mEmpNumber;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `spuserSearchFirstName`
--

DROP PROCEDURE IF EXISTS `spuserSearchFirstName`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `spuserSearchFirstName`(IN fname varchar(20))
BEGIN
      SELECT EmpFirstName from employeeinformation where EmpFirstName like concat('%',fname,'%')and Status='1' ;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `spuserSearchLastName`
--

DROP PROCEDURE IF EXISTS `spuserSearchLastName`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `spuserSearchLastName`(IN lname varchar(20))
BEGIN
      SELECT EmpLastName from employeeinformation where EmpLastName like concat('%',lname,'%')and Status='1' ;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `spUsersEditSearch`
--

DROP PROCEDURE IF EXISTS `spUsersEditSearch`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `spUsersEditSearch`()
BEGIN
  select emp.EmpNumber, emp.EmpFirstName,emp.EmpLastName from usersprofile as usr, employeeinformation as emp  
      WHERE usr.EmpNumber = emp.EmpNumber;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `spusersQuery`
--

DROP PROCEDURE IF EXISTS `spusersQuery`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `spusersQuery`(in myId VARCHAR(15))
BEGIN
  Select * from usersprofile where EmpNumber=myId;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `spUsersSearch`
--

DROP PROCEDURE IF EXISTS `spUsersSearch`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `spUsersSearch`()
BEGIN
  select emp.EmpNumber, emp.EmpFirstName,emp.EmpLastName from usersprofile as usr, employeeinformation as emp  
      WHERE usr.EmpNumber = emp.EmpNumber and emp.Status <> 5;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `spUsersSearch_`
--

DROP PROCEDURE IF EXISTS `spUsersSearch_`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `spUsersSearch_`(in mEmpNumber varchar(15))
BEGIN
  select emp.EmpNumber, emp.EmpFirstName,emp.EmpLastName from usersprofile as usr, employeeinformation as emp  
  WHERE usr.EmpNumber = mEmpNumber and usr.EmpNumber = emp.EmpNumber;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `spUserSubMenuSaving`
--

DROP PROCEDURE IF EXISTS `spUserSubMenuSaving`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `spUserSubMenuSaving`(in mEmpNumber varchar(15), in mValues longtext)
BEGIN
declare mSql longtext;

     delete from submenuaccess where EmpNumber = mEmpNumber;

	 set mSql = concat('insert into submenuaccess (EmpNumber,MenuCode,SubMenuCode) values ', mValues); 
     SET @sql = mSql;
     PREPARE stmt FROM @sql;
     EXECUTE stmt;
     DEALLOCATE PREPARE stmt;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `spUserSubMenuSearch`
--

DROP PROCEDURE IF EXISTS `spUserSubMenuSearch`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `spUserSubMenuSearch`(IN mEmpNumber VARCHAR(20), IN mMenuCode varchar(40), IN mQuery VARCHAR(1))
BEGIN
    if mQuery = 1 then
 	   Select * from mainmenuaccess as menuaccess where menuaccess.EmpNumber = mEmpNumber;
    end if;
    if mQuery = 2 then

        
 
        
        
        
        select smenu.SubMenu, smenu.SubMenuName, (select SubMenuCode from submenuaccess where SubMenuCode = smenu.SubMenu and EmpNumber = mEmpNumber) as active 
        from submenu as smenu where smenu.MenuCode = mMenuCode; 
        
        
	end if;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `spuserUpdatePassword`
--

DROP PROCEDURE IF EXISTS `spuserUpdatePassword`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `spuserUpdatePassword`(IN myId varchar(20),
                                                      IN newUserName varchar(20),
                                                      IN newPassword varchar(20))
BEGIN
     UPDATE usersprofile SET EmpUserName=newUserName, EmpPassword=newPassword WHERE EmpNumber=myId;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_CashReceiptsDTL_Insert`
--

DROP PROCEDURE IF EXISTS `sp_CashReceiptsDTL_Insert`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_CashReceiptsDTL_Insert`(IN mCRID_cd VARCHAR(15),
                                                                        IN mSeq_no INTEGER,
                                                                        IN mAccountID_cd VARCHAR(5),
                                                                        IN mSubsidiaryID_cd VARCHAR(20),
                                                                        IN mDebitAmount_no DOUBLE,
                                                                        IN mCreditAmount_no DOUBLE)
BEGIN
     INSERT INTO tb_tcashreceiptsdtl(CRID_cd,
            		         Seq_no,
	    		         AccountID_cd,
	    		         SubsidiaryID_cd,
	    		         DebitAmount_no,
	    		         CreditAmount_no)
		  	    VALUES(mCRID_cd,
	            		 mSeq_no,
		    		 mAccountID_cd,
		    		 mSubsidiaryID_cd,
		    		 mDebitAmount_no,
		    		 mCreditAmount_no);
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_CashReceiptsHDR_Insert`
--

DROP PROCEDURE IF EXISTS `sp_CashReceiptsHDR_Insert`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_CashReceiptsHDR_Insert`(IN mEmployeeID_cd VARCHAR(15), IN mCRID_cd VARCHAR(15), IN mCRDate_dt DATE, IN mReferenceID_cd VARCHAR(15), IN mAmount_no DOUBLE, IN mParticular_tx VARCHAR(255), IN mBaseline LONGTEXT)
BEGIN
      INSERT INTO tb_tcashreceiptshdr(CRID_cd,
				     CRDate_dt,
                                     ReferenceID_cd,
                                     Amount_no,
                                     Particular_tx,
                                     Post_yn,
                                     Baseline)
			      VALUES(mCRID_cd,
				     mCRDate_dt,
                                     mReferenceID_cd,
                                     mAmount_no,
                                     mParticular_tx,
                                     '0',
                                     mBaseline);
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_CashReceiptsHDR_Update`
--

DROP PROCEDURE IF EXISTS `sp_CashReceiptsHDR_Update`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_CashReceiptsHDR_Update`(IN mEmployeeID_cd VARCHAR(15), IN mCRID_cd VARCHAR(15), IN mCRID_cd_ VARCHAR(15), IN mCRDate_dt DATE, IN mReferenceID_cd VARCHAR(15), IN mAmount_no DOUBLE, IN mStatus VARCHAR(1), IN mParticular_tx VARCHAR(255), IN mBaseline LONGTEXT)
BEGIN
     DELETE FROM tb_tcashreceiptshdr
     WHERE CRID_cd = mCRID_cd_;
     INSERT INTO tb_tcashreceiptshdr(CRID_cd,
				     CRDate_dt,
                                     ReferenceID_cd,
                                     Amount_no,
                                     Particular_tx,
                                     Post_yn,
                                     Baseline)
			      VALUES(mCRID_cd,
				     mCRDate_dt,
                                     mReferenceID_cd,
                                     mAmount_no,
                                     mParticular_tx,
                                     mStatus,
                                     mBaseline);
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_CashReceiptsHDR_Update_`
--

DROP PROCEDURE IF EXISTS `sp_CashReceiptsHDR_Update_`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_CashReceiptsHDR_Update_`(IN mCRID_cd VARCHAR(15))
BEGIN
declare mAmount double;
set @mAmount =(select sum(DebitAmount_no) as amt from tb_tcashreceiptsdtl where CRID_cd = mCRID_cd);
update tb_tcashreceiptshdr set Amount_no = @mAmount where CRID_cd = mCRID_cd;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_CashReceipts_Delete`
--

DROP PROCEDURE IF EXISTS `sp_CashReceipts_Delete`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_CashReceipts_Delete`(IN mEmployeeID_cd VARCHAR(15), IN mCRID_cd VARCHAR(15), IN mParticular_tx VARCHAR(5000))
BEGIN
     DELETE FROM tb_tcashreceiptshdr
     WHERE CRID_cd = mCRID_cd;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_CashReceipts_RecSelect`
--

DROP PROCEDURE IF EXISTS `sp_CashReceipts_RecSelect`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_CashReceipts_RecSelect`(IN mCRID_cd VARCHAR(15))
BEGIN
        SELECT a.CRID_cd,
               a.CRDate_dt,
               a.ReferenceID_cd,
               a.Amount_no,
               a.Particular_tx,
               b.Seq_no,
               CASE LENGTH(IFNULL(b.SubsidiaryID_cd,''))
                       WHEN 0 THEN b.AccountID_cd
                       WHEN 7 THEN b.SubsidiaryID_cd
                       ELSE b.AccountID_cd END AS AccountID_cd,
               c.AccountDesc_tx,
               CASE IFNULL(b.SubsidiaryID_cd,'')
                       WHEN '' THEN ''
                       ELSE b.SubsidiaryID_cd END AS SubsidiaryID_cd,
               IFNULL(d.SubsidiaryDesc_tx,'') AS SubsidiaryDesc_tx,
               IFNULL(b.DebitAmount_no,0) As DebitAmount_no,
               IFNULL(b.CreditAmount_no,0) AS CreditAmount_no
        FROM tb_tcashreceiptshdr a
        LEFT JOIN
        (SELECT *
        FROM tb_tcashreceiptsdtl) b
        ON a.CRID_cd = b.CRID_cd
        LEFT JOIN
        (SELECT *
        FROM tb_mcoahdr) c
        ON b.AccountID_cd = c.AccountID_cd
        LEFT JOIN
        (SELECT *
        FROM tb_mcoadtl) d
        ON b.SubsidiaryID_cd = d.SubsidiaryID_cd
        WHERE a.CRID_cd = mCRID_cd
        ORDER BY a.CRDate_dt DESC,
	         a.CRID_cd DESC,
	         b.Seq_no ASC;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_CashReceipts_Search`
--

DROP PROCEDURE IF EXISTS `sp_CashReceipts_Search`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_CashReceipts_Search`(IN mCRID_cd VARCHAR(15),
                                                                     IN mReferenceID_cd VARCHAR(15),
                                                                     IN mStartDate_dt DATE,
                                                                     IN mEndDate_dt DATE,
                                                                     IN mPost_yn VARCHAR(1),
                                                                     IN mLimit VARCHAR(20))
BEGIN
        SET @mSql =
        CONCAT('SELECT DISTINCT a.CRID_cd,
                                a.CRDate_dt,
                                a.ReferenceID_cd,
                                a.Particular_tx,
                                a.Amount_no,
                                a.baseline,
                                a.Post_yn,
                                CASE a.Post_yn
                                        WHEN ''0'' THEN '' ''
                                        WHEN ''1'' THEN ''P''
                                        WHEN ''2'' THEN ''C'' END AS PostDesc_tx


                FROM tb_tcashreceiptshdr a

                WHERE   a.CRID_cd LIKE CONCAT(''',mCRID_cd,'%'') AND
                        a.ReferenceID_cd LIKE CONCAT(''',mReferenceID_cd,'%'') AND
                        a.CRDate_dt BETWEEN ''',mStartDate_dt,''' AND ''',mEndDate_dt,''' AND
                        a.Post_yn LIKE CONCAT(''',mPost_yn,'%'')

                ORDER BY a.CRID_cd ASC

                LIMIT ', mLimit);
                
        PREPARE stmtl FROM @mSql;
        EXECUTE stmtl;
        DEALLOCATE PREPARE stmtl;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_CashReceipts_Select`
--

DROP PROCEDURE IF EXISTS `sp_CashReceipts_Select`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_CashReceipts_Select`()
BEGIN
     SELECT *
     FROM tb_tcashreceiptshdr a
     ORDER BY CRID_cd ASC;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_CashReceipts_Verify`
--

DROP PROCEDURE IF EXISTS `sp_CashReceipts_Verify`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_CashReceipts_Verify`(IN mCRID_cd VARCHAR(15),
                                                                     IN mCRID_cd_ VARCHAR(15))
BEGIN
     SELECT *
     FROM tb_tcashreceiptshdr a
     WHERE a.CRID_cd <> mCRID_cd AND
           a.CRID_cd = mCRID_cd_;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_CashSalesDTL_Insert`
--

DROP PROCEDURE IF EXISTS `sp_CashSalesDTL_Insert`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_CashSalesDTL_Insert`(IN mCSID_cd VARCHAR(15),
                                                                        IN mSeq_no INTEGER,
                                                                        IN mAccountID_cd VARCHAR(5),
                                                                        IN mSubsidiaryID_cd VARCHAR(20),
                                                                        IN mDebitAmount_no DOUBLE,
                                                                        IN mCreditAmount_no DOUBLE)
BEGIN
     INSERT INTO tb_tcashsalesdtl(CSID_cd,
            		         Seq_no,
	    		         AccountID_cd,
	    		         SubsidiaryID_cd,
	    		         DebitAmount_no,
	    		         CreditAmount_no)
		  	    VALUES(mCSID_cd,
	            		 mSeq_no,
		    		 mAccountID_cd,
		    		 mSubsidiaryID_cd,
		    		 mDebitAmount_no,
		    		 mCreditAmount_no);
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_CashSalesHDR_Insert`
--

DROP PROCEDURE IF EXISTS `sp_CashSalesHDR_Insert`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_CashSalesHDR_Insert`(IN mEmployeeID_cd VARCHAR(15), IN mCSID_cd VARCHAR(15), IN mCSDate_dt DATE, IN mReferenceID_cd VARCHAR(15), IN mAmount_no DOUBLE, IN mParticular_tx VARCHAR(255), IN mBaseline LONGTEXT)
BEGIN
     INSERT INTO tb_tcashsaleshdr(CSID_cd,
				     CSDate_dt,
                                     ReferenceID_cd,
                                     Amount_no,
                                     Particular_tx,
                                     Post_yn,
                                     Baseline)
			      VALUES(mCSID_cd,
				     mCSDate_dt,
                                     mReferenceID_cd,
                                     mAmount_no,
                                     mParticular_tx,
                                     '0',
                                     mBaseline);
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_CashSalesHDR_Update`
--

DROP PROCEDURE IF EXISTS `sp_CashSalesHDR_Update`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_CashSalesHDR_Update`(IN mEmployeeID_cd VARCHAR(15), IN mCSID_cd VARCHAR(15), IN mCSID_cd_ VARCHAR(15), IN mCSDate_dt DATE, IN mReferenceID_cd VARCHAR(15), IN mAmount_no DOUBLE, IN mStatus VARCHAR(1), IN mParticular_tx VARCHAR(255), IN mBaseline LONGTEXT)
BEGIN
     DELETE FROM tb_tcashsaleshdr
     WHERE CSID_cd = mCSID_cd_;
     INSERT INTO tb_tcashsaleshdr(CSID_cd,
				     CSDate_dt,
                                     ReferenceID_cd,
                                     Amount_no,
                                     Particular_tx,
                                     Post_yn,
                                     Baseline)
			      VALUES(mCSID_cd,
				     mCSDate_dt,
                                     mReferenceID_cd,
                                     mAmount_no,
                                     mParticular_tx,
                                     mStatus,
                                     mBaseline);
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_CashSalesHDR_Update_`
--

DROP PROCEDURE IF EXISTS `sp_CashSalesHDR_Update_`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_CashSalesHDR_Update_`(IN mCSID_cd VARCHAR(15))
BEGIN
declare mAmount double;
set @mAmount =(select sum(DebitAmount_no) as amt from tb_tcashsalesdtl where CSID_cd = mCSID_cd);
update tb_tcashsaleshdr set Amount_no = @mAmount where CSID_cd = mCSID_cd;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_CashSales_Delete`
--

DROP PROCEDURE IF EXISTS `sp_CashSales_Delete`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_CashSales_Delete`(IN mEmployeeID_cd VARCHAR(15), IN mCSID_cd VARCHAR(15), IN mParticular_tx VARCHAR(5000))
BEGIN
     DELETE FROM tb_tcashsaleshdr
     WHERE CSID_cd = mCSID_cd;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_CashSales_RecSelect`
--

DROP PROCEDURE IF EXISTS `sp_CashSales_RecSelect`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_CashSales_RecSelect`(IN mCSID_cd VARCHAR(15))
BEGIN
        SELECT a.CSID_cd,
               a.CSDate_dt,
               a.ReferenceID_cd,
               a.Amount_no,
               a.Particular_tx,
               b.Seq_no,
               CASE LENGTH(IFNULL(b.SubsidiaryID_cd,''))
                       WHEN 0 THEN b.AccountID_cd
                       WHEN 7 THEN b.SubsidiaryID_cd
                       ELSE b.AccountID_cd END AS AccountID_cd,
               c.AccountDesc_tx,
               CASE IFNULL(b.SubsidiaryID_cd,'')
                       WHEN '' THEN ''
                       ELSE b.SubsidiaryID_cd END AS SubsidiaryID_cd,
               IFNULL(d.SubsidiaryDesc_tx,'') AS SubsidiaryDesc_tx,
               IFNULL(b.DebitAmount_no,0) As DebitAmount_no,
               IFNULL(b.CreditAmount_no,0) AS CreditAmount_no
        FROM tb_tcashsaleshdr a
        LEFT JOIN
        (SELECT *
        FROM tb_tcashsalesdtl) b
        ON a.CSID_cd = b.CSID_cd
        LEFT JOIN
        (SELECT *
        FROM tb_mcoahdr) c
        ON b.AccountID_cd = c.AccountID_cd
        LEFT JOIN
        (SELECT *
        FROM tb_mcoadtl) d
        ON b.SubsidiaryID_cd = d.SubsidiaryID_cd
        WHERE a.CSID_cd = mCSID_cd
        ORDER BY a.CSDate_dt DESC,
	         a.CSID_cd DESC,
	         b.Seq_no ASC;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_CashSales_Search`
--

DROP PROCEDURE IF EXISTS `sp_CashSales_Search`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_CashSales_Search`(IN mCSID_cd VARCHAR(15),
                                                                     IN mReferenceID_cd VARCHAR(15),
                                                                     IN mStartDate_dt DATE,
                                                                     IN mEndDate_dt DATE,
                                                                     IN mPost_yn VARCHAR(1),
                                                                     IN mLimit VARCHAR(20))
BEGIN
        SET @mSql =
        CONCAT('SELECT DISTINCT a.CSID_cd,
                                a.CSDate_dt,
                                a.ReferenceID_cd,
                                a.Particular_tx,
                                a.Amount_no,
                                a.baseline,
                                a.Post_yn,
                                CASE a.Post_yn
                                        WHEN ''0'' THEN '' ''
                                        WHEN ''1'' THEN ''P''
                                        WHEN ''2'' THEN ''C'' END AS PostDesc_tx


                FROM tb_tcashsaleshdr a

                WHERE   a.CSID_cd LIKE CONCAT(''',mCSID_cd,'%'') AND
                        a.ReferenceID_cd LIKE CONCAT(''',mReferenceID_cd,'%'') AND
                        a.CSDate_dt BETWEEN ''',mStartDate_dt,''' AND ''',mEndDate_dt,''' AND
                        a.Post_yn LIKE CONCAT(''',mPost_yn,'%'')

                ORDER BY a.CSID_cd ASC

                LIMIT ', mLimit);
                
        PREPARE stmtl FROM @mSql;
        EXECUTE stmtl;
        DEALLOCATE PREPARE stmtl;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_CashSales_Select`
--

DROP PROCEDURE IF EXISTS `sp_CashSales_Select`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_CashSales_Select`()
BEGIN
     SELECT *
     FROM tb_tcashsaleshdr a
     ORDER BY CSID_cd ASC;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_CashSales_Verify`
--

DROP PROCEDURE IF EXISTS `sp_CashSales_Verify`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_CashSales_Verify`(IN mCSID_cd VARCHAR(15),
                                                                     IN mCSID_cd_ VARCHAR(15))
BEGIN
     SELECT *
     FROM tb_tcashsaleshdr a
     WHERE a.CSID_cd <> mCSID_cd AND
           a.CSID_cd = mCSID_cd_;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_Cash_Sales_To_GL`
--

DROP PROCEDURE IF EXISTS `sp_Cash_Sales_To_GL`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_Cash_Sales_To_GL`(
        IN var_mControlNoCash VARCHAR(15),
        IN var_mStartDate DATE,
        IN var_mReferenceNo VARCHAR(55),
        IN var_mParticularCash VARCHAR(55),
        IN var_mPost VARCHAR(1),
        IN var_Baseline LONGTEXT
    )
BEGIN
    DECLARE var_half_value DOUBLE;
    DECLARE value_minux_tax DOUBLE;
    DECLARE var_minustax DOUBLE;
    DECLARE var_AccountSeek VARCHAR(5);
    DECLARE var_Amount DOUBLE;
    DECLARE var_counter INTEGER;
    DECLARE done INT DEFAULT 0;
	DECLARE var_TotalCash DOUBLE;
    DECLARE var_ItemDepartment VARCHAR(50);
    DECLARE var_pay_type VARCHAR(20);
    DECLARE var_net_value DOUBLE; 
    DECLARE var_services DOUBLE;
    DECLARE var_cashCursor CURSOR FOR SELECT itemdepartment_tx,pay_type,net_value FROM `var_postsalestogl` WHERE pay_type="CASH" AND itemdepartment_tx <> 'Services Department' and net_value<>0 ORDER BY pay_type;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;
    
    SET @var_counter=0; 
    SET @var_services = ifnull((SELECT SUM(net_value) FROM `var_postsalestogl` WHERE pay_type="CASH" AND itemdepartment_tx ='Services Department'),0);
    SET @var_TotalCash = (SELECT SUM(net_value) FROM `var_postsalestogl` WHERE pay_type="CASH");  
    
    IF @var_TotalCash<>0 THEN
    
    	
        SET @var_OutputTax=((@var_TotalCash-@var_services)/1.12) * .12;
	        
            
		INSERT INTO `tb_tcashsaleshdr`	(CSID_cd,
										 CSDate_dt,
            	                         ReferenceID_cd,
                	                     Amount_no,
                    	                 Particular_tx,
                        	             Post_yn,
                            	         baseline)
    									VALUES(var_mControlNoCash,
                            			    var_mStartDate,
                                       		var_mReferenceNo,
                                       		@var_TotalCash,
                                       		var_mParticularCash,
                                       		var_mPost,
                                       		var_Baseline);
                                       
	    INSERT INTO `tb_tcashsalesdtl` (CSID_cd,
        							    Seq_no,
                                        AccountID_cd,
                                        SubsidiaryID_cd,
                                        DebitAmount_no,
                                        CreditAmount_no)
          								VALUES(var_mControlNoCash,
                                    		@var_counter+1,
                                            10101,
                                            ""	,
                                            @var_TotalCash,
                                            0);		
         
	    INSERT INTO `tb_tcashsalesdtl` (CSID_cd,
          								Seq_no,
                                        AccountID_cd,
                                        SubsidiaryID_cd,
                                        DebitAmount_no,
                                        CreditAmount_no)
          								VALUES(var_mControlNoCash,
                                    	    @var_counter+2,
                                            29001,
                                            ""	,
                                            0,
                                            @var_OutputTax);     
                                            
         if   @var_services <> 0 then
         INSERT INTO `tb_tcashsalesdtl` (CSID_cd,
          								Seq_no,
                                        AccountID_cd,
                                        SubsidiaryID_cd,
                                        DebitAmount_no,
                                        CreditAmount_no)
          								VALUES(var_mControlNoCash,
                                    	    @var_counter+2,
                                            20004,
                                            ""	,
                                            0,
                                            @var_services);     
                                                                              
         end if;
    
    
    	SET @var_counter=2;
	    OPEN var_cashCursor;
    	REPEAT
      	FETCH var_cashCursor INTO var_itemdepartment,var_pay_type,var_net_value;
        	
            IF NOT done THEN
				SET @var_counter=@var_counter+1;
                SET @var_minustax=var_net_value/1.12 * .12;  
            	SET @value_minux_tax=var_net_value-@var_minustax;
                
            
            	CASE 
            
            		WHEN var_itemdepartment='Cellphone Units Department' THEN
                	SET @var_AccountSeek=(SELECT AccountID_cd FROM gng_master.tb_mcoahdr WHERE AccountDesc_tx LIKE 'Sales - %Units');
					                                        
                	WHEN var_itemdepartment='Units/Prepaid Department' THEN
                	SET @var_AccountSeek=(SELECT AccountID_cd FROM gng_master.tb_mcoahdr WHERE AccountDesc_tx LIKE 'Sales - %Prepaid Cards');            	
            
                	WHEN var_itemdepartment='Accessories Department' THEN
                	SET @var_AccountSeek=(SELECT AccountID_cd FROM gng_master.tb_mcoahdr WHERE AccountDesc_tx LIKE 'Sales - %Accessories');            	
            
                	                	WHEN var_itemdepartment='Parts Department' THEN
                	SET @var_AccountSeek=(SELECT AccountID_cd FROM gng_master.tb_mcoahdr WHERE AccountDesc_tx LIKE 'Sales - %Spare Parts');            	
            
                	WHEN var_itemdepartment='Office Supply Department' THEN
                	SET @var_AccountSeek=(SELECT AccountID_cd FROM gng_master.tb_mcoahdr WHERE AccountDesc_tx LIKE 'Sales - %Office Supplies');            	
                	WHEN var_itemdepartment='Modified Consignment' THEN
                	SET @var_AccountSeek=(SELECT AccountID_cd FROM gng_master.tb_mcoahdr WHERE AccountDesc_tx LIKE 'Sales - %Modified Consignment');            	
                	WHEN var_itemdepartment='Memory Card' THEN
                	SET @var_AccountSeek=(SELECT AccountID_cd FROM gng_master.tb_mcoahdr WHERE AccountDesc_tx LIKE 'Sales - %Memory Cards');            	
            END CASE;
                    
            		
                    
                    INSERT INTO `tb_tcashsalesdtl` (CSID_cd,
          								  Seq_no,
                                          AccountID_cd,
                                          SubsidiaryID_cd,
                                          DebitAmount_no,
                                          CreditAmount_no)
          							VALUES(var_mControlNoCash,
                                    	   @var_counter,
                                           @var_AccountSeek,
                                           '',
                                           0,
                                           @value_minux_tax);
                                           
                                         
                    		
                  
                
       		END IF;
    
    UNTIL done END REPEAT;
        
    CLOSE var_cashCursor;
    
    END IF;     		 
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_Charged_Sales_To_GL`
--

DROP PROCEDURE IF EXISTS `sp_Charged_Sales_To_GL`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_Charged_Sales_To_GL`(
        IN var_mControlNoCard VARCHAR(15),
        IN var_mStartDate DATE,
        IN var_mReferenceNo VARCHAR(15),
        IN var_mParticularCard VARCHAR(55),
        IN var_mPost VARCHAR(1),
        IN var_Baseline LONGTEXT
    )
BEGIN
	
	DECLARE var_tax_total DOUBLE;
    DECLARE card_only DOUBLE;
	DECLARE var_enddate DATE;
    DECLARE var_total_dept DOUBLE;
    DECLARE var_dept_accrued DOUBLE;
    DECLARE var_get_card VARCHAR(55);
    DECLARE var_half_value DOUBLE;
    DECLARE value_minux_tax DOUBLE;
    DECLARE var_minustax DOUBLE;
    DECLARE var_ARCardSubsSeek VARCHAR(25);
    DECLARE var_ARCardAccountSeek VARCHAR(25);
    DECLARE var_APAccruedSubSeek VARCHAR(25);
    DECLARE var_APAccruedAccountSeek VARCHAR(25);
    DECLARE var_AccruedPercent DOUBLE;
    DECLARE var_AccruedAmount DOUBLE;
    DECLARE var_CardAccrued DOUBLE;
    DECLARE var_AccountSeek VARCHAR(5);
    DECLARE var_Amount DOUBLE;
    DECLARE var_counter INTEGER;
    DECLARE done INT DEFAULT 0;
	DECLARE var_ItemDepartment VARCHAR(50);
    DECLARE var_pay_type VARCHAR(20);
    DECLARE var_net_value DOUBLE;
    DECLARE var_TotalCard DOUBLE;	
    DECLARE var_cardCursor CURSOR FOR SELECT itemdepartment_tx,pay_type,net_value FROM `var_postsalestogl` WHERE net_value<>0 AND pay_type="CARD" OR pay_type="BANK" ORDER BY pay_type ASC;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;
		   
	SET @var_enddate=DATE_ADD(var_mStartDate, interval 1 day);
    SET @var_counter=0;
    SET @var_TotalCard=(SELECT SUM(net_value) FROM `var_postsalestogl` WHERE pay_type="CARD");    
	 
    
IF @var_TotalCard<>0 THEN
    	
		
    	INSERT INTO `tb_tchargesaleshdr`(BSID_cd,
										 BSDate_dt,
            	                         ReferenceID_cd,
                	                     Amount_no,
                    	                 Particular_tx,
                        	             Post_yn,
                            	         baseline)
    									VALUES(var_mControlNoCard,
                            			    var_mStartDate,
                                       		var_mReferenceNo,
                                       		@var_TotalCard,
                                       		var_mParticularCard,
                                       		var_mPost,
                                       		var_Baseline);
 
		
        SET @var_tax_total=0;
        SET @var_counter=3;
	    OPEN var_cardCursor;
               
    	 REPEAT
     	                      
            FETCH var_cardCursor INTO var_itemdepartment,var_pay_type,var_net_value;
           	           
        	IF NOT done THEN
               	IF var_pay_type="BANK" THEN
                	
            		
                    SET @var_counter=@var_counter+1;
            		SET @var_minustax=var_net_value*0.12;
          			SET @value_minux_tax=var_net_value-@var_minustax;
            		
                    SET @card_only=(SELECT amount FROM (select mastdepartment.itemdepartmentname_tx,sum((dtl.selling_no * dtl.qty_no-dtl.discount_no)) as amount, mastsubsidiary.Subsidiarydesc_tx from tb_tsalesinvoicehdr as hdr
							left join tb_tsalesinvoicedtl as dtl on hdr.siid_cd = dtl.siid_cd
							left join gng_master.tb_mitem as mastitem on dtl.itemid_cd = mastitem.itemid_cd
							left join gng_master.tb_mitemdepartment as mastdepartment on mastitem.itemdepartmentid_cd = mastdepartment.itemdepartmentid_cd
							left join gng_master.tb_mcoadtl as mastsubsidiary on hdr.bankid_cd = mastsubsidiary.Subsidiaryid_cd
							where hdr.paytypeid_cd=2 AND hdr.SIDate_dt BETWEEN var_mStartDate AND @var_enddate AND itemdepartmentname_tx<>'' GROUP BY Subsidiarydesc_tx) AS Resultset WHERE Subsidiarydesc_tx=var_itemdepartment);
                     
                    SET @var_ARCardAccountSeek=(SELECT SubsidiaryID_cd FROM gng_master.tb_mcoadtl WHERE SubsidiaryDesc_tx=var_itemdepartment AND AccountID_cd='11004' );
        			SET @var_ARCardSubsSeek=(SELECT SubsidiaryID_cd FROM gng_master.tb_mcoadtl WHERE SubsidiaryDesc_tx=var_itemdepartment AND AccountID_cd='22001' );
                    SET @var_AccruedPercent=(SELECT SubsidiaryIDPercent_cd FROM gng_master.tb_mcoaaccrueddtl WHERE SubsidiaryID_cd=@var_ARCardAccountSeek); 
                	SET @var_AccruedAmount=@card_only*@var_AccruedPercent;
                
                
                
                	IF @card_only <> 0 then 	                     
                 	INSERT INTO `tb_tchargesalesdtl` (BSID_cd,
       								  Seq_no,
                                      AccountID_cd,
                                      SubsidiaryID_cd,
                                      DebitAmount_no,
                                      CreditAmount_no)
          							VALUES(var_mControlNoCard,
                                    	   @var_counter+1,
                                           11004,
                                           @var_ARCardAccountSeek,
                                           @card_only,
                                           0);
                                         
       			            
            		SET @var_counter=@var_counter+1;
										                	
                	INSERT INTO `tb_tchargesalesdtl` (BSID_cd,
       								  Seq_no,
                                      AccountID_cd,
                                      SubsidiaryID_cd,
                                      DebitAmount_no,
                                      CreditAmount_no)
          							VALUES(var_mControlNoCard,
                                    	   @var_counter+1,
                                           22001,
                                           @var_ARCardSubsSeek,
                                           0,
                                           @var_AccruedAmount);  
                                           
                     end if;                      
                                           
            
            	END IF;
            	IF var_pay_type="CARD" THEN
                	
            		SET @var_counter=@var_counter+1;
                	SET @var_minustax=var_net_value*0.12;
            		SET @value_minux_tax=var_net_value-@var_minustax;
					
            
            			CASE 
            
            				WHEN var_itemdepartment='Cellphone Units Department' THEN
                			SET @var_AccountSeek=(SELECT AccountID_cd FROM gng_master.tb_mcoahdr WHERE AccountDesc_tx LIKE 'Sales - Units');
					                                        
               			 	WHEN var_itemdepartment='Units/Prepaid Department' THEN
                			SET @var_AccountSeek=(SELECT AccountID_cd FROM gng_master.tb_mcoahdr WHERE AccountDesc_tx LIKE 'Sales - Prepaid Cards');            	
            
                			WHEN var_itemdepartment='Accessories Department' THEN
                			SET @var_AccountSeek=(SELECT AccountID_cd FROM gng_master.tb_mcoahdr WHERE AccountDesc_tx LIKE 'Sales - Accessories');            	
            
                			WHEN var_itemdepartment='Services Department' THEN
                			SET @var_AccountSeek=(SELECT AccountID_cd FROM gng_master.tb_mcoahdr WHERE AccountDesc_tx LIKE 'Account Payables - %Service Center RSRS');            	
	                		WHEN var_itemdepartment='Parts Department' THEN
    	            		SET @var_AccountSeek=(SELECT AccountID_cd FROM gng_master.tb_mcoahdr WHERE AccountDesc_tx LIKE 'Sales - Spare Parts');            	
            
        	        		WHEN var_itemdepartment='Office Supply Department' THEN
            	    		SET @var_AccountSeek=(SELECT AccountID_cd FROM gng_master.tb_mcoahdr WHERE AccountDesc_tx LIKE 'Sales - Office Supplies');            	
                			WHEN var_itemdepartment='Modified Consignment' THEN
                			SET @var_AccountSeek=(SELECT AccountID_cd FROM gng_master.tb_mcoahdr WHERE AccountDesc_tx LIKE 'Sales - Modified Consignment');            	
                			WHEN var_itemdepartment='Memory Card' THEN
                			SET @var_AccountSeek=(SELECT AccountID_cd FROM gng_master.tb_mcoahdr WHERE AccountDesc_tx LIKE 'Sales - Memory Cards');            	
           			END CASE;
            		
                    	
                    	SET @var_total_dept=(SELECT ((((myamount-alltotal)/1.12)*.12)-(myamount-alltotal))*-1 as finaltotal FROM(SELECT SUM(amount) as myamount, SUM(totals) as alltotal FROM (SELECT Dept, amount,subdesc, accpercent,totalacc as totals FROM (SELECT Dept, amount,subdesc, accpercent, (amount*accpercent) as totalacc FROM (select mastdepartment.itemdepartmentname_tx AS Dept ,sum((dtl.selling_no * dtl.qty_no-dtl.discount_no)) as amount, mastsubsidiary.Subsidiarydesc_tx as subdesc, mastaccrued.SubsidiaryIDPercent_cd as accpercent from tb_tsalesinvoicehdr as hdr
                            left join tb_tsalesinvoicedtl as dtl on hdr.siid_cd = dtl.siid_cd
                            left join gng_master.tb_mitem as mastitem on dtl.itemid_cd = mastitem.itemid_cd
                            left join gng_master.tb_mitemdepartment as mastdepartment on mastitem.itemdepartmentid_cd = mastdepartment.itemdepartmentid_cd
                            left join gng_master.tb_mcoadtl as mastsubsidiary on hdr.bankid_cd = mastsubsidiary.Subsidiaryid_cd
                            left join gng_master.tb_mcoaaccrueddtl as mastaccrued on mastaccrued.subsidiaryID_cd=mastsubsidiary.Subsidiaryid_cd
                            where hdr.paytypeid_cd=2 AND hdr.SIDate_dt BETWEEN var_mStartDate AND @var_enddate GROUP BY itemdepartmentname_tx, Subsidiarydesc_tx)as firstloop) as resultset) as totalsrec WHERE Dept=var_itemdepartment ) as itona);                                                        
                    	
                        
                        SET @var_OutputTax=(SELECT (((myamount-alltotal)/1.12)*.12) as finaltotal FROM(SELECT SUM(amount) as myamount, SUM(totals) as alltotal FROM (SELECT Dept, amount,subdesc, accpercent,totalacc as totals FROM (SELECT Dept, amount,subdesc, accpercent, (amount*accpercent) as totalacc FROM (select mastdepartment.itemdepartmentname_tx AS Dept ,sum((dtl.selling_no * dtl.qty_no-dtl.discount_no)) as amount, mastsubsidiary.Subsidiarydesc_tx as subdesc, mastaccrued.SubsidiaryIDPercent_cd as accpercent from tb_tsalesinvoicehdr as hdr
                            left join tb_tsalesinvoicedtl as dtl on hdr.siid_cd = dtl.siid_cd
                            left join gng_master.tb_mitem as mastitem on dtl.itemid_cd = mastitem.itemid_cd
                            left join gng_master.tb_mitemdepartment as mastdepartment on mastitem.itemdepartmentid_cd = mastdepartment.itemdepartmentid_cd
                            left join gng_master.tb_mcoadtl as mastsubsidiary on hdr.bankid_cd = mastsubsidiary.Subsidiaryid_cd
                            left join gng_master.tb_mcoaaccrueddtl as mastaccrued on mastaccrued.subsidiaryID_cd=mastsubsidiary.Subsidiaryid_cd
                            where hdr.paytypeid_cd=2 AND hdr.SIDate_dt BETWEEN var_mStartDate AND @var_enddate GROUP BY itemdepartmentname_tx, Subsidiarydesc_tx)as firstloop) as resultset) as totalsrec WHERE Dept=var_itemdepartment ) as itona);                            
                                            
                    
                    	SET @var_get_card=(SELECT Subsidiarydesc_tx FROM (select mastdepartment.itemdepartmentname_tx,sum((dtl.selling_no * dtl.qty_no-dtl.discount_no)) as amount, mastsubsidiary.Subsidiarydesc_tx from tb_tsalesinvoicehdr as hdr
							left join tb_tsalesinvoicedtl as dtl on hdr.siid_cd = dtl.siid_cd
							left join gng_master.tb_mitem as mastitem on dtl.itemid_cd = mastitem.itemid_cd
							left join gng_master.tb_mitemdepartment as mastdepartment on mastitem.itemdepartmentid_cd = mastdepartment.itemdepartmentid_cd
							left join gng_master.tb_mcoadtl as mastsubsidiary on hdr.bankid_cd = mastsubsidiary.Subsidiaryid_cd
							where hdr.paytypeid_cd=2 AND hdr.SIDate_dt BETWEEN var_mStartDate AND @var_enddate group by itemdepartmentname_tx) as resultset WHERE amount=var_net_value AND itemdepartmentname_tx=var_itemdepartment);
						
                                  
                 	INSERT INTO `tb_tchargesalesdtl` (BSID_cd,
          								  Seq_no,
                                          AccountID_cd,
                                          SubsidiaryID_cd,
                                          DebitAmount_no,
                                          CreditAmount_no)
          							VALUES(var_mControlNoCard,
                                    	   @var_counter,
                                           @var_AccountSeek,
                                           '',
                                           0,
                                           @var_total_dept);
                                          
                        	
    						SET @var_tax_total=@var_tax_total+@var_OutputTax;
                            
                    END IF;     
                           
                    	                      
        		END IF;
        
    	UNTIL done END REPEAT;
        CLOSE var_cardCursor;
		
        				INSERT INTO `tb_tchargesalesdtl` (BSID_cd,
          							Seq_no,
                                    AccountID_cd,
                                    SubsidiaryID_cd,
                                    DebitAmount_no,
                                    CreditAmount_no)
          							VALUES(var_mControlNoCard,
                                    	   @var_counter+2,
                                           29001,
                                           ""	,
                                           0,
                                           @var_tax_total); 
        
END IF;
	
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_ChargeSalesDTL_Insert`
--

DROP PROCEDURE IF EXISTS `sp_ChargeSalesDTL_Insert`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_ChargeSalesDTL_Insert`(IN mBSID_cd VARCHAR(15),
                                                                        IN mSeq_no INTEGER,
                                                                        IN mAccountID_cd VARCHAR(5),
                                                                        IN mSubsidiaryID_cd VARCHAR(20),
                                                                        IN mDebitAmount_no DOUBLE,
                                                                        IN mCreditAmount_no DOUBLE)
BEGIN
     INSERT INTO tb_tchargesalesdtl(BSID_cd,
            		         Seq_no,
	    		         AccountID_cd,
	    		         SubsidiaryID_cd,
	    		         DebitAmount_no,
	    		         CreditAmount_no)
		  	    VALUES(mBSID_cd,
	            		 mSeq_no,
		    		 mAccountID_cd,
		    		 mSubsidiaryID_cd,
		    		 mDebitAmount_no,
		    		 mCreditAmount_no);
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_ChargeSalesHDR_Insert`
--

DROP PROCEDURE IF EXISTS `sp_ChargeSalesHDR_Insert`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_ChargeSalesHDR_Insert`(IN mEmployeeID_cd VARCHAR(15),
                                                                        IN mCenterID_id INTEGER,
                                                                        IN mBSID_cd VARCHAR(15),
                                                                        IN mBSDate_dt DATE,
                                                                        IN mReferenceID_cd VARCHAR(15),
                                                                        IN mAmount_no DOUBLE,
                                                                        IN mParticular_tx VARCHAR(255),
                                                                        IN mBaseline LONGTEXT)
BEGIN
     INSERT INTO gng_master.tb_paudittrail(DateExecuted_dt,
                                           TimeExecuted_tm,
                                           EmployeeID_cd,
                                           CenterID_id,
                                           Module_no,
                                           Action_no,
                                           DocNo_tx,
                                           PrevValue_tx,
                                           NewValue_tx,
                                           Comment_tx,
                                           IPID_cd)
                                    VALUES(SYSDATE(),
                                           CURTIME(),
                                           mEmployeeID_cd,
                                           mCenterID_id,
                                           "1704",
                                           "1",
                                           mBSID_cd,
                                           "",
                                           CONCAT("BS No ",mBSID_cd," dated ",mBSDate_dt," - ",mParticular_tx),
                                           "",
                                           (SELECT IPID_cd FROM gng_master.tb_muser WHERE UserID_cd = mEmployeeID_cd));
     INSERT INTO tb_tchargesaleshdr(BSID_cd,
				     BSDate_dt,
                                     ReferenceID_cd,
                                     Amount_no,
                                     Particular_tx,
                                     Post_yn,
                                     Baseline)
			      VALUES(mBSID_cd,
				     mBSDate_dt,
                                     mReferenceID_cd,
                                     mAmount_no,
                                     mParticular_tx,
                                     '0',
                                     mBaseline);
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_ChargeSalesHDR_Update`
--

DROP PROCEDURE IF EXISTS `sp_ChargeSalesHDR_Update`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_ChargeSalesHDR_Update`(IN mEmployeeID_cd VARCHAR(15), IN mCenterID_id INTEGER, IN mBSID_cd VARCHAR(15), IN mBSID_cd_ VARCHAR(15), IN mBSDate_dt DATE, IN mReferenceID_cd VARCHAR(15), IN mAmount_no DOUBLE, iN mStatus varchar(1), IN mParticular_tx VARCHAR(255), IN mBaseline LONGTEXT)
BEGIN
     INSERT INTO gng_master.tb_paudittrail(DateExecuted_dt,
                                           TimeExecuted_tm,
                                           EmployeeID_cd,
                                           CenterID_id,
                                           Module_no,
                                           Action_no,
                                           DocNo_tx,
                                           PrevValue_tx,
                                           NewValue_tx,
                                           Comment_tx,
                                           IPID_cd)
                                    VALUES(SYSDATE(),
                                           CURTIME(),
                                           mEmployeeID_cd,
                                           mCenterID_id,
                                           "1704",
                                           "2",
                                           mBSID_cd,
                                           CONCAT("BS No ",mBSID_cd_," dated ",
                                           (SELECT BSDate_dt FROM tb_tchargesaleshdr WHERE BSID_cd = mBSID_cd_),
                                           " - ",(SELECT Particular_tx FROM tb_tchargesaleshdr WHERE BSID_cd = mBSID_cd_)),
                                           CONCAT("BS No ",mBSID_cd," dated ",mBSDate_dt," - ",mParticular_tx),
                                           "",
                                           (SELECT IPID_cd FROM gng_master.tb_muser WHERE UserID_cd = mEmployeeID_cd));
     DELETE FROM tb_tchargesaleshdr
     WHERE BSID_cd = mBSID_cd_;
     INSERT INTO tb_tchargesaleshdr(BSID_cd,
				     BSDate_dt,
                                     ReferenceID_cd,
                                     Amount_no,
                                     Particular_tx,
                                     Post_yn,
                                     Baseline)
			      VALUES(mBSID_cd,
				     mBSDate_dt,
                                     mReferenceID_cd,
                                     mAmount_no,
                                     mParticular_tx,
                                     mStatus,
                                     mBaseline);
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_ChargeSalesHDR_Update_`
--

DROP PROCEDURE IF EXISTS `sp_ChargeSalesHDR_Update_`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_ChargeSalesHDR_Update_`(IN mBSID_cd VARCHAR(15))
BEGIN
declare mAmount double;
set @mAmount =(select sum(DebitAmount_no) as amt from tb_tchargesalesdtl where BSID_cd = mBSID_cd);
update tb_tchargesaleshdr set Amount_no = @mAmount where BSID_cd = mBSID_cd;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_ChargeSales_Delete`
--

DROP PROCEDURE IF EXISTS `sp_ChargeSales_Delete`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_ChargeSales_Delete`(IN mEmployeeID_cd VARCHAR(15),
                                                           IN uCenterID_id INTEGER,
                                                           IN mBSID_cd VARCHAR(15),
                                                           IN mParticular_tx VARCHAR(5000))
BEGIN
     INSERT INTO gng_master.tb_paudittrail(DateExecuted_dt,
                                           TimeExecuted_tm,
                                           EmployeeID_cd,
                                           CenterID_id,
                                           Module_no,
                                           Action_no,
                                           DocNo_tx,
                                           PrevValue_tx,
                                           NewValue_tx,
                                           Comment_tx,
                                           IPID_cd)
                                    VALUES(SYSDATE(),
                                           CURTIME(),
                                           mEmployeeID_cd,
                                           uCenterID_id,
                                           "1708",
                                           "3",
                                           mBSID_cd,
                                           mParticular_tx,
                                           "",
                                           "",
                                           (SELECT IPID_cd FROM gng_master.tb_muser WHERE UserID_cd = mEmployeeID_cd));
     DELETE FROM tb_tchargesaleshdr
     WHERE BSID_cd = mBSID_cd;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_ChargeSales_RecSelect`
--

DROP PROCEDURE IF EXISTS `sp_ChargeSales_RecSelect`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_ChargeSales_RecSelect`(IN mBSID_cd VARCHAR(15))
BEGIN
        SELECT a.BSID_cd,
               a.BSDate_dt,
               a.ReferenceID_cd,
               a.Amount_no,
               a.Particular_tx,
               b.Seq_no,
               CASE LENGTH(IFNULL(b.SubsidiaryID_cd,''))
                       WHEN 0 THEN b.AccountID_cd
                       WHEN 7 THEN b.SubsidiaryID_cd
                       ELSE b.AccountID_cd END AS AccountID_cd,
               c.AccountDesc_tx,
               CASE IFNULL(b.SubsidiaryID_cd,'')
                       WHEN '' THEN ''
                       ELSE b.SubsidiaryID_cd END AS SubsidiaryID_cd,
               IFNULL(d.SubsidiaryDesc_tx,'') AS SubsidiaryDesc_tx,
               IFNULL(b.DebitAmount_no,0) As DebitAmount_no,
               IFNULL(b.CreditAmount_no,0) AS CreditAmount_no
        FROM tb_tchargesaleshdr a
        LEFT JOIN
        (SELECT *
        FROM tb_tchargesalesdtl) b
        ON a.BSID_cd = b.BSID_cd
        LEFT JOIN
        (SELECT *
        FROM tb_mcoahdr) c
        ON b.AccountID_cd = c.AccountID_cd
        LEFT JOIN
        (SELECT *
        FROM tb_mcoadtl) d
        ON b.SubsidiaryID_cd = d.SubsidiaryID_cd
        WHERE a.BSID_cd = mBSID_cd
        ORDER BY a.BSDate_dt DESC,
	         a.BSID_cd DESC,
	         b.Seq_no ASC;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_ChargeSales_Search`
--

DROP PROCEDURE IF EXISTS `sp_ChargeSales_Search`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_ChargeSales_Search`(IN mBSID_cd VARCHAR(15),
                                                                     IN mReferenceID_cd VARCHAR(15),
                                                                     IN mStartDate_dt DATE,
                                                                     IN mEndDate_dt DATE,
                                                                     IN mPost_yn VARCHAR(1),
                                                                     IN mLimit VARCHAR(20))
BEGIN
        SET @mSql =
        CONCAT('SELECT DISTINCT a.BSID_cd,
                                a.BSDate_dt,
                                a.ReferenceID_cd,
                                a.Particular_tx,
                                a.Amount_no,
                                a.baseline,
                                a.Post_yn,
                                CASE a.Post_yn
                                        WHEN ''0'' THEN '' ''
                                        WHEN ''1'' THEN ''P''
                                        WHEN ''2'' THEN ''C'' END AS PostDesc_tx


                FROM tb_tchargesaleshdr a

                WHERE   a.BSID_cd LIKE CONCAT(''',mBSID_cd,'%'') AND
                        a.ReferenceID_cd LIKE CONCAT(''',mReferenceID_cd,'%'') AND
                        a.BSDate_dt BETWEEN ''',mStartDate_dt,''' AND ''',mEndDate_dt,''' AND
                        a.Post_yn LIKE CONCAT(''',mPost_yn,'%'')

                ORDER BY a.BSID_cd ASC

                LIMIT ', mLimit);
                
        PREPARE stmtl FROM @mSql;
        EXECUTE stmtl;
        DEALLOCATE PREPARE stmtl;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_ChargeSales_Select`
--

DROP PROCEDURE IF EXISTS `sp_ChargeSales_Select`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_ChargeSales_Select`()
BEGIN
     SELECT *
     FROM tb_tchargesaleshdr a
     ORDER BY BSID_cd ASC;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_ChargeSales_Verify`
--

DROP PROCEDURE IF EXISTS `sp_ChargeSales_Verify`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_ChargeSales_Verify`(IN mBSID_cd VARCHAR(15),
                                                                     IN mBSID_cd_ VARCHAR(15))
BEGIN
     SELECT *
     FROM tb_tchargesaleshdr a
     WHERE a.BSID_cd <> mBSID_cd AND
           a.BSID_cd = mBSID_cd_;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_CheckDisbursementDTL_Insert`
--

DROP PROCEDURE IF EXISTS `sp_CheckDisbursementDTL_Insert`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_CheckDisbursementDTL_Insert`(IN mCDID_cd VARCHAR(15),
                                                                             IN mSeq_no INTEGER,
                                                                             IN mAccountID_cd VARCHAR(5),
                                                                             IN mSubsidiaryID_cd VARCHAR(20),
                                                                             IN mDebitAmount_no DOUBLE,
                                                                             IN mCreditAmount_no DOUBLE,
                                                                             IN mRRID_cd VARCHAR(15))
BEGIN
     INSERT INTO tb_tcheckdisbursementdtl(CDID_cd,
            		              Seq_no,
                                          AccountID_cd,
                                          SubsidiaryID_cd,
                                          DebitAmount_no,
                                          CreditAmount_no,
                                          RRID_cd)
                                   VALUES(mCDID_cd,
	            		      mSeq_no,
                                          mAccountID_cd,
                                          mSubsidiaryID_cd,
                                          mDebitAmount_no,
                                          mCreditAmount_no,
                                          mRRID_cd);
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_CheckDisbursementHDR_Insert`
--

DROP PROCEDURE IF EXISTS `sp_CheckDisbursementHDR_Insert`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_CheckDisbursementHDR_Insert`(IN mEmployeeID_cd VARCHAR(15), IN mCDID_cd VARCHAR(15), IN mCDDate_dt DATE, IN mReferenceNo VARCHAR(15), IN mPaymasterID_cd VARCHAR(100), IN mBankID_cd VARCHAR(20), IN mCheckNo_tx VARCHAR(15), IN mCheckDate_dt DATE, IN mAmount_no DOUBLE, IN mParticular_tx VARCHAR(255), IN mBaseline LONGTEXT)
BEGIN

     INSERT INTO tb_tcheckdisbursementhdr(CDID_cd,
				          CDDate_dt, 
     						ReferenceID_cd,
                                          PaymasterID_cd,
                                          BankID_cd,
                                          CheckNo_tx,
                                          CheckDate_dt,
                                          Amount_no,
                                          Particular_tx,
                                          Post_yn,
                                          Baseline)
                                   VALUES(mCDID_cd,
                                          mCDDate_dt,  
                                          mReferenceNo,
                                          mPaymasterID_cd,
                                          mBankID_cd,
                                          mCheckNo_tx,
                                          mCheckDate_dt,
                                          mAmount_no,
                                          mParticular_tx,
                                          '0',
                                          mBaseline);
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_CheckDisbursementHDR_Update`
--

DROP PROCEDURE IF EXISTS `sp_CheckDisbursementHDR_Update`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_CheckDisbursementHDR_Update`(IN mEmployeeID_cd VARCHAR(15), IN mCDID_cd VARCHAR(15), IN mCDID_cd_ VARCHAR(15), IN mCDDate_dt DATE, IN mReferenceNo VARCHAR(15), IN mPaymasterID_cd VARCHAR(100), IN mBankID_cd VARCHAR(20), IN mCheckNo_tx VARCHAR(15), IN mCheckDate_dt DATE, IN mAmount_no DOUBLE, IN mStatus VARCHAR(1), IN mParticular_tx VARCHAR(255), IN mBaseline LONGTEXT)
BEGIN
     DELETE FROM tb_tcheckdisbursementhdr
     WHERE CDID_cd = mCDID_cd_;
     INSERT INTO tb_tcheckdisbursementhdr(CDID_cd,
				          CDDate_dt, 
     					  ReferenceID_cd,
                                          PaymasterID_cd,
                                          BankID_cd,
                                          CheckNo_tx,
                                          CheckDate_dt,
                                          Amount_no,
                                          Particular_tx,
                                          Post_yn,
                                          Baseline)
                                   VALUES(mCDID_cd,
                                          mCDDate_dt,
                                          mReferenceNo,
                                          mPaymasterID_cd,
                                          mBankID_cd,
                                          mCheckNo_tx,
                                          mCheckDate_dt,
                                          mAmount_no,
                                          mParticular_tx,
                                          mStatus,
                                          mBaseline);
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_CheckDisbursementPaymaster_Select`
--

DROP PROCEDURE IF EXISTS `sp_CheckDisbursementPaymaster_Select`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_CheckDisbursementPaymaster_Select`()
BEGIN
        SELECT DISTINCT a.PaymasterID_cd,
                        b.PaymasterName_tx
        FROM tb_tcheckdisbursementhdr a
        LEFT JOIN
        (SELECT *
        FROM tb_mpaymaster) b
        ON a.PaymasterID_cd = b.PaymasterID_cd
        ORDER BY b.PaymasterName_tx;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_CheckDisbursementVoucher_Verify`
--

DROP PROCEDURE IF EXISTS `sp_CheckDisbursementVoucher_Verify`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`Rogelio`@`%` PROCEDURE `sp_CheckDisbursementVoucher_Verify`(IN mEmployeeID_cd VARCHAR(15), IN mCDID_cd VARCHAR(15))
BEGIN

select SUM(dtl.DebitAmount_no) as db, sum(dtl.CreditAmount_no) as cr from tb_tcheckdisbursementhdr as hdr 
left join tb_tcheckdisbursementdtl as dtl on dtl.CDID_cd=hdr.CDID_cd
where hdr.CDID_cd = mCDID_cd;



END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_CheckDisbursement_Cancel`
--

DROP PROCEDURE IF EXISTS `sp_CheckDisbursement_Cancel`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_CheckDisbursement_Cancel`(IN mEmployeeID_cd VARCHAR(15),
                                                                          IN mCenterID_id INTEGER,
                                                                          IN mCDID_cd VARCHAR(15),
                                                                          IN mAmount_no DOUBLE,
                                                                          IN mParticular_tx VARCHAR(255),
                                                                          IN mBaseline LONGTEXT,
                                                                          IN mDesc_tx VARCHAR(5000))
BEGIN
     INSERT INTO gng_master.tb_paudittrail(DateExecuted_dt,
                                           TimeExecuted_tm,
                                           EmployeeID_cd,
                                           CenterID_id,
                                           Module_no,
                                           Action_no,
                                           DocNo_tx,
                                           PrevValue_tx,
                                           NewValue_tx,
                                           Comment_tx,
                                           IPID_cd)
                                    VALUES(SYSDATE(),
                                           CURTIME(),
                                           mEmployeeID_cd,
                                           mCenterID_id,
                                           "1710",
                                           "3",
                                           mCDID_cd,
                                           mDesc_tx,
                                           "",
                                           "",
                                           (SELECT IPID_cd FROM gng_master.tb_muser WHERE UserID_cd = mEmployeeID_cd));
     UPDATE tb_tcheckdisbursementhdr
     SET Post_yn = '2'
     WHERE CDID_cd = mCDID_cd;
     INSERT INTO gng_master.tb_paudittrail(DateExecuted_dt,
                                           TimeExecuted_tm,
                                           EmployeeID_cd,
                                           CenterID_id,
                                           Module_no,
                                           Action_no,
                                           DocNo_tx,
                                           PrevValue_tx,
                                           NewValue_tx,
                                           Comment_tx,
                                           IPID_cd)
                                    VALUES(SYSDATE(),
                                           CURTIME(),
                                           mEmployeeID_cd,
                                           mCenterID_id,
                                           "1710",
                                           "1",
                                           mCDID_cd,
                                           "",
                                           CONCAT("Journal No ",mCDID_cd," dated ",SYSDATE()," - ",mParticular_tx),
                                           "",
                                           (SELECT IPID_cd FROM gng_master.tb_muser WHERE UserID_cd = mEmployeeID_cd));
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_CheckDisbursement_Cleared`
--

DROP PROCEDURE IF EXISTS `sp_CheckDisbursement_Cleared`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_CheckDisbursement_Cleared`(IN mEmployeeID_cd VARCHAR(15),
                                                                     IN uCenterID_id INTEGER,
                                                                     IN mCDID_cd VARCHAR(15),
                                                                     IN mParticular_tx TEXT)
BEGIN

 
     UPDATE tb_tcheckdisbursementhdr
     SET Cleared_yn = '1'
     WHERE CDID_cd = mCDID_cd;

END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_CheckDisbursement_Delete`
--

DROP PROCEDURE IF EXISTS `sp_CheckDisbursement_Delete`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_CheckDisbursement_Delete`(IN mEmployeeID_cd VARCHAR(15), IN mCDID_cd VARCHAR(15), IN mParticular_tx VARCHAR(5000))
BEGIN
   DELETE FROM tb_tcheckdisbursementhdr
     WHERE CDID_cd = mCDID_cd;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_CheckDisbursement_RecSelect`
--

DROP PROCEDURE IF EXISTS `sp_CheckDisbursement_RecSelect`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_CheckDisbursement_RecSelect`(IN mCDID_cd VARCHAR(15))
BEGIN
        SELECT a.CDID_cd,
               a.CDDate_dt,
               a.ReferenceID_cd,
               a.PaymasterID_cd,
               c.PaymasterName_tx,
               a.BankID_cd,
               a.CheckNo_tx,
               a.CheckDate_dt,
               a.Amount_no,
               a.Particular_tx,
               b.Seq_no,
               CASE LENGTH(IFNULL(b.SubsidiaryID_cd,''))
                       WHEN 0 THEN b.AccountID_cd
                       WHEN 7 THEN b.SubsidiaryID_cd
                       ELSE b.AccountID_cd END AS AccountID_cd,
               d.AccountDesc_tx,
               CASE IFNULL(b.SubsidiaryID_cd,'')
                       WHEN '' THEN ''
                       ELSE b.SubsidiaryID_cd END AS SubsidiaryID_cd,
               IFNULL(e.SubsidiaryDesc_tx,'') AS SubsidiaryDesc_tx,
               IFNULL(b.DebitAmount_no,0) As DebitAmount_no,
               IFNULL(b.CreditAmount_no,0) AS CreditAmount_no

        FROM tb_tcheckdisbursementhdr a
        LEFT JOIN
        (SELECT *
        FROM tb_tcheckdisbursementdtl) b
        ON a.CDID_cd = b.CDID_cd
        LEFT JOIN
        (SELECT PaymasterID_cd,
	        PaymasterName_tx
        FROM tb_mpaymaster) c
        ON a.PaymasterID_cd = c.PaymasterID_cd
        LEFT JOIN
        (SELECT *
        FROM tb_mcoahdr) d
        ON b.AccountID_cd = d.AccountID_cd
        LEFT JOIN
        (SELECT *
        FROM tb_mcoadtl) e
        ON b.SubsidiaryID_cd = e.SubsidiaryID_cd
        WHERE a.CDID_cd = mCDID_cd
        ORDER BY a.CDDate_dt ASC,
	         a.CDID_cd ASC,
	         b.Seq_no ASC;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_CheckDisbursement_Search`
--

DROP PROCEDURE IF EXISTS `sp_CheckDisbursement_Search`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_CheckDisbursement_Search`(IN mCDID_cd VARCHAR(15),
                                                                          IN mCheckNo_tx VARCHAR(15),
                                                                          IN mPaymasterID_cd VARCHAR(15),
                                                                          IN mStartDate_dt DATE,
                                                                          IN mEndDate_dt DATE,
                                                                          IN mPost_yn VARCHAR(1),
                                                                          IN mLimit VARCHAR(20))
BEGIN
        SET @mSql =
        CONCAT('SELECT  a.CDID_cd,
                        a.CDDate_dt,
                        a.PaymasterID_cd,
                        b.PaymasterName_tx,
                        b.TIN_tx,
                        b.Terms_no,
                        b.Address_tx,
                        a.CheckNo_tx,
                        a.CheckDate_dt,
                        a.Amount_no,
                        a.Particular_tx,
                        a.baseline,
                        a.Post_yn,
                        CASE a.Post_yn
                                WHEN ''0'' THEN '' ''
                                WHEN ''1'' THEN ''P''
                                WHEN ''2'' THEN ''C'' END AS PostDesc_tx

                FROM tb_tcheckdisbursementhdr a

                LEFT JOIN
                (SELECT *
                FROM tb_mpaymaster) b
                ON a.PaymasterID_cd = b.PaymasterID_cd

                WHERE   a.CDID_cd LIKE CONCAT(''',mCDID_cd,'%'') AND
                        a.CheckNo_tx LIKE CONCAT(''',mCheckNo_tx,'%'') AND
                        a.PaymasterID_cd LIKE CONCAT(''',mPaymasterID_cd,'%'') AND
                        a.CDDate_dt BETWEEN ''',mStartDate_dt,''' AND ''',mEndDate_dt,''' AND
                        a.Post_yn LIKE CONCAT(''',mPost_yn,'%'')

                ORDER BY a.CDID_cd ASC

                LIMIT ', mLimit);
        PREPARE stmtl FROM @mSql;
        EXECUTE stmtl;
        DEALLOCATE PREPARE stmtl;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_CheckDisbursement_Select`
--

DROP PROCEDURE IF EXISTS `sp_CheckDisbursement_Select`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_CheckDisbursement_Select`()
BEGIN
     SELECT *
     FROM tb_tcheckdisbursementhdr a
     ORDER BY CDID_cd ASC;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_CheckDisbursement_Verify`
--

DROP PROCEDURE IF EXISTS `sp_CheckDisbursement_Verify`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_CheckDisbursement_Verify`(IN mCDID_cd VARCHAR(15),
                                                              IN mCDID_cd_ VARCHAR(15))
BEGIN
     SELECT *
     FROM tb_tcheckdisbursementhdr a
     WHERE a.CDID_cd <> CDID_cd AND
           a.CDID_cd = mCDID_cd_;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_CheckDisbusement_Delete`
--

DROP PROCEDURE IF EXISTS `sp_CheckDisbusement_Delete`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_CheckDisbusement_Delete`(IN mEmployeeID_cd VARCHAR(15),
                                                              IN uCenterID_id INTEGER,
                                                              IN mCDID_cd VARCHAR(15),
                                                              IN mParticular_tx VARCHAR(5000))
BEGIN

     DELETE FROM tb_tcheckdisbursementhdr
     WHERE CDID_cd = mCDID_cd;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_ControlAccountBank_Select`
--

DROP PROCEDURE IF EXISTS `sp_ControlAccountBank_Select`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_ControlAccountBank_Select`(IN mBank_yn VARCHAR(1))
BEGIN

        SELECT a.AccountID_cd,
               a.AccountDesc_tx

        FROM tb_mcoahdr a

        WHERE a.Bank_yn LIKE CONCAT(mBank_yn,'%')

        ORDER BY a.AccountDesc_tx;

END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_ControlAccountDetail_Select`
--

DROP PROCEDURE IF EXISTS `sp_ControlAccountDetail_Select`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_ControlAccountDetail_Select`(IN mBank_yn VARCHAR(1))
BEGIN
  
   SELECT a.AccountID_cd,
               a.AccountDesc_tx,
               a.Bank_yn,
               b.SubsidiaryID_cd,
               b.SubsidiaryDesc_tx
        FROM tb_mcoahdr as a
        LEFT JOIN tb_mcoadtl as b
        ON a.AccountID_cd = b.AccountID_cd
        WHERE a.Bank_yn LIKE CONCAT(mBank_yn,'%')
        ORDER BY b.SubsidiaryDesc_tx;      
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_ControlAccountGroup_Delete`
--

DROP PROCEDURE IF EXISTS `sp_ControlAccountGroup_Delete`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_ControlAccountGroup_Delete`(IN mEmployeeID_cd VARCHAR(15),
                                                                IN uCenterID_id INTEGER,
                                                                IN mGroupID_cd VARCHAR(3),
                                                                IN mGroupName_tx VARCHAR(80))
BEGIN
     INSERT INTO tb_paudittrail(DateExecuted_dt,
                                TimeExecuted_tm,
                                EmployeeID_cd,
                                CenterID_id,
                                Module_no,
                                Action_no,
                                DocNo_tx,
                                PrevValue_tx,
                                NewValue_tx,
                                Comment_tx)
                         VALUES(SYSDATE(),
                                CURTIME(),
                                mEmployeeID_cd,
                                uCenterID_id,
                                "5402",
                                "3",
                                mGroupID_cd,
                                mGroupName_tx,
                                "",
                                "");
     DELETE FROM tb_mcoagroup
     WHERE GroupID_cd = mGroupID_cd;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_ControlAccountGroup_Insert`
--

DROP PROCEDURE IF EXISTS `sp_ControlAccountGroup_Insert`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_ControlAccountGroup_Insert`(IN mEmployeeID_cd VARCHAR(15),
                                                                IN mCenterID_id INTEGER,
                                                                IN mGroupID_cd VARCHAR(3),
                                                                IN mGroupName_tx VARCHAR(80),
                                                                IN mTypeID_id INTEGER)
BEGIN
     INSERT INTO tb_paudittrail(DateExecuted_dt,
                                TimeExecuted_tm,
                                EmployeeID_cd,
                                CenterID_id,
                                Module_no,
                                Action_no,
                                DocNo_tx,
                                PrevValue_tx,
                                NewValue_tx,
                                Comment_tx)
                         VALUES(SYSDATE(),
                                CURTIME(),
                                mEmployeeID_cd,
                                mCenterID_id,
                                "5402",
                                "1",
                                mGroupID_cd,
                                "",
                                CONCAT(mGroupID_cd,' - ',mGroupName_tx),
                                "");
     INSERT INTO tb_mcoagroup(GroupID_cd,
 			     GroupName_tx,
                              TypeID_id)
		       VALUES(mGroupID_cd,
 			     mGroupName_tx,
                              mTypeID_id);
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_ControlAccountGroup_RecSelect`
--

DROP PROCEDURE IF EXISTS `sp_ControlAccountGroup_RecSelect`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_ControlAccountGroup_RecSelect`(IN mGroupID_cd VARCHAR(3))
BEGIN
     SELECT *
     FROM tb_mcoagroup a
     WHERE a.GroupID_cd = mGroupID_cd;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_ControlAccountGroup_Search`
--

DROP PROCEDURE IF EXISTS `sp_ControlAccountGroup_Search`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_ControlAccountGroup_Search`(IN mLimit VARCHAR(20))
BEGIN
        SET @mSql =
        CONCAT('SELECT a.GroupID_cd,
                       a.GroupName_tx,
                       a.TypeID_id,
                       CASE a.TypeID_id
                           WHEN ''1'' THEN ''Assets''
                           WHEN ''2'' THEN ''Liabilities''
                           WHEN ''3'' THEN ''Capital''
                           WHEN ''4'' THEN ''Revenue''
                           WHEN ''5'' THEN ''Expenses''
                           WHEN ''6'' THEN ''Others'' END AS TypeName_tx

                FROM tb_mcoagroup a

                ORDER BY TypeID_id

                LIMIT ', mLimit);
        PREPARE stmtl FROM @mSql;
        EXECUTE stmtl;
        DEALLOCATE PREPARE stmtl;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_ControlAccountGroup_Select`
--

DROP PROCEDURE IF EXISTS `sp_ControlAccountGroup_Select`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_ControlAccountGroup_Select`()
BEGIN
     SELECT *
     FROM tb_mcoagroup
     ORDER BY GroupName_tx ASC;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_ControlAccountGroup_Update`
--

DROP PROCEDURE IF EXISTS `sp_ControlAccountGroup_Update`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_ControlAccountGroup_Update`(IN mEmployeeID_cd VARCHAR(15),
                                                                IN mCenterID_id INTEGER,
                                                                IN mGroupID_cd VARCHAR(3),
                                                                IN mGroupName_tx VARCHAR(80),
                                                                IN mTypeID_id INTEGER)
BEGIN
     INSERT INTO tb_paudittrail(DateExecuted_dt,
                                TimeExecuted_tm,
                                EmployeeID_cd,
                                CenterID_id,
                                Module_no,
                                Action_no,
                                DocNo_tx,
                                PrevValue_tx,
                                NewValue_tx,
                                Comment_tx)
                         VALUES(SYSDATE(),
                                CURTIME(),
                                mEmployeeID_cd,
                                mCenterID_id,
                                "5402",
                                "2",
                                mGroupID_cd,
                                (SELECT GroupName_tx FROM tb_mcoagroup WHERE GroupID_cd = mGroupID_cd),
                                CONCAT(mGroupID_cd,' - ',mGroupName_tx),
                                "");
     UPDATE tb_mcoagroup
     SET GroupName_tx = mGroupName_tx,
         TypeID_id = mTypeID_id
     WHERE GroupID_cd = mGroupID_cd;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_ControlAccountGroup_Verify`
--

DROP PROCEDURE IF EXISTS `sp_ControlAccountGroup_Verify`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_ControlAccountGroup_Verify`(IN mGroupID_cd VARCHAR(3),
                                                                            IN mGroupName_tx VARCHAR(80))
BEGIN
     SELECT *
     FROM tb_mcoagroup a
     WHERE a.GroupID_cd <> mGroupID_cd AND
           a.GroupName_tx = mGroupName_tx;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_ControlAccountSubsidiary_Select`
--

DROP PROCEDURE IF EXISTS `sp_ControlAccountSubsidiary_Select`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_ControlAccountSubsidiary_Select`()
BEGIN
/*        SELECT a.AccountID_cd,
               a.AccountDesc_tx
        FROM tb_mcoahdr a
        LEFT JOIN
        (SELECT AccountID_cd
        FROM tb_tcashreceiptsdtl
        WHERE SubsidiaryID_cd='') b
        ON a.AccountID_cd = b.AccountID_cd
        LEFT JOIN
        (SELECT AccountID_cd
        FROM tb_tpurchasesdtl
        WHERE SubsidiaryID_cd='') c
        ON a.AccountID_cd = c.AccountID_cd
        LEFT JOIN
        (SELECT AccountID_cd
        FROM tb_tcashsalesdtl
        WHERE SubsidiaryID_cd='') d
        ON a.AccountID_cd = d.AccountID_cd
        LEFT JOIN
        (SELECT AccountID_cd
        FROM tb_tchargesalesdtl
        WHERE SubsidiaryID_cd='') e
        ON a.AccountID_cd = b.AccountID_cd
        LEFT JOIN
        (SELECT AccountID_cd
        FROM tb_tcheckdisbursementdtl
        WHERE SubsidiaryID_cd='') f
        ON a.AccountID_cd = b.AccountID_cd
        LEFT JOIN
        (SELECT AccountID_cd
        FROM tb_tgeneraljournaldtl
        WHERE SubsidiaryID_cd='') g
        ON a.AccountID_cd = b.AccountID_cd
        WHERE IFNULL(b.AccountID_cd,'')='' AND
              IFNULL(c.AccountID_cd,'')='' AND
              IFNULL(d.AccountID_cd,'')='' AND
              IFNULL(e.AccountID_cd,'')='' AND
              IFNULL(f.AccountID_cd,'')='' AND
              IFNULL(g.AccountID_cd,'')=''
        ORDER BY AccountDesc_tx ASC;*/    
  select AccountID_cd,AccountDesc_tx from tb_mcoahdr;      
        
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_ControlAccount_Delete`
--

DROP PROCEDURE IF EXISTS `sp_ControlAccount_Delete`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_ControlAccount_Delete`(IN mEmployeeID_cd VARCHAR(15), IN mAccountID_cd VARCHAR(5), IN mAccountDesc_tx VARCHAR(5000))
BEGIN
     DELETE
     FROM tb_mcoahdr
     WHERE AccountID_cd = mAccountID_cd;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_ControlAccount_Insert`
--

DROP PROCEDURE IF EXISTS `sp_ControlAccount_Insert`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_ControlAccount_Insert`(IN mEmployeeID_cd VARCHAR(15), IN mAccountID_cd VARCHAR(5), IN mAccountDesc_tx VARCHAR(80), IN mGroupID_cd VARCHAR(3), IN mBank_yn VARCHAR(1), IN mDebit_yn VARCHAR(1), IN mCR_yn VARCHAR(1), IN mPB_yn VARCHAR(1), IN mCS_yn VARCHAR(1), IN mBS_yn VARCHAR(1), IN mCD_yn VARCHAR(1), IN mGJ_yn VARCHAR(1), IN mBalanceSheet_yn VARCHAR(1), IN mBalanceSheetType_tx VARCHAR(1), IN mIncomeStatement_yn VARCHAR(1), IN mIncomeStatementType_tx VARCHAR(1), IN mCashFlow_yn VARCHAR(1), IN mCashFlowType_tx VARCHAR(1), IN mBaseline LONGTEXT)
BEGIN
     INSERT INTO tb_mcoahdr(AccountID_cd,
 			   AccountDesc_tx,
 			   GroupID_cd,
 			   Bank_yn,
 			   Debit_yn,
 			   CR_yn,
 			   PB_yn,
                            CS_yn,
                            BS_yn,
                            CD_yn,
 			   GJ_yn,
                            BalanceSheet_yn,
                            BalanceSheetType_tx,
                            IncomeStatement_yn,
                            IncomeStatementType_tx,
                              CashFlow_yn,
                              CashFlowType_tx,
                            Baseline)
		     VALUES(mAccountID_cd,
 			   mAccountDesc_tx,
 			   mGroupID_cd,
 			   mBank_yn,
 			   mDebit_yn,
 			   mCR_yn,
 			   mPB_yn,
                            mCS_yn,
                            mBS_yn,
                            mCD_yn,
			    mGJ_yn,
                            mBalanceSheet_yn,
                            mBalanceSheetType_tx,
                            mIncomeStatement_yn,
                            mIncomeStatementType_tx, 
                             mCashFlow_yn,
					         mCashFlowType_tx, 
         					 mBaseline);
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_ControlAccount_RecSelect`
--

DROP PROCEDURE IF EXISTS `sp_ControlAccount_RecSelect`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_ControlAccount_RecSelect`(IN mAccountID_cd VARCHAR(5))
BEGIN
     SELECT *
     FROM tb_mcoahdr a
     WHERE a.AccountID_cd = mAccountID_cd;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_ControlAccount_Search`
--

DROP PROCEDURE IF EXISTS `sp_ControlAccount_Search`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_ControlAccount_Search`(IN mAccountID_cd VARCHAR(5),
                                                       IN mAccountDesc_tx VARCHAR(80),
                                                       IN mSql1 VARCHAR(80),
                                                       IN mGroupID_cd VARCHAR(3),
                                                       IN mLimit VARCHAR(20))
BEGIN
 

       SET @mSql =
        CONCAT('SELECT a.AccountID_cd,
                       a.AccountDesc_tx,
                       a.GroupID_cd,
                       b.GroupName_tx,
                       (SELECT COUNT(*) FROM tb_mcoadtl WHERE AccountID_cd = a.AccountID_cd) AS TotRec_no

                FROM tb_mcoahdr as a

                LEFT JOIN tb_mcoagroup as b
                ON a.GroupID_cd = b.GroupID_cd

                WHERE   a.AccountID_cd LIKE CONCAT(''',mAccountID_cd,'%'') AND
                        a.AccountDesc_tx LIKE CONCAT(''',mAccountDesc_tx,'%'') AND ',
                        mSql1,' AND
                        a.GroupID_cd LIKE CONCAT(''',mGroupID_cd,'%'')


                ORDER BY b.GroupName_tx,
                         a.AccountID_cd

                LIMIT ', mLimit);
        PREPARE stmtl FROM @mSql;
        EXECUTE stmtl;
        DEALLOCATE PREPARE stmtl;        
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_ControlAccount_Select`
--

DROP PROCEDURE IF EXISTS `sp_ControlAccount_Select`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_ControlAccount_Select`()
BEGIN
     SELECT *
     FROM tb_mcoahdr
     ORDER BY AccountDesc_tx ASC;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_ControlAccount_Update`
--

DROP PROCEDURE IF EXISTS `sp_ControlAccount_Update`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_ControlAccount_Update`(IN mEmployeeID_cd VARCHAR(15), IN mAccountID_cd VARCHAR(5), IN mAccountDesc_tx VARCHAR(80), IN mGroupID_cd VARCHAR(3), IN mBank_yn VARCHAR(1), IN mDebit_yn VARCHAR(1), IN mCR_yn VARCHAR(1), IN mPB_yn VARCHAR(1), IN mCS_yn VARCHAR(1), IN mBS_yn VARCHAR(1), IN mCD_yn VARCHAR(1), IN mGJ_yn VARCHAR(1), IN mBalanceSheet_yn VARCHAR(1), IN mBalanceSheetType_tx VARCHAR(1), IN mIncomeStatement_yn VARCHAR(1), IN mIncomeStatementType_tx VARCHAR(1), IN mCashFlow_yn VARCHAR(1), IN mCashFlowType_tx VARCHAR(1), IN mBaseline LONGTEXT)
BEGIN
     UPDATE tb_mcoahdr
     SET AccountDesc_tx = mAccountDesc_tx,
         GroupID_cd = mGroupID_cd,
         Bank_yn = mBank_yn,
         Debit_yn = mDebit_yn,
         CR_yn = mCR_yn,
         PB_yn = mPB_yn,
         CS_yn = mCS_yn,
         BS_yn = mBS_yn,
         CD_yn = mCD_yn,
         GJ_yn = mGJ_yn,
         BalanceSheet_yn = mBalanceSheet_yn,
         BalanceSheetType_tx = mBalanceSheetType_tx,
         IncomeStatement_yn = mIncomeStatement_yn,
         IncomeStatementType_tx = mIncomeStatementType_tx, 
         CashFlow_yn = mCashFlow_yn,
         CashFlowType_tx= mCashFlowType_tx, 
         Baseline = mBaseline
     WHERE AccountID_cd = mAccountID_cd;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_ControlAccount_Verify`
--

DROP PROCEDURE IF EXISTS `sp_ControlAccount_Verify`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_ControlAccount_Verify`(IN mAccountID_cd VARCHAR(5),
                                                                       IN mAccountDesc_tx VARCHAR(80))
BEGIN
     SELECT *
     FROM tb_mcoahdr a
     WHERE a.AccountID_cd <> mAccountID_cd AND
           a.AccountDesc_tx = mAccountDesc_tx;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_ControlWithSubsidiaryAccount_Select`
--

DROP PROCEDURE IF EXISTS `sp_ControlWithSubsidiaryAccount_Select`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_ControlWithSubsidiaryAccount_Select`()
BEGIN
  
 SELECT a.AccountID_cd,
               a.AccountDesc_tx
        FROM tb_mcoahdr a
        LEFT JOIN
        (SELECT COUNT(*) As TotCount,
                AccountID_cd
        FROM tb_mcoadtl
        GROUP BY AccountID_cd) b
        ON a.AccountID_cd = b.AccountID_cd
        WHERE a.Main_yn <> '1' AND
              b.TotCount > 0
        ORDER BY a.AccountDesc_tx;      
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_costofsales_search`
--

DROP PROCEDURE IF EXISTS `sp_costofsales_search`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_costofsales_search`(IN mEmployeeID_cd varchar(15), IN mCenterID_id INTEGER(11), IN uEmployeeID_cd varchar(15), IN mPayTypeID_cd varchar(2), IN mItemID_cd varchar(15), IN mItemName_tx varchar(80), IN mConsignment_yn varchar(1), IN mItemDepartmentID_cd varchar(2), IN mItemCategoryID_cd varchar(2), IN mItemSubCategoryID_cd varchar(2), IN mItemClassID_cd varchar(2), IN mItemConsignmentID_cd varchar(2), IN mSql varchar(100), IN smStartDate_dt DATE, IN smEndDate_dt DATE, IN mLimit varchar(20))
BEGIN
declare mStartDate_dt date;
declare mEndDate_dt date;
set mStartDate_dt =smStartDate_dt;
set mEndDate_dt =date_add(smEndDate_dt, interval 1 day);
(select 'COST OF SALES' as paytype, mStartDate_dt, mEndDate_dt, dtl.itemid_cd, hdr.paytypeid_cd as paytypeid_cd, mast.itemname_tx, dept.itemdepartmentname_tx, sum(dtl.Qty_no) as mTotal, sum(dtl.Qty_no * dtl.central_no) as mTselling from tb_tsalesinvoicehdr as hdr
inner join tb_tsalesinvoicedtl as dtl on hdr.siid_cd = dtl.siid_cd
inner join gng_master.tb_mitem as mast on dtl.itemid_cd = mast.itemid_cd
inner join gng_master.tb_mitemdepartment as dept on mast.itemdepartmentid_cd = dept.itemdepartmentid_cd
where dept.itemdepartmentid_cd like concat(mItemDepartmentID_cd,'%')
and mast.itemcategoryid_cd like concat(mItemCategoryID_cd,'%')
and mast.itemsubcategoryid_cd like concat(mItemSubCategoryID_cd,'%')
and mast.itemclassid_cd like concat(mItemClassID_cd,'%')
and mast.itemconsignmentid_cd like concat(mItemConsignmentID_cd,'%')
and dtl.itemid_cd like concat(mItemID_cd,'%')
and mast.itemname_tx like concat(mItemName_tx,'%')
and hdr.paytypeid_cd like concat(mPayTypeID_cd,'%')
and (hdr.sidate_dt between mStartDate_dt and mEndDate_dt)
and (hdr.paytypeid_cd between 1 and 3)
and dtl.discount_no <> (dtl.selling_no * dtl.Qty_no)
group by dept.itemdepartmentname_tx, dtl.itemid_cd order by  paytypeid_cd, dept.itemdepartmentname_tx,  mTotal, dtl.itemid_cd)
union
(select 'COST OF STOCK TRANSFER' as paytype, mStartDate_dt, mEndDate_dt, dtl.itemid_cd, hdr.paytypeid_cd, mast.itemname_tx, dept.itemdepartmentname_tx, sum(dtl.Qty_no) as mTotal, sum(dtl.Qty_no * dtl.central_no) as mTselling from tb_tsalesinvoicehdr as hdr
inner join tb_tsalesinvoicedtl as dtl on hdr.siid_cd = dtl.siid_cd
inner join gng_master.tb_mitem as mast on dtl.itemid_cd = mast.itemid_cd
inner join gng_master.tb_mitemdepartment as dept on mast.itemdepartmentid_cd = dept.itemdepartmentid_cd
where dept.itemdepartmentid_cd like concat(mItemDepartmentID_cd,'%')
and mast.itemcategoryid_cd like concat(mItemCategoryID_cd,'%')
and mast.itemsubcategoryid_cd like concat(mItemSubCategoryID_cd,'%')
and mast.itemclassid_cd like concat(mItemClassID_cd,'%')
and mast.itemconsignmentid_cd like concat(mItemConsignmentID_cd,'%')
and dtl.itemid_cd like concat(mItemID_cd,'%')
and mast.itemname_tx like concat(mItemName_tx,'%')
and hdr.paytypeid_cd like concat(mPayTypeID_cd,'%')
and (hdr.sidate_dt between mStartDate_dt and mEndDate_dt)
and hdr.paytypeid_cd = 4
group by dept.itemdepartmentname_tx, dtl.itemid_cd order by  paytypeid_cd, dept.itemdepartmentname_tx,  mTotal, dtl.itemid_cd)
union
(select 'COST OF STOCK-TRANSFER' as paytype, mStartDate_dt, mEndDate_dt, dtl.itemid_cd, '4' as paytypeid_cd, mast.itemname_tx, dept.itemdepartmentname_tx, sum(dtl.Qty_no) as mTotal, sum(dtl.Qty_no * dtl.central_no) as mTselling from tb_tstocktransferohdr as hdr
inner join tb_tstocktransferodtl as dtl on hdr.stid_cd = dtl.stid_cd
inner join gng_master.tb_mitem as mast on dtl.itemid_cd = mast.itemid_cd
inner join gng_master.tb_mitemdepartment as dept on mast.itemdepartmentid_cd = dept.itemdepartmentid_cd
where dept.itemdepartmentid_cd like concat(mItemDepartmentID_cd,'%')
and mast.itemcategoryid_cd like concat(mItemCategoryID_cd,'%')
and mast.itemsubcategoryid_cd like concat(mItemSubCategoryID_cd,'%')
and mast.itemclassid_cd like concat(mItemClassID_cd,'%')
and mast.itemconsignmentid_cd like concat(mItemConsignmentID_cd,'%')
and dtl.itemid_cd like concat(mItemID_cd,'%')
and mast.itemname_tx like concat(mItemName_tx,'%')
and (hdr.stdate_dt between mStartDate_dt and mEndDate_dt)
group by dept.itemdepartmentname_tx, dtl.itemid_cd order by  paytypeid_cd, dept.itemdepartmentname_tx,  mTotal, dtl.itemid_cd)
union
(select 'COST OF ADJUSTMENT OUT' as paytype, mStartDate_dt, mEndDate_dt, dtl.itemid_cd, '4' as paytypeid_cd, mast.itemname_tx, dept.itemdepartmentname_tx, sum(dtl.Qty_no) as mTotal, sum(dtl.Qty_no * dtl.central_no) as mTselling from tb_tadjustmentouthdr as hdr
inner join tb_tadjustmentoutdtl as dtl on hdr.aoid_cd = dtl.aoid_cd
inner join gng_master.tb_mitem as mast on dtl.itemid_cd = mast.itemid_cd
inner join gng_master.tb_mitemdepartment as dept on mast.itemdepartmentid_cd = dept.itemdepartmentid_cd
where dept.itemdepartmentid_cd like concat(mItemDepartmentID_cd,'%')
and mast.itemcategoryid_cd like concat(mItemCategoryID_cd,'%')
and mast.itemsubcategoryid_cd like concat(mItemSubCategoryID_cd,'%')
and mast.itemclassid_cd like concat(mItemClassID_cd,'%')
and mast.itemconsignmentid_cd like concat(mItemConsignmentID_cd,'%')
and dtl.itemid_cd like concat(mItemID_cd,'%')
and mast.itemname_tx like concat(mItemName_tx,'%')
and (hdr.aodate_dt between mStartDate_dt and mEndDate_dt)
group by dept.itemdepartmentname_tx, dtl.itemid_cd order by  paytypeid_cd, dept.itemdepartmentname_tx,  mTotal, dtl.itemid_cd)
union
(select 'COST OF RESERVATION' as paytype, mStartDate_dt, mEndDate_dt, dtl.itemid_cd, hdr.paytypeid_cd as paytypeid_cd, mast.itemname_tx, dept.itemdepartmentname_tx, sum(dtl.Qty_no) as mTotal, sum(dtl.Qty_no * dtl.central_no) as mTselling  from tb_tsalesinvoicehdr as hdr
inner join tb_tsalesinvoicedtl as dtl on hdr.siid_cd = dtl.siid_cd
inner join gng_master.tb_mitem as mast on dtl.itemid_cd = mast.itemid_cd
inner join gng_master.tb_mitemdepartment as dept on mast.itemdepartmentid_cd = dept.itemdepartmentid_cd
where dept.itemdepartmentid_cd like concat(mItemDepartmentID_cd,'%')
and mast.itemcategoryid_cd like concat(mItemCategoryID_cd,'%')
and mast.itemsubcategoryid_cd like concat(mItemSubCategoryID_cd,'%')
and mast.itemclassid_cd like concat(mItemClassID_cd,'%')
and mast.itemconsignmentid_cd like concat(mItemConsignmentID_cd,'%')
and dtl.itemid_cd like concat(mItemID_cd,'%')
and mast.itemname_tx like concat(mItemName_tx,'%')
and hdr.paytypeid_cd like concat(mPayTypeID_cd,'%')
and (hdr.sidate_dt between mStartDate_dt and mEndDate_dt)
and hdr.paytypeid_cd = 6
group by dept.itemdepartmentname_tx, dtl.itemid_cd order by  paytypeid_cd, dept.itemdepartmentname_tx,  mTotal, dtl.itemid_cd)
union
(select 'COST OF ACCOUNT RECEIVABLE' as paytype, mStartDate_dt, mEndDate_dt, dtl.itemid_cd, hdr.paytypeid_cd as paytypeid_cd, mast.itemname_tx, dept.itemdepartmentname_tx, sum(dtl.Qty_no) as mTotal, sum(dtl.Qty_no * dtl.central_no) as mTselling from tb_tsalesinvoicehdr as hdr
inner join tb_tsalesinvoicedtl as dtl on hdr.siid_cd = dtl.siid_cd
inner join gng_master.tb_mitem as mast on dtl.itemid_cd = mast.itemid_cd
inner join gng_master.tb_mitemdepartment as dept on mast.itemdepartmentid_cd = dept.itemdepartmentid_cd
where dept.itemdepartmentid_cd like concat(mItemDepartmentID_cd,'%')
and mast.itemcategoryid_cd like concat(mItemCategoryID_cd,'%')
and mast.itemsubcategoryid_cd like concat(mItemSubCategoryID_cd,'%')
and mast.itemclassid_cd like concat(mItemClassID_cd,'%')
and mast.itemconsignmentid_cd like concat(mItemConsignmentID_cd,'%')
and dtl.itemid_cd like concat(mItemID_cd,'%')
and mast.itemname_tx like concat(mItemName_tx,'%')
and hdr.paytypeid_cd like concat(mPayTypeID_cd,'%')
and (hdr.sidate_dt between mStartDate_dt and mEndDate_dt)
and hdr.paytypeid_cd = 14
group by dept.itemdepartmentname_tx, dtl.itemid_cd order by  paytypeid_cd, dept.itemdepartmentname_tx,  mTotal, dtl.itemid_cd);
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_Customer_Lookup`
--

DROP PROCEDURE IF EXISTS `sp_Customer_Lookup`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_Customer_Lookup`(IN mCustomerName VARCHAR(30))
BEGIN
        SELECT DISTINCT UPPER(a.HolderName_tx) AS HolderName_tx

        FROM tb_tsalesinvoicehdr a

        WHERE a.HolderName_tx LIKE CONCAT(mCustomerName,'%')

        ORDER BY a.HolderName_tx;

END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_Execute_Query`
--

DROP PROCEDURE IF EXISTS `sp_Execute_Query`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_Execute_Query`(IN mSql VARCHAR(3000))
BEGIN
     SET @sql = mSql;
     PREPARE stmt FROM @sql;
     EXECUTE stmt;
     DEALLOCATE PREPARE stmt;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_GeneralJournalDTL_Insert`
--

DROP PROCEDURE IF EXISTS `sp_GeneralJournalDTL_Insert`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_GeneralJournalDTL_Insert`(IN mGJID_cd VARCHAR(15),
                                                              IN mSeq_no INTEGER,
                                                              IN mAccountID_cd VARCHAR(5),
                                                              IN mSubsidiaryID_cd VARCHAR(20),
                                                              IN mDebitAmount_no DOUBLE,
                                                              IN mCreditAmount_no DOUBLE)
BEGIN
     INSERT INTO tb_tgeneraljournaldtl(GJID_cd,
            		           Seq_no,
	    		           AccountID_cd,
	    		           SubsidiaryID_cd,
                                       DebitAmount_no,
	    		           CreditAmount_no)
		  	      VALUES(mGJID_cd,
	            		   mSeq_no,
		    		   mAccountID_cd,
		    		   mSubsidiaryID_cd,
		    		   mDebitAmount_no,
		    		   mCreditAmount_no);
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_GeneralJournalHDR_Insert`
--

DROP PROCEDURE IF EXISTS `sp_GeneralJournalHDR_Insert`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_GeneralJournalHDR_Insert`(IN mEmployeeID_cd VARCHAR(15), IN mGJID_cd VARCHAR(15), IN mGJDate_dt DATE, IN mReferenceNo varchar(15), IN mAmount_no DOUBLE, IN mParticular_tx VARCHAR(255), IN mBaseline LONGTEXT)
BEGIN
 
     INSERT INTO tb_tgeneraljournalhdr(GJID_cd,
				       GJDate_dt, 
     					ReferenceID_cd,
			               Amount_no,
                                       Particular_tx,
                                       Post_yn,
                                       Baseline)
			        VALUES(mGJID_cd,
				       mGJDate_dt,
                    	mReferenceNo,
                                       mAmount_no,
                                       mParticular_tx,
                                       '0',
                                       mBaseline);
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_GeneralJournalHDR_Update`
--

DROP PROCEDURE IF EXISTS `sp_GeneralJournalHDR_Update`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_GeneralJournalHDR_Update`(IN mEmployeeID_cd VARCHAR(15), IN mGJID_cd VARCHAR(15), IN mGJID_cd_ VARCHAR(15), IN mGJDate_dt DATE, IN mReferenceNo varchar(15), IN mAmount_no DOUBLE, IN mStatus VARCHAR(1), IN mParticular_tx VARCHAR(255), IN mBaseline LONGTEXT)
BEGIN
     DELETE FROM tb_tgeneraljournalhdr
     WHERE GJID_cd = mGJID_cd_;
     INSERT INTO tb_tgeneraljournalhdr(GJID_cd,
                                       GJDate_dt,
                                       ReferenceID_cd,
                                       Amount_no,
                                       Particular_tx,
                                       Post_yn,
                                       Baseline)
                                VALUES(mGJID_cd,
                                       mGJDate_dt,
                                       mReferenceNo,
                                       mAmount_no,
                                       mParticular_tx,
                                       mStatus,
                                       mBaseline);
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_GeneralJournalHDR_Update_`
--

DROP PROCEDURE IF EXISTS `sp_GeneralJournalHDR_Update_`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_GeneralJournalHDR_Update_`(IN mGJID_cd VARCHAR(15))
BEGIN
declare mAmount double;
set @mAmount =(select sum(DebitAmount_no) as amt from tb_tgeneraljournaldtl where GJID_cd = mGJID_cd);
update tb_tgeneraljournalhdr set Amount_no = @mAmount where GJID_cd = mGJID_cd;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_GeneralJournal_Delete`
--

DROP PROCEDURE IF EXISTS `sp_GeneralJournal_Delete`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_GeneralJournal_Delete`(IN mEmployeeID_cd VARCHAR(15), IN mGJID_cd VARCHAR(15), IN mParticular_tx VARCHAR(5000))
BEGIN
 DELETE FROM tb_tgeneraljournalhdr
     WHERE GJID_cd = mGJID_cd;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_GeneralJournal_RecSelect`
--

DROP PROCEDURE IF EXISTS `sp_GeneralJournal_RecSelect`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_GeneralJournal_RecSelect`(IN mGJID_cd VARCHAR(15))
BEGIN
        SELECT a.GJID_cd,
               a.GJDate_dt,
               a.Amount_no, 
               a.ReferenceID_cd,
               a.Particular_tx,
               b.Seq_no,
               CASE LENGTH(IFNULL(b.SubsidiaryID_cd,''))
                       WHEN 0 THEN b.AccountID_cd
                       WHEN 7 THEN b.SubsidiaryID_cd
                       ELSE b.AccountID_cd END AS AccountID_cd,
               c.AccountDesc_tx,
               CASE IFNULL(b.SubsidiaryID_cd,'')
                       WHEN '' THEN ''
                       ELSE b.SubsidiaryID_cd END AS SubsidiaryID_cd,
               IFNULL(d.SubsidiaryDesc_tx,'') AS SubsidiaryDesc_tx,
               IFNULL(b.DebitAmount_no,0) As DebitAmount_no,
               IFNULL(b.CreditAmount_no,0) AS CreditAmount_no
        FROM tb_tgeneraljournalhdr a
        LEFT JOIN
        (SELECT *
        FROM tb_tgeneraljournaldtl) b
        ON a.GJID_cd = b.GJID_cd
        LEFT JOIN
        (SELECT *
        FROM tb_mcoahdr) c
        ON b.AccountID_cd = c.AccountID_cd
        LEFT JOIN
        (SELECT *
        FROM tb_mcoadtl) d
        ON b.SubsidiaryID_cd = d.SubsidiaryID_cd
        WHERE a.GJID_cd = mGJID_cd
        ORDER BY a.GJDate_dt DESC,
	         a.GJID_cd DESC,
	         b.Seq_no ASC;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_GeneralJournal_Search`
--

DROP PROCEDURE IF EXISTS `sp_GeneralJournal_Search`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_GeneralJournal_Search`(IN mGJID_cd VARCHAR(15),
                                                            IN mStartDate_dt DATE,
                                                            IN mEndDate_dt DATE,
                                                            IN mPost_yn VARCHAR(1),
                                                            IN mLimit VARCHAR(20))
BEGIN
        SET @mSql =
        CONCAT('SELECT DISTINCT a.GJID_cd,
                                a.GJDate_dt,
                                a.ReferenceID_cd,
                                a.Particular_tx,
                                a.Amount_no,
                                a.Post_yn,
                                CASE a.Post_yn
                                        WHEN ''0'' THEN '' ''
                                        WHEN ''1'' THEN ''P''
                                        WHEN ''2'' THEN ''C'' END AS PostDesc_tx

                FROM tb_tgeneraljournalhdr a

                WHERE   a.GJID_cd LIKE CONCAT(''',mGJID_cd,'%'') AND
                        a.GJDate_dt BETWEEN ''',mStartDate_dt,''' AND ''',mEndDate_dt,''' AND
                        a.Post_yn LIKE CONCAT(''',mPost_yn,'%'')

                ORDER BY a.GJID_cd ASC

                LIMIT ', mLimit);
        PREPARE stmtl FROM @mSql;
        EXECUTE stmtl;
        DEALLOCATE PREPARE stmtl;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_GeneralJournal_Select`
--

DROP PROCEDURE IF EXISTS `sp_GeneralJournal_Select`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_GeneralJournal_Select`()
BEGIN
     SELECT *
     FROM tb_tgeneraljournalhdr a
     ORDER BY GJID_cd ASC;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_GeneralJournal_Verify`
--

DROP PROCEDURE IF EXISTS `sp_GeneralJournal_Verify`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_GeneralJournal_Verify`(IN mGJID_cd VARCHAR(15),
                                                           IN mGJID_cd_ VARCHAR(15))
BEGIN
     SELECT *
     FROM tb_tgeneraljournalhdr a
     WHERE a.GJID_cd <> mGJID_cd AND
           a.GJID_cd = mGJID_cd_;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_GeneralLedger_Select`
--

DROP PROCEDURE IF EXISTS `sp_GeneralLedger_Select`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_GeneralLedger_Select`(IN mAccountID_cd VARCHAR(5), IN mSubsidiaryID_cd VARCHAR(20), IN mJournal_tx VARCHAR(1), IN mStartDate_dt DATE, IN mEndDate_dt DATE, IN mStatus varchar(1))
BEGIN



		declare mStatus_  varchar(1);
        set mStatus_ = CONCAT(mStatus,'%');



select CONCAT('generalledger_search2.php?Start=2&ControlNo=',AccountID_cd,'&SubsidiaryNo=',SubsidiaryID_cd,'&Journal=',mJournal_tx,'',
                        '&Month1=',MONTH(mStartDate_dt),'&Day1=',DAY(mStartDate_dt),'&Year1=',YEAR(mStartDate_dt),
                        '&Month2=',MONTH(mEndDate_dt),'&Day2=',DAY(mEndDate_dt),'&Year2=',YEAR(mEndDate_dt),'&Status=',mStatus_) AS ModuleDesc_tx, MONTH(mStartDate_dt) as Month1, DAY(mStartDate_dt) as Day1, YEAR(mStartDate_dt) as Year1, MONTH(mEndDate_dt) as Month2, DAY(mEndDate_dt) as Day2, YEAR(mEndDate_dt) as Year2,'' as Ref_tx,AccountDesc_tx as Reference_tx, AccountID_cd as DocNo_tx, AccountID_cd as DocDate_dt, '' as CheckNo_tx,SubsidiaryID_cd as PaymasterName_tx, SubsidiaryDesc_tx as  Particular_tx, Debit,Credit,AccountID_cd,SubsidiaryID_cd,'' as Seq_no, '' as Journal_tx, '' as Post_yn, Debit_yn,'' as SubsidiaryDesc_tx    from

(select b.AccountID_cd, b.Debit_yn, b.AccountDesc_tx, b.SubsidiaryID_cd, b.Subsidiarydesc_tx, CASE WHEN sum(IFNULL(debit,0))  > sum(ifnull(credit,0)) THEN ROUND(sum(IFNULL(debit,0)) -  sum(IFNULL(credit,0)),4) ELSE 0 END AS debit, CASE WHEN sum(IFNULL(credit,0))  > sum(ifnull(debit,0)) THEN ROUND(sum(IFNULL(credit,0)) -  sum(IFNULL(debit,0)),4) ELSE 0 END AS credit from 

(select a.AccountID_cd,a.Debit_yn, a.AccountDesc_tx,a.SubsidiaryID_cd,a.Subsidiarydesc_tx,sum(a.DebitAmount_no) as debit,sum(a.CreditAmount_no) as credit FROM

(select 1 as Journal,dtl.AccountID_cd, masthdr.Debit_yn, masthdr.AccountDesc_tx,dtl.SubsidiaryID_cd, mastdtl.Subsidiarydesc_tx,dtl.DebitAmount_no,dtl.CreditAmount_no from tb_tcashreceiptshdr as hdr 
left join tb_tcashreceiptsdtl as dtl on hdr.crid_cd=dtl.crid_cd
left join tb_mcoahdr as masthdr on masthdr.AccountID_cd = dtl.AccountID_cd
left join tb_mcoadtl as mastdtl on mastdtl.SubsidiaryID_cd = dtl.SubsidiaryID_cd
where   dtl.AccountID_cd like concat(mAccountID_cd,'%') AND
dtl.SubsidiaryID_cd = CASE mSubsidiaryID_cd
						WHEN '' THEN dtl.SubsidiaryID_cd
						ELSE mSubsidiaryID_cd END AND
hdr.crdate_dt between  mStartDate_dt AND mEndDate_dt AND hdr.Post_yn like mStatus_

union all
select  2 as Journal, dtl.AccountID_cd, masthdr.Debit_yn, masthdr.AccountDesc_tx,dtl.SubsidiaryID_cd, mastdtl.Subsidiarydesc_tx,dtl.DebitAmount_no,dtl.CreditAmount_no from tb_tpurchaseshdr as hdr 
left join tb_tpurchasesdtl as dtl on hdr.pbid_cd=dtl.pbid_cd
left join tb_mcoahdr as masthdr on masthdr.AccountID_cd = dtl.AccountID_cd
left join tb_mcoadtl as mastdtl on mastdtl.SubsidiaryID_cd = dtl.SubsidiaryID_cd
where   dtl.AccountID_cd like concat(mAccountID_cd,'%') AND
dtl.SubsidiaryID_cd = CASE mSubsidiaryID_cd
						WHEN '' THEN dtl.SubsidiaryID_cd
						ELSE mSubsidiaryID_cd END AND
hdr.pbdate_dt between  mStartDate_dt AND mEndDate_dt AND hdr.Post_yn like mStatus_

union all
select 3 as Journal,dtl.AccountID_cd, masthdr.Debit_yn, masthdr.AccountDesc_tx,dtl.SubsidiaryID_cd, mastdtl.Subsidiarydesc_tx,dtl.DebitAmount_no,dtl.CreditAmount_no from tb_tcashsaleshdr as hdr 
left join tb_tcashsalesdtl as dtl on hdr.csid_cd=dtl.csid_cd
left join tb_mcoahdr as masthdr on masthdr.AccountID_cd = dtl.AccountID_cd
left join tb_mcoadtl as mastdtl on mastdtl.SubsidiaryID_cd = dtl.SubsidiaryID_cd
where   dtl.AccountID_cd like concat(mAccountID_cd,'%') AND
dtl.SubsidiaryID_cd = CASE mSubsidiaryID_cd
						WHEN '' THEN dtl.SubsidiaryID_cd
						ELSE mSubsidiaryID_cd END AND
hdr.csdate_dt between  mStartDate_dt AND mEndDate_dt AND hdr.Post_yn like mStatus_

union all
select 4 as Journal,dtl.AccountID_cd, masthdr.Debit_yn, masthdr.AccountDesc_tx,dtl.SubsidiaryID_cd, mastdtl.Subsidiarydesc_tx,dtl.DebitAmount_no,dtl.CreditAmount_no from tb_tchargesaleshdr as hdr 
left join tb_tchargesalesdtl as dtl on hdr.bsid_cd=dtl.bsid_cd
left join tb_mcoahdr as masthdr on masthdr.AccountID_cd = dtl.AccountID_cd
left join tb_mcoadtl as mastdtl on mastdtl.SubsidiaryID_cd = dtl.SubsidiaryID_cd
where   dtl.AccountID_cd like concat(mAccountID_cd,'%') AND
dtl.SubsidiaryID_cd = CASE mSubsidiaryID_cd
						WHEN '' THEN dtl.SubsidiaryID_cd
						ELSE mSubsidiaryID_cd END AND
hdr.bsdate_dt between  mStartDate_dt AND mEndDate_dt AND hdr.Post_yn like mStatus_

union all
select 5 as Journal,dtl.AccountID_cd, masthdr.Debit_yn, masthdr.AccountDesc_tx,dtl.SubsidiaryID_cd, mastdtl.Subsidiarydesc_tx,dtl.DebitAmount_no,dtl.CreditAmount_no from tb_tcheckdisbursementhdr as hdr 
left join tb_tcheckdisbursementdtl as dtl on hdr.cdid_cd=dtl.cdid_cd
left join tb_mcoahdr as masthdr on masthdr.AccountID_cd = dtl.AccountID_cd
left join tb_mcoadtl as mastdtl on mastdtl.SubsidiaryID_cd = dtl.SubsidiaryID_cd
where   dtl.AccountID_cd like concat(mAccountID_cd,'%') AND
dtl.SubsidiaryID_cd = CASE mSubsidiaryID_cd
						WHEN '' THEN dtl.SubsidiaryID_cd
						ELSE mSubsidiaryID_cd END AND
hdr.cddate_dt between  mStartDate_dt AND mEndDate_dt AND hdr.Post_yn like mStatus_
union all
select 6 as Journal,dtl.AccountID_cd, masthdr.Debit_yn, masthdr.AccountDesc_tx,dtl.SubsidiaryID_cd, mastdtl.Subsidiarydesc_tx,dtl.DebitAmount_no,dtl.CreditAmount_no from tb_tgeneraljournalhdr as hdr 
left join tb_tgeneraljournaldtl as dtl on hdr.gjid_cd=dtl.gjid_cd
left join tb_mcoahdr as masthdr on masthdr.AccountID_cd = dtl.AccountID_cd
left join tb_mcoadtl as mastdtl on mastdtl.SubsidiaryID_cd = dtl.SubsidiaryID_cd
where   dtl.AccountID_cd like concat(mAccountID_cd,'%') AND
dtl.SubsidiaryID_cd = CASE mSubsidiaryID_cd
						WHEN '' THEN dtl.SubsidiaryID_cd
						ELSE mSubsidiaryID_cd END AND
hdr.gjdate_dt between  mStartDate_dt AND mEndDate_dt AND hdr.Post_yn like mStatus_) as a
where a.Journal =mJournal_tx OR mJournal_tx =0 group by a.AccountID_cd,a.AccountDesc_tx,a.SubsidiaryID_cd,a.Subsidiarydesc_tx
order by a.SubsidiaryID_cd) as b group by b.AccountID_cd, b.AccountDesc_tx, b.SubsidiaryID_cd) as c;

select mStartDate_dt, mEndDate_dt;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_GeneralLedger_Select_`
--

DROP PROCEDURE IF EXISTS `sp_GeneralLedger_Select_`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_GeneralLedger_Select_`(IN mAccountID_cd VARCHAR(5), IN mSubsidiaryID_cd VARCHAR(20), IN mJournal_tx VARCHAR(1), IN mStartDate_dt DATE, IN mEndDate_dt DATE, IN mStatus varchar(1))
BEGIN


       declare mStatus_  varchar(1);
        set mStatus_ = CONCAT(mStatus,'%');

        SELECT a.*,
               b.Debit_yn,
               IFNULL(c.SubsidiaryDesc_tx,'') AS SubsidiaryDesc_tx

        FROM

                (SELECT 'Voucher#' AS 'Ref_tx',
                        CONCAT('CN# ',b.CheckNo_tx) AS 'Reference_tx',
                        b.CDID_cd AS 'DocNo_tx',
                        b.CDDate_dt AS 'DocDate_dt',
                        b.CheckNo_tx,
                        c.PaymasterName_tx,
                        b.Particular_tx,
                        CONCAT('checkdisbursement_search.php?Start=1&Page=1&ControlDate=&ReferenceNo=&PaymasterID=&Status=',
                        '&Month1=',(MONTH(mStartDate_dt)+0),'&Day1=',DAY(mStartDate_dt),'&Year1=',YEAR(mStartDate_dt),
                        '&Month2=',(MONTH(mEndDate_dt)+0),'&Day2=',DAY(mEndDate_dt),'&Year2=',YEAR(mEndDate_dt),
                        '&ControlNo=',b.CDID_cd) AS 'ModuleDesc_tx',
                        'checkdisbursement_search.php' as 'Page',
                        MONTH(mStartDate_dt) as 'Month1',
                        DAY(mStartDate_dt) as 'Day1', 
                        YEAR(mStartDate_dt) as 'Year1', 
                        MONTH(mEndDate_dt) as 'Month2', 
                        DAY(mEndDate_dt) as 'Day2', 
                        YEAR(mEndDate_dt) as 'Year2',
                        IFNULL(a.DebitAmount_no,0) As 'Debit',
                        IFNULL(a.CreditAmount_no,0) AS 'Credit',
                        a.AccountID_cd,
                        a.SubsidiaryID_cd,
                        a.Seq_no,
                        b.Journal_tx,
                        b.Post_yn

                FROM tb_tcheckdisbursementdtl AS a

                LEFT JOIN
                (SELECT CDID_cd,
	                CDDate_dt,
                    PaymasterID_cd,
	                Particular_tx,
                        CheckNo_tx,
	                '5' AS 'Journal_tx',
                        Post_yn

                FROM tb_tcheckdisbursementhdr WHERE CDDate_dt BETWEEN mStartDate_dt AND mEndDate_dt AND Post_yn like mStatus_) AS b
                ON a.CDID_cd = b.CDID_cd

                LEFT JOIN tb_mpaymaster AS c
                ON b.PaymasterID_cd = c.PaymasterID_cd

                WHERE   a.AccountID_cd like concat(mAccountID_cd,'%') AND
                        a.SubsidiaryID_cd = CASE mSubsidiaryID_cd
			                        WHEN '' THEN a.SubsidiaryID_cd
			                        ELSE mSubsidiaryID_cd END AND
                        ('5' = mJournal_tx OR mJournal_tx = '0') AND
                        b.CDDate_dt BETWEEN mStartDate_dt AND mEndDate_dt AND b.Post_yn like mStatus_



     


                UNION
               






                SELECT 'JV#' AS 'Ref_tx',
                        '' AS 'Reference_tx',
                        b.GJID_cd AS 'DocNo_tx',
                        b.GJDate_dt AS 'DocDate_dt',
                        '' AS 'CheckNo_tx',
                        c.PaymasterName_tx,
                        b.Particular_tx,
                        CONCAT('generaljournal_search.php?Start=1&ControlDate=&Status=&PaymasterID=',
                        '&Month1=',(MONTH(mStartDate_dt)+0),'&Day1=',DAY(mStartDate_dt),'&Year1=',YEAR(mStartDate_dt),
                        '&Month2=',(MONTH(mEndDate_dt)+0),'&Day2=',DAY(mEndDate_dt),'&Year2=',YEAR(mEndDate_dt),
                        '&ControlNo=',b.GJID_cd) AS 'ModuleDesc_tx',
                        'generaljournal_search.php' as 'Page',
                        MONTH(mStartDate_dt) as 'Month1',
                        DAY(mStartDate_dt) as 'Day1', 
                        YEAR(mStartDate_dt) as 'Year1', 
                        MONTH(mEndDate_dt) as 'Month2', 
                        DAY(mEndDate_dt) as 'Day2', 
                        YEAR(mEndDate_dt) as 'Year2',
                        IFNULL(a.DebitAmount_no,0) As 'Debit',
                        IFNULL(a.CreditAmount_no,0) AS 'Credit',
                        a.AccountID_cd,
                        a.SubsidiaryID_cd,
                        a.Seq_no,
                        b.Journal_tx,
                        b.Post_yn

                FROM tb_tgeneraljournaldtl AS a

                LEFT JOIN
                (SELECT GJID_cd,
	                      GJDate_dt,
                        '' AS PaymasterID_cd,
                        Particular_tx,
	                      '6' AS 'Journal_tx',
                        Post_yn,
                        baseline

                FROM tb_tgeneraljournalhdr WHERE GJDate_dt BETWEEN mStartDate_dt AND mEndDate_dt AND Post_yn like mStatus_) AS b
                ON a.GJID_cd = b.GJID_cd

                LEFT JOIN tb_mpaymaster AS c
                ON b.baseline = c.PaymasterID_cd

                WHERE   a.AccountID_cd like concat(mAccountID_cd,'%') AND
                        a.SubsidiaryID_cd = CASE mSubsidiaryID_cd
			                        WHEN '' THEN a.SubsidiaryID_cd
			                        ELSE mSubsidiaryID_cd END AND
                        ('6' = mJournal_tx OR mJournal_tx = '0') AND
                        b.GJDate_dt BETWEEN mStartDate_dt AND mEndDate_dt AND b.Post_yn like mStatus_
                        
   
    

                UNION







                SELECT 'CR#' AS 'Ref_tx',
                        '' AS 'Reference_tx',
                        b.CRID_cd AS 'DocNo_tx',
                        b.CRDate_dt AS 'DocDate_dt',
                        '' AS 'CheckNo_tx',
                        c.PaymasterName_tx,
                        b.Particular_tx,
                        CONCAT('cashreceipts_search.php?Start=1&ControlDate=&Status=&PaymasterID=',
                        '&Month1=',(MONTH(mStartDate_dt)+0),'&Day1=',DAY(mStartDate_dt),'&Year1=',YEAR(mStartDate_dt),
                        '&Month2=',(MONTH(mEndDate_dt)+0),'&Day2=',DAY(mEndDate_dt),'&Year2=',YEAR(mEndDate_dt),
                        '&ControlNo=',b.CRID_cd) AS 'ModuleDesc_tx',
                        'cashreceipts_search.php' as 'Page',
                        MONTH(mStartDate_dt) as 'Month1',
                        DAY(mStartDate_dt) as 'Day1', 
                        YEAR(mStartDate_dt) as 'Year1', 
                        MONTH(mEndDate_dt) as 'Month2', 
                        DAY(mEndDate_dt) as 'Day2', 
                        YEAR(mEndDate_dt) as 'Year2',
                        IFNULL(a.DebitAmount_no,0) As 'Debit',
                        IFNULL(a.CreditAmount_no,0) AS 'Credit',
                        a.AccountID_cd,
                        a.SubsidiaryID_cd,
                        a.Seq_no,
                        b.Journal_tx,
                        b.Post_yn

                FROM tb_tcashreceiptsdtl AS a

                LEFT JOIN
                (SELECT CRID_cd,
	                      CRDate_dt,
                        '' AS PaymasterID_cd,
                        Particular_tx,
	                      '1' AS 'Journal_tx',
                        Post_yn,
                        baseline

                FROM tb_tcashreceiptshdr WHERE CRDate_dt BETWEEN mStartDate_dt AND mEndDate_dt AND Post_yn like mStatus_ ) AS b
                ON a.CRID_cd = b.CRID_cd

                LEFT JOIN tb_mpaymaster AS c
                ON b.baseline = c.PaymasterID_cd

                WHERE   a.AccountID_cd like concat(mAccountID_cd,'%') AND
                        a.SubsidiaryID_cd = CASE mSubsidiaryID_cd
			                        WHEN '' THEN a.SubsidiaryID_cd
			                        ELSE mSubsidiaryID_cd END AND
                        ('1' = mJournal_tx OR mJournal_tx = '0') AND
                        b.CRDate_dt BETWEEN mStartDate_dt AND mEndDate_dt  AND b.Post_yn like mStatus_
                        
   

                UNION







                SELECT 'CS#' AS 'Ref_tx',
                        '' AS 'Reference_tx',
                        b.CSID_cd AS 'DocNo_tx',
                        b.CSDate_dt AS 'DocDate_dt',
                        '' AS 'CheckNo_tx',
                        c.PaymasterName_tx,
                        b.Particular_tx,
                        CONCAT('cashsales_search.php?Start=1&ControlDate=&Status=&PaymasterID=',
                        '&Month1=',(MONTH(mStartDate_dt)+0),'&Day1=',DAY(mStartDate_dt),'&Year1=',YEAR(mStartDate_dt),
                        '&Month2=',(MONTH(mEndDate_dt)+0),'&Day2=',DAY(mEndDate_dt),'&Year2=',YEAR(mEndDate_dt),
                        '&ControlNo=',b.CSID_cd) AS 'ModuleDesc_tx', 
                       'cashsales_search.php' as 'Page',
                        MONTH(mStartDate_dt) as 'Month1',
                        DAY(mStartDate_dt) as 'Day1', 
                        YEAR(mStartDate_dt) as 'Year1', 
                        MONTH(mEndDate_dt) as 'Month2', 
                        DAY(mEndDate_dt) as 'Day2', 
                        YEAR(mEndDate_dt) as 'Year2',
                        IFNULL(a.DebitAmount_no,0) As 'Debit',
                        IFNULL(a.CreditAmount_no,0) AS 'Credit',
                        a.AccountID_cd,
                        a.SubsidiaryID_cd,
                        a.Seq_no,
                        b.Journal_tx,
                        b.Post_yn

                FROM tb_tcashsalesdtl AS a

                LEFT JOIN
                (SELECT CSID_cd,
	                      CSDate_dt,
                        '' AS PaymasterID_cd,
                        Particular_tx,
	                      '3' AS 'Journal_tx',
                        Post_yn,
                        baseline

                FROM tb_tcashsaleshdr WHERE CSDate_dt BETWEEN mStartDate_dt AND mEndDate_dt AND Post_yn like mStatus_) AS b
                ON a.CSID_cd = b.CSID_cd

                LEFT JOIN tb_mpaymaster AS c
                ON b.baseline = c.PaymasterID_cd

                WHERE   a.AccountID_cd like concat(mAccountID_cd,'%') AND
                        a.SubsidiaryID_cd = CASE mSubsidiaryID_cd
			                        WHEN '' THEN a.SubsidiaryID_cd
			                        ELSE mSubsidiaryID_cd END AND
                        ('3' = mJournal_tx OR mJournal_tx = '0') AND
                        b.CSDate_dt BETWEEN mStartDate_dt AND mEndDate_dt  AND b.Post_yn like mStatus_
                        
          

                UNION







                SELECT 'BS#' AS 'Ref_tx',
                        '' AS 'Reference_tx',
                        b.BSID_cd AS 'DocNo_tx',
                        b.BSDate_dt AS 'DocDate_dt',
                        '' AS 'CheckNo_tx',
                        c.PaymasterName_tx,
                        b.Particular_tx,
                        CONCAT('chargesales_search.php?Start=1&ControlDate=&Status=&PaymasterID=',
                        '&Month1=',(MONTH(mStartDate_dt)+0),'&Day1=',DAY(mStartDate_dt),'&Year1=',YEAR(mStartDate_dt),
                        '&Month2=',(MONTH(mEndDate_dt)+0),'&Day2=',DAY(mEndDate_dt),'&Year2=',YEAR(mEndDate_dt),
                        '&ControlNo=',b.BSID_cd) AS 'ModuleDesc_tx',
                        'chargesales_search.php' as 'Page',
                        MONTH(mStartDate_dt) as 'Month1',
                        DAY(mStartDate_dt) as 'Day1', 
                        YEAR(mStartDate_dt) as 'Year1', 
                        MONTH(mEndDate_dt) as 'Month2', 
                        DAY(mEndDate_dt) as 'Day2', 
                        YEAR(mEndDate_dt) as 'Year2',
                        IFNULL(a.DebitAmount_no,0) As 'Debit',
                        IFNULL(a.CreditAmount_no,0) AS 'Credit',
                        a.AccountID_cd,
                        a.SubsidiaryID_cd,
                        a.Seq_no,
                        b.Journal_tx,
                        b.Post_yn

                FROM tb_tchargesalesdtl AS a

                LEFT JOIN
                (SELECT BSID_cd,
	                      BSDate_dt,
                        '' AS PaymasterID_cd,
                        Particular_tx,
	                      '4' AS 'Journal_tx',
                        Post_yn,
                        baseline

                FROM tb_tchargesaleshdr WHERE BSDate_dt BETWEEN mStartDate_dt AND mEndDate_dt AND Post_yn like mStatus_) AS  b
                ON a.BSID_cd = b.BSID_cd

                LEFT JOIN tb_mpaymaster AS c
                ON b.baseline = c.PaymasterID_cd

                WHERE   a.AccountID_cd like concat(mAccountID_cd,'%') AND
                        a.SubsidiaryID_cd = CASE mSubsidiaryID_cd
			                        WHEN '' THEN a.SubsidiaryID_cd
			                        ELSE mSubsidiaryID_cd END AND
                        ('4' = mJournal_tx OR mJournal_tx = '0') AND
                        b.BSDate_dt BETWEEN mStartDate_dt AND mEndDate_dt AND b.Post_yn like mStatus_                        
   



                UNION







                SELECT 'PU#' AS 'Ref_tx',
                        '' AS 'Reference_tx',
                        b.PBID_cd AS 'DocNo_tx',
                        b.PBDate_dt AS 'DocDate_dt',
                        '' AS 'CheckNo_tx',
                        c.PaymasterName_tx,
                        b.Particular_tx,
                        CONCAT('purchases_search.php?Start=1&ControlDate=&Status=&PaymasterID=',
                        '&Month1=',(MONTH(mStartDate_dt)+0),'&Day1=',DAY(mStartDate_dt),'&Year1=',YEAR(mStartDate_dt),
                        '&Month2=',(MONTH(mEndDate_dt)+0),'&Day2=',DAY(mEndDate_dt),'&Year2=',YEAR(mEndDate_dt),
                        '&ControlNo=',b.PBID_cd) AS 'ModuleDesc_tx',
 						'purchases_search.php' as 'Page',
                        MONTH(mStartDate_dt) as 'Month1',
                        DAY(mStartDate_dt) as 'Day1', 
                        YEAR(mStartDate_dt) as 'Year1', 
                        MONTH(mEndDate_dt) as 'Month2', 
                        DAY(mEndDate_dt) as 'Day2', 
                        YEAR(mEndDate_dt) as 'Year2',                       
                        IFNULL(a.DebitAmount_no,0) As 'Debit',
                        IFNULL(a.CreditAmount_no,0) AS 'Credit',
                        a.AccountID_cd,
                        a.SubsidiaryID_cd,
                        a.Seq_no,
                        b.Journal_tx,
                        b.Post_yn

                FROM tb_tpurchasesdtl AS a

                LEFT JOIN
                (SELECT PBID_cd,
	                      PBDate_dt,
                        '' AS PaymasterID_cd,
                        Particular_tx,
	                      '2' AS 'Journal_tx',
                        Post_yn,
                        baseline

                FROM tb_tpurchaseshdr WHERE PBDate_dt BETWEEN mStartDate_dt AND mEndDate_dt AND Post_yn like mStatus_) AS b
                ON a.PBID_cd = b.PBID_cd

                LEFT JOIN tb_mpaymaster AS c
                ON b.baseline = c.PaymasterID_cd

                WHERE   a.AccountID_cd like concat(mAccountID_cd,'%') AND
                        a.SubsidiaryID_cd = CASE mSubsidiaryID_cd
			                        WHEN '' THEN a.SubsidiaryID_cd
			                        ELSE mSubsidiaryID_cd END AND
                        ('2' = mJournal_tx OR mJournal_tx = '0') AND
                        b.PBDate_dt BETWEEN mStartDate_dt AND mEndDate_dt AND b.Post_yn like mStatus_                 
                        
                        
                        
                        
                        ) AS a


        LEFT JOIN tb_mcoahdr AS b
        ON a.AccountID_cd = b.AccountID_cd

        LEFT JOIN tb_mcoadtl AS c
        ON a.SubsidiaryID_cd = c.SubsidiaryID_cd

        ORDER BY a.DocDate_dt ASC,
                 a.Journal_tx ASC,
                 a.Ref_tx ASC;
 


END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_ItemDepartment_Select`
--

DROP PROCEDURE IF EXISTS `sp_ItemDepartment_Select`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_ItemDepartment_Select`()
BEGIN
     SELECT *
     FROM tb_mitemdepartment
     ORDER BY ItemDepartmentName_tx;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_Paymaster_Delete`
--

DROP PROCEDURE IF EXISTS `sp_Paymaster_Delete`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_Paymaster_Delete`(IN mEmployeeID_cd VARCHAR(15),
                                                                  IN uCenterID_id INTEGER,
                                                                  IN mPaymasterID_cd VARCHAR(15),
                                                                  IN mPaymasterName_tx VARCHAR(80))
BEGIN
     INSERT INTO tb_paudittrail(DateExecuted_dt,
                                TimeExecuted_tm,
                                EmployeeID_cd,
                                CenterID_id,
                                Module_no,
                                Action_no,
                                DocNo_tx,
                                PrevValue_tx,
                                NewValue_tx,
                                Comment_tx,
                                IPID_cd)
                         VALUES(SYSDATE(),
                                CURTIME(),
                                mEmployeeID_cd,
                                uCenterID_id,
                                "1022",
                                "3",
                                mPaymasterID_cd,
                                mPaymasterName_tx,
                                "",
                                "",
                                (SELECT IPID_cd FROM tb_muser WHERE UserID_cd = mEmployeeID_cd));
     DELETE
     FROM tb_mpaymaster
     WHERE PaymasterID_cd = mPaymasterID_cd;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_Paymaster_Insert`
--

DROP PROCEDURE IF EXISTS `sp_Paymaster_Insert`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_Paymaster_Insert`(IN mEmployeeID_cd VARCHAR(15),
                                                                  IN mCenterID_id INTEGER,
                                                                  IN mPaymasterID_cd VARCHAR(15),
                                                                  IN mPaymasterName_tx VARCHAR(80),
                                                                  IN mTIN_tx VARCHAR(15),
                                                                  IN mTerms_no INTEGER,
                                                                  IN mAddress_tx VARCHAR(400),
                                                                  IN mTelNo_tx VARCHAR(30),
                                                                  IN mFaxNo_tx VARCHAR(30),
                                                                  IN mURL_tx VARCHAR(60),
                                                                  IN mEmail_tx VARCHAR(60),
		                                                  IN mContactPerson_tx VARCHAR(60),
                                                                  IN mPositionID_id INTEGER,
                                                                  IN mType_tx VARCHAR(1),
                                                                  IN mConsignmentID_cd VARCHAR(2),
                                                                  IN mBaseline LONGTEXT)
BEGIN
     INSERT INTO tb_paudittrail(DateExecuted_dt,
                                TimeExecuted_tm,
                                EmployeeID_cd,
                                CenterID_id,
                                Module_no,
                                Action_no,
                                DocNo_tx,
                                PrevValue_tx,
                                NewValue_tx,
                                Comment_tx,
                                IPID_cd)
                         VALUES(SYSDATE(),
                                CURTIME(),
                                mEmployeeID_cd,
                                mCenterID_id,
                                "1022",
                                "1",
                                "mPaymasterID_cd",
                                "",
                                mPaymasterName_tx,
                                "",
                                (SELECT IPID_cd FROM tb_muser WHERE UserID_cd = mEmployeeID_cd));
     INSERT INTO tb_mpaymaster(PaymasterID_cd,
			       PaymasterName_tx,
                               TIN_tx,
                               Terms_no,
                               Address_tx,
                               TelNo_tx,
                               FaxNo_tx,
                               URL_tx,
                               Email_tx,
                               ContactPerson_tx,
                               PositionID_id,
                               Type_tx,
                               ConsignmentID_cd,
                               Baseline)
		        VALUES(mPaymasterID_cd,
                               mPaymasterName_tx,
                               mTIN_tx,
                               mTerms_no,
                               mAddress_tx,
			       mTelNo_tx,
			       mFaxNo_tx,
			       mURL_tx,
			       mEmail_tx,
			       mContactPerson_tx,
			       mPositionID_id,
                               mType_tx,
                               mConsignmentID_cd,
                               mBaseline);
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_Paymaster_RecSelect`
--

DROP PROCEDURE IF EXISTS `sp_Paymaster_RecSelect`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_Paymaster_RecSelect`(IN mPaymasterID_cd VARCHAR(15))
BEGIN
     SELECT a.*
     FROM tb_mpaymaster a
     WHERE a.PaymasterID_cd = mPaymasterID_cd;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_Paymaster_Search`
--

DROP PROCEDURE IF EXISTS `sp_Paymaster_Search`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_Paymaster_Search`(IN mPaymasterName_tx VARCHAR(80),
                                                                  IN mConsignmentID_cd VARCHAR(2),
                                                                  IN mType_tx VARCHAR(1),
                                                                  IN mLimit VARCHAR(20))
BEGIN
        SET @mSql =
        CONCAT('SELECT a.PaymasterID_cd,
                       a.PaymasterName_tx,
                       a.TIN_tx,
                       a.Address_tx,
                       a.TelNo_tx,
                       a.Email_tx,
                       a.Type_tx,
                       a.ContactPerson_tx,
                       a.ConsignmentID_cd,
                       CASE a.Type_tx
                               WHEN ''A'' THEN ''Branch''
                               WHEN ''B'' THEN ''Customer''
                               WHEN ''C'' THEN ''Employee''
                               WHEN ''D'' THEN ''Others''
                               WHEN ''E'' THEN ''Supplier'' END AS TypeDesc_tx

                FROM tb_mpaymaster a

                WHERE   a.PaymasterName_tx LIKE CONCAT(''%',mPaymasterName_tx,'%'') AND
                        a.ConsignmentID_cd LIKE CONCAT(''%',mConsignmentID_cd,'%'') AND
                        a.Type_tx LIKE CONCAT(''',mType_tx,'%'')


                ORDER BY TypeDesc_tx,
                         a.PaymasterName_tx

                LIMIT ', mLimit);
        PREPARE stmtl FROM @mSql;
        EXECUTE stmtl;
        DEALLOCATE PREPARE stmtl;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_Paymaster_Select`
--

DROP PROCEDURE IF EXISTS `sp_Paymaster_Select`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_Paymaster_Select`(IN mPaymasterID_cd varchar(100))
BEGIN
       
        select PaymasterID_cd  from tb_tcheckdisbursementhdr where PaymasterID_cd like concat('',mPaymasterID_cd,'%');
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_Paymaster_Update`
--

DROP PROCEDURE IF EXISTS `sp_Paymaster_Update`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_Paymaster_Update`(IN mEmployeeID_cd VARCHAR(15),
                                                                  IN mCenterID_id INTEGER,
                                                                  IN mPaymasterID_cd VARCHAR(15),
                                                                  IN mPaymasterName_tx VARCHAR(80),
                                                                  IN mTIN_tx VARCHAR(15),
                                                                  IN mTerms_no INTEGER,
                                                                  IN mAddress_tx VARCHAR(400),
                                                                  IN mTelNo_tx VARCHAR(30),
                                                                  IN mFaxNo_tx VARCHAR(30),
                                                                  IN mURL_tx VARCHAR(60),
                                                                  IN mEmail_tx VARCHAR(60),
                                                                  IN mContactPerson_tx VARCHAR(60),
                                                                  IN mPositionID_id INTEGER,
                                                                  IN mType_tx VARCHAR(1),
                                                                  IN mConsignmentID_cd VARCHAR(2),
                                                                  IN mBaseline LONGTEXT)
BEGIN
     INSERT INTO tb_paudittrail(DateExecuted_dt,
                                TimeExecuted_tm,
                                EmployeeID_cd,
                                CenterID_id,
                                Module_no,
                                Action_no,
                                DocNo_tx,
                                PrevValue_tx,
                                NewValue_tx,
                                Comment_tx,
                                IPID_cd)
                         VALUES(SYSDATE(),
                                CURTIME(),
                                mEmployeeID_cd,
                                mCenterID_id,
                                "1022",
                                "2",
                                mPaymasterID_cd,
                                (SELECT PaymasterName_tx FROM tb_mpaymaster WHERE PaymasterID_cd = mPaymasterID_cd),
                                mPaymasterName_tx,
                                "",
                                (SELECT IPID_cd FROM tb_muser WHERE UserID_cd = mEmployeeID_cd));
     UPDATE tb_mpaymaster
     SET PaymasterName_tx = mPaymasterName_tx,
         TIN_tx = mTIN_tx,
         Address_tx = mAddress_tx,
         Terms_no = mTerms_no,
         TelNo_tx = mTelNo_tx,
         FaxNo_tx = mFaxNo_tx,
         URL_tx = mURL_tx,
         Email_tx = mEmail_tx,
         ContactPerson_tx = mContactPerson_tx,
         PositionID_id = mPositionID_id,
         Type_tx = mType_tx,
         ConsignmentID_cd = mConsignmentID_cd,
         Baseline = mBaseline
     WHERE PaymasterID_cd = mPaymasterID_cd;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_Paymaster_Verify`
--

DROP PROCEDURE IF EXISTS `sp_Paymaster_Verify`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_Paymaster_Verify`(IN mPaymasterID_cd VARCHAR(15),
                                                                  IN mPaymasterName_tx VARCHAR(80))
BEGIN
     SELECT *
     FROM tb_mpaymaster a
     WHERE   a.PaymasterID_cd <> mPaymasterID_cd AND
             a.PaymasterName_tx = mPaymasterName_tx;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_PurchaseOrder_search`
--

DROP PROCEDURE IF EXISTS `sp_PurchaseOrder_search`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_PurchaseOrder_search`(IN mBranchID_cd varchar(15), IN mMonth INTEGER, IN mDay INTEGER, IN mYear INTEGER, IN mMonth2 INTEGER, IN mDay2 INTEGER, IN mYear2 INTEGER, IN mItemID_cd VARCHAR(13), IN mItemName_tx VARCHAR(80), IN mItemDepartmentID_cd VARCHAR(2), IN mItemCategoryID_cd VARCHAR(2), IN mItemSubCategoryID_cd VARCHAR(2), IN mItemClassID_cd VARCHAR(2), IN mItemConsignmentID_cd VARCHAR(2), IN mPost_yn VARCHAR(1))
BEGIN
declare mDate DATE;
declare mDate2 DATE;
set mDate =concat(mYear,"/",mMonth,"/",mDay);
set mDate2 =concat(mYear2,"/",mMonth2,"/",mDay2);
 
SET @mystatement =CONCAT('SELECT itemid_cd, itemname_tx,sum(TIn) as TIn, sum(TOut) as TOut, sum(MBalance) as MBalance from (',
						' select dtl.itemid_cd, mast.itemname_tx,dtl.qty_no as TIn, 0 as TOut, 0 as MBalance from tb_tphysicalcountdtl as dtl left join tb_tphysicalcounthdr as hdr on dtl.pcid_cd=hdr.pcid_cd left join gng_master.tb_mitem as mast on dtl.itemid_cd = mast.itemid_cd where hdr.pcdate_dt = "',mDate,'" and mast.itemid_cd like CONCAT(''',mItemID_cd,'%'') and mast.ItemName_tx LIKE CONCAT(''%',mItemName_tx,'%'') AND mast.ItemDepartmentID_cd LIKE CONCAT(''',mItemDepartmentID_cd,'%'') AND mast.ItemCategoryID_cd LIKE CONCAT(''',mItemCategoryID_cd,'%'') AND mast.ItemSubCategoryID_cd LIKE CONCAT(''',mItemSubCategoryID_cd,'%'') AND mast.ItemClassID_cd LIKE CONCAT(''',mItemClassID_cd,'%'') AND  mast.ItemConsignmentID_cd LIKE CONCAT(''',mItemConsignmentID_cd,'%'')',
						' union all SELECT dtl.itemid_cd, mast.itemname_tx,dtl.qty_no as TIn, 0 as TOut, 0 as MBalance from tb_treceivingreportdtl as dtl left join tb_treceivingreporthdr as hdr on dtl.rrid_cd=hdr.rrid_cd left join gng_master.tb_mitem as mast on dtl.itemid_cd = mast.itemid_cd where hdr.rrdate_dt between "',mDate,'" and "',mDate2,'" and mast.itemid_cd like CONCAT(''',mItemID_cd,'%'') and mast.ItemName_tx LIKE CONCAT(''%',mItemName_tx,'%'') AND mast.ItemDepartmentID_cd LIKE CONCAT(''',mItemDepartmentID_cd,'%'') AND mast.ItemCategoryID_cd LIKE CONCAT(''',mItemCategoryID_cd,'%'') AND mast.ItemSubCategoryID_cd LIKE CONCAT(''',mItemSubCategoryID_cd,'%'') AND mast.ItemClassID_cd LIKE CONCAT(''',mItemClassID_cd,'%'') AND  mast.ItemConsignmentID_cd LIKE CONCAT(''',mItemConsignmentID_cd,'%'')',
                        ' union all SELECT dtl.itemid_cd, mast.itemname_tx,dtl.qty_no as TIn, 0 as TOut, 0 as MBalance from tb_tstocktransferdtl as dtl left join tb_tstocktransferhdr as hdr on dtl.stid_cd=hdr.stid_cd left join gng_master.tb_mitem as mast on dtl.itemid_cd = mast.itemid_cd where hdr.stdate_dt between "',mDate,'" and "',mDate2,'" and mast.itemid_cd like CONCAT(''',mItemID_cd,'%'') and mast.ItemName_tx LIKE CONCAT(''%',mItemName_tx,'%'') AND mast.ItemDepartmentID_cd LIKE CONCAT(''',mItemDepartmentID_cd,'%'') AND mast.ItemCategoryID_cd LIKE CONCAT(''',mItemCategoryID_cd,'%'') AND mast.ItemSubCategoryID_cd LIKE CONCAT(''',mItemSubCategoryID_cd,'%'') AND mast.ItemClassID_cd LIKE CONCAT(''',mItemClassID_cd,'%'') AND  mast.ItemConsignmentID_cd LIKE CONCAT(''',mItemConsignmentID_cd,'%'')',
                        ' union all SELECT dtl.itemid_cd, mast.itemname_tx,dtl.qty_no as TIn, 0 as TOut, 0 as MBalance from tb_tadjustmentindtl as dtl left join tb_tadjustmentinhdr as hdr on dtl.aiid_cd=hdr.aiid_cd left join gng_master.tb_mitem as mast on dtl.itemid_cd = mast.itemid_cd where hdr.aidate_dt between "',mDate,'" and "',mDate2,'" and mast.itemid_cd like CONCAT(''',mItemID_cd,'%'') and mast.ItemName_tx LIKE CONCAT(''%',mItemName_tx,'%'') AND mast.ItemDepartmentID_cd LIKE CONCAT(''',mItemDepartmentID_cd,'%'') AND mast.ItemCategoryID_cd LIKE CONCAT(''',mItemCategoryID_cd,'%'') AND mast.ItemSubCategoryID_cd LIKE CONCAT(''',mItemSubCategoryID_cd,'%'') AND mast.ItemClassID_cd LIKE CONCAT(''',mItemClassID_cd,'%'') AND  mast.ItemConsignmentID_cd LIKE CONCAT(''',mItemConsignmentID_cd,'%'')',
                        ' union all SELECT dtl.itemid_cd, mast.itemname_tx,0 as TIn, dtl.qty_no as TOut, 0 as MBalance from tb_tsalesinvoicedtl as dtl left join tb_tsalesinvoicehdr as hdr on dtl.siid_cd=hdr.siid_cd left join gng_master.tb_mitem as mast on dtl.itemid_cd = mast.itemid_cd where hdr.sidate_dt between "',mDate,'" and "',mDate2,'" and mast.itemid_cd like CONCAT(''',mItemID_cd,'%'') and mast.ItemName_tx LIKE CONCAT(''%',mItemName_tx,'%'') AND mast.ItemDepartmentID_cd LIKE CONCAT(''',mItemDepartmentID_cd,'%'') AND mast.ItemCategoryID_cd LIKE CONCAT(''',mItemCategoryID_cd,'%'') AND mast.ItemSubCategoryID_cd LIKE CONCAT(''',mItemSubCategoryID_cd,'%'') AND mast.ItemClassID_cd LIKE CONCAT(''',mItemClassID_cd,'%'') AND  mast.ItemConsignmentID_cd LIKE CONCAT(''',mItemConsignmentID_cd,'%'')',
                        ' union all SELECT dtl.itemid_cd, mast.itemname_tx,0 as TIn, dtl.qty_no as TOut, 0 as MBalance from tb_tstocktransferodtl as dtl left join tb_tstocktransferohdr as hdr on dtl.stid_cd=hdr.stid_cd left join gng_master.tb_mitem as mast on dtl.itemid_cd = mast.itemid_cd where hdr.stdate_dt between "',mDate,'" and "',mDate2,'" and mast.itemid_cd like CONCAT(''',mItemID_cd,'%'') and mast.ItemName_tx LIKE CONCAT(''%',mItemName_tx,'%'') AND mast.ItemDepartmentID_cd LIKE CONCAT(''',mItemDepartmentID_cd,'%'') AND mast.ItemCategoryID_cd LIKE CONCAT(''',mItemCategoryID_cd,'%'') AND mast.ItemSubCategoryID_cd LIKE CONCAT(''',mItemSubCategoryID_cd,'%'') AND mast.ItemClassID_cd LIKE CONCAT(''',mItemClassID_cd,'%'') AND  mast.ItemConsignmentID_cd LIKE CONCAT(''',mItemConsignmentID_cd,'%'')',
                        ' union all SELECT dtl.itemid_cd, mast.itemname_tx,0 as TIn, dtl.qty_no as TOut, 0 as MBalance from tb_tadjustmentoutdtl as dtl left join tb_tadjustmentouthdr as hdr on dtl.aoid_cd=hdr.aoid_cd left join gng_master.tb_mitem as mast on dtl.itemid_cd = mast.itemid_cd where hdr.aodate_dt between "',mDate,'" and "',mDate2,'" and mast.itemid_cd like CONCAT(''',mItemID_cd,'%'') and mast.ItemName_tx LIKE CONCAT(''%',mItemName_tx,'%'') AND mast.ItemDepartmentID_cd LIKE CONCAT(''',mItemDepartmentID_cd,'%'') AND mast.ItemCategoryID_cd LIKE CONCAT(''',mItemCategoryID_cd,'%'') AND mast.ItemSubCategoryID_cd LIKE CONCAT(''',mItemSubCategoryID_cd,'%'') AND mast.ItemClassID_cd LIKE CONCAT(''',mItemClassID_cd,'%'') AND  mast.ItemConsignmentID_cd LIKE CONCAT(''',mItemConsignmentID_cd,'%'')',
                        ' union all SELECT dtl.itemid_cd, mast.itemname_tx,0 as TIn, 0 as TOut, dtl.',mBranchID_cd,' as MBalance from gng_master.tb_tmaintainingbalance as dtl left join gng_master.tb_mitem as mast on dtl.itemid_cd = mast.itemid_cd where mast.itemid_cd like CONCAT(''',mItemID_cd,'%'') and mast.ItemName_tx LIKE CONCAT(''%',mItemName_tx,'%'') AND mast.ItemDepartmentID_cd LIKE CONCAT(''',mItemDepartmentID_cd,'%'') AND mast.ItemCategoryID_cd LIKE CONCAT(''',mItemCategoryID_cd,'%'') AND mast.ItemSubCategoryID_cd LIKE CONCAT(''',mItemSubCategoryID_cd,'%'') AND mast.ItemClassID_cd LIKE CONCAT(''',mItemClassID_cd,'%'') AND  mast.ItemConsignmentID_cd LIKE CONCAT(''',mItemConsignmentID_cd,'%'')',
                        ' ) as a group by itemid_cd,itemname_tx');

prepare stm from @mystatement;
execute stm;
deallocate prepare stm;



END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_PurchasesDTL_Insert`
--

DROP PROCEDURE IF EXISTS `sp_PurchasesDTL_Insert`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_PurchasesDTL_Insert`(IN mPBID_cd VARCHAR(15),
                                                                        IN mSeq_no INTEGER,
                                                                        IN mAccountID_cd VARCHAR(5),
                                                                        IN mSubsidiaryID_cd VARCHAR(20),
                                                                        IN mDebitAmount_no DOUBLE,
                                                                        IN mCreditAmount_no DOUBLE)
BEGIN
     INSERT INTO tb_tpurchasesdtl(PBID_cd,
            		         Seq_no,
	    		         AccountID_cd,
	    		         SubsidiaryID_cd,
	    		         DebitAmount_no,
	    		         CreditAmount_no)
		  	    VALUES(mPBID_cd,
	            		 mSeq_no,
		    		 mAccountID_cd,
		    		 mSubsidiaryID_cd,
		    		 mDebitAmount_no,
		    		 mCreditAmount_no);
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_PurchasesHDR_Insert`
--

DROP PROCEDURE IF EXISTS `sp_PurchasesHDR_Insert`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_PurchasesHDR_Insert`(IN mEmployeeID_cd VARCHAR(15), IN mPBID_cd VARCHAR(15), IN mPBDate_dt DATE, IN mReferenceID_cd VARCHAR(15), IN mAmount_no DOUBLE, IN mParticular_tx VARCHAR(255), IN mBaseline LONGTEXT)
BEGIN
   
     INSERT INTO tb_tpurchaseshdr(PBID_cd,
				     PBDate_dt,
                                     ReferenceID_cd,
                                     Amount_no,
                                     Particular_tx,
                                     Post_yn,
                                     Baseline)
			      VALUES(mPBID_cd,
				     mPBDate_dt,
                                     mReferenceID_cd,
                                     mAmount_no,
                                     mParticular_tx,
                                     '0',
                                     mBaseline);
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_PurchasesHDR_Update`
--

DROP PROCEDURE IF EXISTS `sp_PurchasesHDR_Update`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_PurchasesHDR_Update`(IN mEmployeeID_cd VARCHAR(15), IN mPBID_cd VARCHAR(15), IN mPBID_cd_ VARCHAR(15), IN mPBDate_dt DATE, IN mReferenceID_cd VARCHAR(15), IN mAmount_no DOUBLE, IN mStatus VARCHAR(1), IN mParticular_tx VARCHAR(255), IN mBaseline LONGTEXT)
BEGIN
   
     DELETE FROM tb_tpurchaseshdr
     WHERE PBID_cd = mPBID_cd_;
     INSERT INTO tb_tpurchaseshdr(PBID_cd,
				     PBDate_dt,
                                     ReferenceID_cd,
                                     Amount_no,
                                     Particular_tx,
                                     Post_yn,
                                     Baseline)
			      VALUES(mPBID_cd,
				     mPBDate_dt,
                                     mReferenceID_cd,
                                     mAmount_no,
                                     mParticular_tx,
                                     mStatus,
                                     mBaseline);
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_PurchasesHDR_Update_`
--

DROP PROCEDURE IF EXISTS `sp_PurchasesHDR_Update_`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_PurchasesHDR_Update_`(IN mPBID_cd VARCHAR(15))
BEGIN
declare mAmount double;
set @mAmount =(select sum(DebitAmount_no) as amt from tb_tpurchasesdtl where PBID_cd = mPBID_cd);
update tb_tpurchaseshdr set Amount_no = @mAmount where PBID_cd = mPBID_cd;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_Purchases_Delete`
--

DROP PROCEDURE IF EXISTS `sp_Purchases_Delete`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_Purchases_Delete`(IN mEmployeeID_cd VARCHAR(15), IN mPBID_cd VARCHAR(15), IN mParticular_tx VARCHAR(5000))
BEGIN
      DELETE FROM tb_tpurchaseshdr
     WHERE PBID_cd = mPBID_cd;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_Purchases_RecSelect`
--

DROP PROCEDURE IF EXISTS `sp_Purchases_RecSelect`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_Purchases_RecSelect`(IN mPBID_cd VARCHAR(15))
BEGIN
        SELECT a.PBID_cd,
               a.PBDate_dt,
               a.ReferenceID_cd,
               a.Amount_no,
               a.Particular_tx,
               b.Seq_no,
               CASE LENGTH(IFNULL(b.SubsidiaryID_cd,''))
                       WHEN 0 THEN b.AccountID_cd
                       WHEN 7 THEN b.SubsidiaryID_cd
                       ELSE b.AccountID_cd END AS AccountID_cd,
               c.AccountDesc_tx,
               CASE IFNULL(b.SubsidiaryID_cd,'')
                       WHEN '' THEN ''
                       ELSE b.SubsidiaryID_cd END AS SubsidiaryID_cd,
               IFNULL(d.SubsidiaryDesc_tx,'') AS SubsidiaryDesc_tx,
               IFNULL(b.DebitAmount_no,0) As DebitAmount_no,
               IFNULL(b.CreditAmount_no,0) AS CreditAmount_no
        FROM tb_tpurchaseshdr a
        LEFT JOIN
        (SELECT *
        FROM tb_tpurchasesdtl) b
        ON a.PBID_cd = b.PBID_cd
        LEFT JOIN
        (SELECT *
        FROM gng_master.tb_mcoahdr) c
        ON b.AccountID_cd = c.AccountID_cd
        LEFT JOIN
        (SELECT *
        FROM gng_master.tb_mcoadtl) d
        ON b.SubsidiaryID_cd = d.SubsidiaryID_cd
        WHERE a.PBID_cd = mPBID_cd
        ORDER BY a.PBDate_dt DESC,
	         a.PBID_cd DESC,
	         b.Seq_no ASC;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_Purchases_Search`
--

DROP PROCEDURE IF EXISTS `sp_Purchases_Search`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_Purchases_Search`(IN mPBID_cd VARCHAR(15),
                                                                     IN mReferenceID_cd VARCHAR(15),
                                                                     IN mStartDate_dt DATE,
                                                                     IN mEndDate_dt DATE,
                                                                     IN mPost_yn VARCHAR(1),
                                                                     IN mLimit VARCHAR(20))
BEGIN
        SET @mSql =
        CONCAT('SELECT DISTINCT a.PBID_cd,
                                a.PBDate_dt,
                                a.ReferenceID_cd,
                                a.Particular_tx,
                                a.Amount_no,
                                a.baseline,
                                a.Post_yn,
                                CASE a.Post_yn
                                        WHEN ''0'' THEN '' ''
                                        WHEN ''1'' THEN ''P''
                                        WHEN ''2'' THEN ''C'' END AS PostDesc_tx


                FROM tb_tpurchaseshdr a

                WHERE   a.PBID_cd LIKE CONCAT(''',mPBID_cd,'%'') AND
                        a.ReferenceID_cd LIKE CONCAT(''',mReferenceID_cd,'%'') AND
                        a.PBDate_dt BETWEEN ''',mStartDate_dt,''' AND ''',mEndDate_dt,''' AND
                        a.Post_yn LIKE CONCAT(''',mPost_yn,'%'')

                ORDER BY a.PBID_cd ASC

                LIMIT ', mLimit);
                
        PREPARE stmtl FROM @mSql;
        EXECUTE stmtl;
        DEALLOCATE PREPARE stmtl;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_Purchases_Select`
--

DROP PROCEDURE IF EXISTS `sp_Purchases_Select`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_Purchases_Select`()
BEGIN
     SELECT *
     FROM tb_tpurchaseshdr a
     ORDER BY PBID_cd ASC;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_Purchases_Verify`
--

DROP PROCEDURE IF EXISTS `sp_Purchases_Verify`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_Purchases_Verify`(IN mPBID_cd VARCHAR(15),
                                                                     IN mPBID_cd_ VARCHAR(15))
BEGIN
     SELECT *
     FROM tb_tpurchaseshdr a
     WHERE a.PBID_cd <> mPBID_cd AND
           a.PBID_cd = mPBID_cd_;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_SubsidiaryAccount_Delete`
--

DROP PROCEDURE IF EXISTS `sp_SubsidiaryAccount_Delete`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_SubsidiaryAccount_Delete`(IN mEmployeeID_cd VARCHAR(15),
                                                        IN uCenterID_id INTEGER,
                                                        IN mSubsidiaryID_cd VARCHAR(20),
                                                        IN mSubsidiaryDesc_tx VARCHAR(5000))
BEGIN

     DELETE FROM tb_mcoadtl
     WHERE SubsidiaryID_cd = mSubsidiaryID_cd;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_SubsidiaryAccount_Insert`
--

DROP PROCEDURE IF EXISTS `sp_SubsidiaryAccount_Insert`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_SubsidiaryAccount_Insert`(IN mEmployeeID_cd VARCHAR(15), IN mAccountID_cd VARCHAR(5), IN mSeq_no INTEGER, IN mSubsidiaryID_cd VARCHAR(20), IN mSubsidiaryDesc_tx VARCHAR(80))
BEGIN
                          
    INSERT INTO tb_mcoadtl(AccountID_cd,
 		          Seq_no,
		           SubsidiaryID_cd,
 		          SubsidiaryDesc_tx)
		    VALUES(mAccountID_cd,
 		          mSeq_no,
                           mSubsidiaryID_cd,
 		          mSubsidiaryDesc_tx);
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_SubsidiaryAccount_RecSelect`
--

DROP PROCEDURE IF EXISTS `sp_SubsidiaryAccount_RecSelect`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_SubsidiaryAccount_RecSelect`(IN mSubsidiaryID_cd VARCHAR(20))
BEGIN
     SELECT *
     FROM tb_mcoadtl a
     WHERE a.SubsidiaryID_cd = mSubsidiaryID_cd;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_SubsidiaryAccount_Search`
--

DROP PROCEDURE IF EXISTS `sp_SubsidiaryAccount_Search`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_SubsidiaryAccount_Search`(IN mAccountID_cd VARCHAR(5),
                                                          IN mSubsidiaryID_cd VARCHAR(20),
                                                          IN mSubsidiaryDesc_tx VARCHAR(80),
                                                          IN mLimit VARCHAR(20))
BEGIN

      SET @mSql =
        CONCAT('SELECT b.AccountID_cd,
                       b.AccountDesc_tx,
                       a.SubsidiaryID_cd,
                       a.SubsidiaryDesc_tx,
                       IFNULL(a.SubsidiaryID_cd,0) AS TotRec_no
                       
                FROM tb_mcoadtl as a    

                LEFT JOIN tb_mcoahdr as b
                ON a.AccountID_cd = b.AccountID_cd

                WHERE   a.AccountID_cd LIKE CONCAT(''',mAccountID_cd,'%'') AND
                        a.SubsidiaryID_cd LIKE CONCAT(''',mSubsidiaryID_cd,'%'') AND
                        a.SubsidiaryDesc_tx LIKE CONCAT(''',mSubsidiaryDesc_tx,'%'')

                ORDER BY b.AccountID_cd,
                         a.SubsidiaryDesc_tx

                LIMIT ', mLimit);
        PREPARE stmtl FROM @mSql;
        EXECUTE stmtl;
        DEALLOCATE PREPARE stmtl;  
        
 
      
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_SubsidiaryAccount_Select`
--

DROP PROCEDURE IF EXISTS `sp_SubsidiaryAccount_Select`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_SubsidiaryAccount_Select`(IN mAccountID_cd VARCHAR(5))
BEGIN
 
  SELECT  a.*,
             b.*
     FROM tb_mcoadtl as a
     LEFT JOIN  tb_mcoahdr as b
     ON a.AccountID_cd = b.AccountID_cd
     WHERE a.AccountID_cd = mAccountID_cd
     ORDER BY a.SubsidiaryDesc_tx ASC;   
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_SubsidiaryAccount_Update`
--

DROP PROCEDURE IF EXISTS `sp_SubsidiaryAccount_Update`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_SubsidiaryAccount_Update`(IN mEmployeeID_cd VARCHAR(15), IN mSubsidiaryID_cd VARCHAR(20), IN mSubsidiaryDesc_tx VARCHAR(80))
BEGIN
                          
    UPDATE tb_mcoadtl
    SET SubsidiaryDesc_tx = mSubsidiaryDesc_tx
    WHERE SubsidiaryID_cd = mSubsidiaryID_cd;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_SubsidiaryAccount_Verify`
--

DROP PROCEDURE IF EXISTS `sp_SubsidiaryAccount_Verify`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_SubsidiaryAccount_Verify`(IN mAccountID_cd VARCHAR(5),
                                                                          IN mSubsidiaryID_cd VARCHAR(20),
                                                                          IN mSubsidiaryDesc_tx VARCHAR(80))
BEGIN
     SELECT *
     FROM tb_mcoadtl a
     WHERE a.AccountID_cd = mAccountID_cd AND
           a.SubsidiaryID_cd <> mSubsidiaryID_cd AND
           a.SubsidiaryDesc_tx = mSubsidiaryDesc_tx;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_SubsidiaryBalance_Select`
--

DROP PROCEDURE IF EXISTS `sp_SubsidiaryBalance_Select`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_SubsidiaryBalance_Select`(IN mAccountID_cd VARCHAR(5),
                                                                          IN mJournal_tx VARCHAR(1),
                                                                          IN mStartDate_dt DATE,
                                                                          IN mEndDate_dt DATE)
BEGIN

        SELECT *
        FROM
        (SELECT a.CRID_cd,
                a.AccountID_cd,
                a.SubsidiaryID_cd,
                CASE WHEN SUM(IFNULL(a.DebitAmount_no,0)) > SUM(IFNULL(a.CreditAmount_no,0))
                    THEN ROUND(SUM(IFNULL(a.DebitAmount_no,0)) - SUM(IFNULL(a.CreditAmount_no,0)),4)
                    ELSE 0 END AS 'Debit',
                CASE WHEN SUM(IFNULL(a.CreditAmount_no,0)) > SUM(IFNULL(a.DebitAmount_no,0))
                    THEN ROUND(SUM(IFNULL(a.CreditAmount_no,0)) - SUM(IFNULL(a.DebitAmount_no,0)),4)
                ELSE 0 END AS 'Credit',
                '1' AS 'Journal_tx'
        FROM tb_tcashreceiptsdtl a

        LEFT JOIN
        (SELECT CRID_cd,
                CRDate_dt,
                Post_yn
        FROM tb_tcashreceiptshdr) b
        ON a.CRID_cd = b.CRID_cd

        WHERE a.AccountID_cd = mAccountID_cd AND
              b.CRDate_dt BETWEEN mStartDate_dt AND mEndDate_dt AND
              b.Post_yn = '1'

        GROUP BY a.AccountID_cd,
                 a.SubsidiaryID_cd



        UNION



        SELECT a.PBID_cd,
               a.AccountID_cd,
               a.SubsidiaryID_cd,
               CASE WHEN SUM(IFNULL(a.DebitAmount_no,0)) > SUM(IFNULL(a.CreditAmount_no,0))
                    THEN ROUND(SUM(IFNULL(a.DebitAmount_no,0)) - SUM(IFNULL(a.CreditAmount_no,0)),4)
                    ELSE 0 END AS 'Debit',
               CASE WHEN SUM(IFNULL(a.CreditAmount_no,0)) > SUM(IFNULL(a.DebitAmount_no,0))
                    THEN ROUND(SUM(IFNULL(a.CreditAmount_no,0)) - SUM(IFNULL(a.DebitAmount_no,0)),4)
                    ELSE 0 END AS 'Credit',
               '2' AS 'Journal_tx'
        FROM tb_tpurchasesdtl a

        LEFT JOIN
        (SELECT PBID_cd,
                PBDate_dt,
                Post_yn
        FROM tb_tpurchaseshdr) b
        ON a.PBID_cd = b.PBID_cd

        WHERE a.AccountID_cd = mAccountID_cd AND
              b.PBDate_dt BETWEEN mStartDate_dt AND mEndDate_dt AND
              b.Post_yn = '1'

        GROUP BY a.AccountID_cd,
                 a.SubsidiaryID_cd




        UNION




        SELECT a.CSID_cd,
               a.AccountID_cd,
               a.SubsidiaryID_cd,
               CASE WHEN SUM(IFNULL(a.DebitAmount_no,0)) > SUM(IFNULL(a.CreditAmount_no,0))
                    THEN ROUND(SUM(IFNULL(a.DebitAmount_no,0)) - SUM(IFNULL(a.CreditAmount_no,0)),4)
                    ELSE 0 END AS 'Debit',
               CASE WHEN SUM(IFNULL(a.CreditAmount_no,0)) > SUM(IFNULL(a.DebitAmount_no,0))
                    THEN ROUND(SUM(IFNULL(a.CreditAmount_no,0)) - SUM(IFNULL(a.DebitAmount_no,0)),4)
                    ELSE 0 END AS 'Credit',
               '3' AS 'Journal_tx'
        FROM tb_tcashsalesdtl a

        LEFT JOIN
        (SELECT CSID_cd,
                CSDate_dt,
                Post_yn
        FROM tb_tcashsaleshdr) b
        ON a.CSID_cd = b.CSID_cd

        WHERE a.AccountID_cd = mAccountID_cd AND
              b.CSDate_dt BETWEEN mStartDate_dt AND mEndDate_dt AND
              b.Post_yn = '1'

        GROUP BY a.AccountID_cd,
                 a.SubsidiaryID_cd




        UNION




        SELECT a.BSID_cd,
               a.AccountID_cd,
               a.SubsidiaryID_cd,
               CASE WHEN SUM(IFNULL(a.DebitAmount_no,0)) > SUM(IFNULL(a.CreditAmount_no,0))
                    THEN ROUND(SUM(IFNULL(a.DebitAmount_no,0)) - SUM(IFNULL(a.CreditAmount_no,0)),4)
                    ELSE 0 END AS 'Debit',
               CASE WHEN SUM(IFNULL(a.CreditAmount_no,0)) > SUM(IFNULL(a.DebitAmount_no,0))
                    THEN ROUND(SUM(IFNULL(a.CreditAmount_no,0)) - SUM(IFNULL(a.DebitAmount_no,0)),4)
                    ELSE 0 END AS 'Credit',
               '4' AS 'Journal_tx'
        FROM tb_tchargesalesdtl a

        LEFT JOIN
        (SELECT BSID_cd,
                BSDate_dt,
                Post_yn
        FROM tb_tchargesaleshdr) b
        ON a.BSID_cd = b.BSID_cd

        WHERE a.AccountID_cd = mAccountID_cd AND
              b.BSDate_dt BETWEEN mStartDate_dt AND mEndDate_dt AND
              b.Post_yn = '1'

        GROUP BY a.AccountID_cd,
                 a.SubsidiaryID_cd




        UNION




        SELECT a.CDID_cd,
               a.AccountID_cd,
               a.SubsidiaryID_cd,
               CASE WHEN SUM(IFNULL(a.DebitAmount_no,0)) > SUM(IFNULL(a.CreditAmount_no,0))
                    THEN ROUND(SUM(IFNULL(a.DebitAmount_no,0)) - SUM(IFNULL(a.CreditAmount_no,0)),4)
                    ELSE 0 END AS 'Debit',
               CASE WHEN SUM(IFNULL(a.CreditAmount_no,0)) > SUM(IFNULL(a.DebitAmount_no,0))
                    THEN ROUND(SUM(IFNULL(a.CreditAmount_no,0)) - SUM(IFNULL(a.DebitAmount_no,0)),4)
                    ELSE 0 END AS 'Credit',
               '5' AS 'Journal_tx'
        FROM tb_tcheckdisbursementdtl a

        LEFT JOIN
        (SELECT CDID_cd,
                CDDate_dt,
                Post_yn
        FROM tb_tcheckdisbursementhdr) b
        ON a.CDID_cd = b.CDID_cd

        WHERE a.AccountID_cd = mAccountID_cd AND
              b.CDDate_dt BETWEEN mStartDate_dt AND mEndDate_dt AND
              b.Post_yn = '1'

        GROUP BY a.AccountID_cd,
                 a.SubsidiaryID_cd




        UNION




        SELECT a.GJID_cd,
               a.AccountID_cd,
               a.SubsidiaryID_cd,
               CASE WHEN SUM(IFNULL(a.DebitAmount_no,0)) > SUM(IFNULL(a.CreditAmount_no,0))
                    THEN ROUND(SUM(IFNULL(a.DebitAmount_no,0)) - SUM(IFNULL(a.CreditAmount_no,0)),4)
                    ELSE 0 END AS 'Debit',
               CASE WHEN SUM(IFNULL(a.CreditAmount_no,0)) > SUM(IFNULL(a.DebitAmount_no,0))
                    THEN ROUND(SUM(IFNULL(a.CreditAmount_no,0)) - SUM(IFNULL(a.DebitAmount_no,0)),4)
                    ELSE 0 END AS 'Credit',
               '6' AS 'Journal_tx'
        FROM tb_tgeneraljournaldtl a

        LEFT JOIN
        (SELECT GJID_cd,
                GJDate_dt,
                Post_yn
        FROM tb_tgeneraljournalhdr) b
        ON a.GJID_cd = b.GJID_cd

        WHERE a.AccountID_cd = mAccountID_cd AND
              b.GJDate_dt BETWEEN mStartDate_dt AND mEndDate_dt AND
              b.Post_yn = '1'

        GROUP BY a.AccountID_cd,
                 a.SubsidiaryID_cd) a

        LEFT JOIN
        (SELECT *
        FROM gng_master.tb_mcoadtl) b
        ON a.SubsidiaryID_cd = b.SubsidiaryID_cd

        WHERE (a.Journal_tx = mJournal_tx OR mJournal_tx = '0') AND
              a.SubsidiaryID_cd <> '';
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_SubsidiaryRights_Select`
--

DROP PROCEDURE IF EXISTS `sp_SubsidiaryRights_Select`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_SubsidiaryRights_Select`(IN mAccountID_cd VARCHAR(5))
BEGIN
  
 
        SELECT *
        FROM tb_mcoadtl as a
        
        WHERE a.AccountID_cd = mAccountID_cd 
        ORDER BY a.SubsidiaryDesc_tx;      
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_TrialBalance_Select`
--

DROP PROCEDURE IF EXISTS `sp_TrialBalance_Select`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_TrialBalance_Select`(IN mAccountID_cd VARCHAR(5), IN mJournal_tx VARCHAR(1), IN mStartDate_dt DATE, IN mEndDate_dt DATE, in mStatus VARCHAR(1))
BEGIN

declare mStatus_  varchar(1);
        set mStatus_ = CONCAT(mStatus,'%');

        
        SELECT  DISTINCT a.AccountID_cd,
		IFNULL(b.AccountDesc_tx,'') AS 'AccountDesc_tx', 
        '' as SubsidiaryID_cd,
		CASE WHEN SUM(IFNULL(a.DebitAmount_no,0)) > SUM(IFNULL(a.CreditAmount_no,0))
                     THEN ROUND(SUM(IFNULL(a.DebitAmount_no,0)) - SUM(IFNULL(a.CreditAmount_no,0)),4)
                     ELSE 0 END AS 'Debit',
                CASE WHEN SUM(IFNULL(a.CreditAmount_no,0)) > SUM(IFNULL(a.DebitAmount_no,0))
                     THEN ROUND(SUM(IFNULL(a.CreditAmount_no,0)) - SUM(IFNULL(a.DebitAmount_no,0)),4)
                     ELSE 0 END AS 'Credit',
		(SELECT COUNT(SubsidiaryID_cd) FROM tb_mcoadtl WHERE AccountID_cd = a.AccountID_cd) AS 'TotRec_no',
		SUM(a.Seq_no) AS TotReq,
		b.Debit_yn,
                b.GroupID_cd,
                c.GroupName_tx

        FROM
                (SELECT a.CRID_cd AS 'ControlID_cd',
		        a.CRDate_dt AS 'ControlDate_dt',
		        b.AccountID_cd,
               b.SubsidiaryID_cd, 
		        b.Seq_no,
		        ROUND(b.DebitAmount_no,4) AS DebitAmount_no ,
		        ROUND(b.CreditAmount_no,4) AS CreditAmount_no,
		        '1' as 'Journal_tx'

                FROM tb_tcashreceiptshdr a

	        LEFT JOIN
	        tb_tcashreceiptsdtl as b
	        ON a.CRID_cd = b.CRID_cd

                WHERE   b.AccountID_cd = CASE mAccountID_cd
				                WHEN '' THEN b.AccountID_cd
				                ELSE mAccountID_cd END AND
                        ('1' = mJournal_tx OR mJournal_tx = '0') AND 
                        a.Post_yn like mStatus_ AND
                        a.CRDate_dt BETWEEN mStartDate_dt AND mEndDate_dt






                UNION







                SELECT  a.PBID_cd AS 'ControlID_cd',
		        a.PBDate_dt AS 'ControlDate_dt',
		        b.AccountID_cd,
                b.SubsidiaryID_cd,
		        b.Seq_no,
		        ROUND(b.DebitAmount_no,4) AS DebitAmount_no ,
		        ROUND(b.CreditAmount_no,4) AS CreditAmount_no,
		        '2' as 'Journal_tx'

                FROM tb_tpurchaseshdr a

	        LEFT JOIN
	        tb_tpurchasesdtl as b
	        ON a.PBID_cd = b.PBID_cd

                WHERE   b.AccountID_cd = CASE mAccountID_cd
				                WHEN '' THEN b.AccountID_cd
				                ELSE mAccountID_cd END AND
                        ('2' = mJournal_tx OR mJournal_tx = '0') AND 
                        a.Post_yn like mStatus_ AND
                        a.PBDate_dt BETWEEN mStartDate_dt AND mEndDate_dt





                UNION










                SELECT  a.CSID_cd AS 'ControlID_cd',
		        a.CSDate_dt AS 'ControlDate_dt',
		        b.AccountID_cd, 
                 b.SubsidiaryID_cd,
		        b.Seq_no,
		        ROUND(b.DebitAmount_no,4) AS DebitAmount_no ,
		        ROUND(b.CreditAmount_no,4) AS CreditAmount_no,
		        '3' as 'Journal_tx'

                FROM tb_tcashsaleshdr a

	        LEFT JOIN
	        tb_tcashsalesdtl as b
	        ON a.CSID_cd = b.CSID_cd

                WHERE   b.AccountID_cd = CASE mAccountID_cd
				                WHEN '' THEN b.AccountID_cd
				                ELSE mAccountID_cd END AND
                        ('3' = mJournal_tx OR mJournal_tx = '0') AND  
                        a.Post_yn like mStatus_ AND
                        a.CSDate_dt BETWEEN mStartDate_dt AND mEndDate_dt






                UNION






                SELECT  a.BSID_cd AS 'ControlID_cd',
		        a.BSDate_dt AS 'ControlDate_dt',
		        b.AccountID_cd,
                  b.SubsidiaryID_cd,
		        b.Seq_no,
		        ROUND(b.DebitAmount_no,4) AS DebitAmount_no ,
		        ROUND(b.CreditAmount_no,4) AS CreditAmount_no,
		        '4' as 'Journal_tx'

                FROM tb_tchargesaleshdr a

	        LEFT JOIN
	        tb_tchargesalesdtl as b
	        ON a.BSID_cd = b.BSID_cd

                WHERE   b.AccountID_cd = CASE mAccountID_cd
                                                WHEN '' THEN b.AccountID_cd
				                ELSE mAccountID_cd END AND
                        ('4' = mJournal_tx OR mJournal_tx = '0') AND 
                        a.Post_yn like mStatus_ AND
                        a.BSDate_dt BETWEEN mStartDate_dt AND mEndDate_dt





                UNION






                SELECT  a.CDID_cd AS 'ControlID_cd',
		        a.CDDate_dt AS 'ControlDate_dt',
		        b.AccountID_cd,
                  b.SubsidiaryID_cd,
		        b.Seq_no,
		        ROUND(b.DebitAmount_no,4) AS DebitAmount_no ,
		        ROUND(b.CreditAmount_no,4) AS CreditAmount_no,
		        '5' as 'Journal_tx'

                FROM tb_tcheckdisbursementhdr a

	        LEFT JOIN
	        tb_tcheckdisbursementdtl as b
	        ON a.CDID_cd = b.CDID_cd

                WHERE   b.AccountID_cd = CASE mAccountID_cd
				                WHEN '' THEN b.AccountID_cd
				                ELSE mAccountID_cd END AND
                        ('5' = mJournal_tx OR mJournal_tx = '0') AND 
                        a.Post_yn like mStatus_ AND
                        a.CDDate_dt BETWEEN mStartDate_dt AND mEndDate_dt








                UNION






                SELECT  a.GJID_cd AS 'ControlID_cd',
		        a.GJDate_dt AS 'ControlDate_dt',
		        b.AccountID_cd, 
                  b.SubsidiaryID_cd,
		        b.Seq_no,
		        ROUND(b.DebitAmount_no,4) AS DebitAmount_no ,
		        ROUND(b.CreditAmount_no,4) AS CreditAmount_no,
		        '6' as 'Journal_tx'

                FROM tb_tgeneraljournalhdr a

	        LEFT JOIN
	        tb_tgeneraljournaldtl as b
	        ON a.GJID_cd = b.GJID_cd

                WHERE   b.AccountID_cd = CASE mAccountID_cd
				                WHEN '' THEN b.AccountID_cd
				                ELSE mAccountID_cd END AND
                        ('6' = mJournal_tx OR mJournal_tx = '0') AND 
                        a.Post_yn like mStatus_ AND
                        a.GJDate_dt BETWEEN mStartDate_dt AND mEndDate_dt) a


        LEFT JOIN  
        tb_mcoahdr as b
        ON a.AccountID_cd = b.AccountID_cd

        LEFT JOIN
        tb_mcoagroup as c
        ON b.GroupID_cd = c.GroupID_cd


        WHERE a.AccountID_cd <> ''

        GROUP BY a.AccountID_cd, 
        	 b.AccountDesc_tx,
	         b.Debit_yn

        ORDER BY b.AccountID_cd;
     
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_TrialBalance_Select_new`
--

DROP PROCEDURE IF EXISTS `sp_TrialBalance_Select_new`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_TrialBalance_Select_new`(IN mAccountID_cd VARCHAR(5), IN mJournal_tx VARCHAR(1), IN mStartDate_dt DATE, IN mEndDate_dt DATE, in mStatus VARCHAR(1))
BEGIN


                        
                        
                        
                          
declare mStatus_  varchar(1);
set mStatus_ = CONCAT(mStatus,'%'); 
        
        SELECT  DISTINCT a.AccountID_cd,
		IFNULL(b.AccountDesc_tx,'') AS 'AccountDesc_tx', 
        '' as SubsidiaryID_cd,
		CASE WHEN SUM(IFNULL(a.DebitAmount_no,0)) > SUM(IFNULL(a.CreditAmount_no,0))
                     THEN ROUND(SUM(IFNULL(a.DebitAmount_no,0)) - SUM(IFNULL(a.CreditAmount_no,0)),4)
                     ELSE 0 END AS 'Debit',
                CASE WHEN SUM(IFNULL(a.CreditAmount_no,0)) > SUM(IFNULL(a.DebitAmount_no,0))
                     THEN ROUND(SUM(IFNULL(a.CreditAmount_no,0)) - SUM(IFNULL(a.DebitAmount_no,0)),4)
                     ELSE 0 END AS 'Credit',
		(SELECT COUNT(SubsidiaryID_cd) FROM gng_master.tb_mcoadtl WHERE AccountID_cd = a.AccountID_cd) AS 'TotRec_no',
		SUM(a.Seq_no) AS TotReq,
		b.Debit_yn,
                b.GroupID_cd,
                c.GroupName_tx

        FROM
                (SELECT a.CRID_cd AS 'ControlID_cd',
		        a.CRDate_dt AS 'ControlDate_dt',
		        b.AccountID_cd,
               b.SubsidiaryID_cd, 
		        b.Seq_no,
		        ROUND(b.DebitAmount_no,4) AS DebitAmount_no ,
		        ROUND(b.CreditAmount_no,4) AS CreditAmount_no,
		        '1' as 'Journal_tx'

                FROM tb_tcashreceiptshdr a

	        LEFT JOIN
	        tb_tcashreceiptsdtl as b
	        ON a.CRID_cd = b.CRID_cd

                WHERE   b.AccountID_cd = CASE mAccountID_cd
				                WHEN '' THEN b.AccountID_cd
				                ELSE mAccountID_cd END  AND
                        a.Post_yn like mStatus_ AND
                        a.CRDate_dt BETWEEN mStartDate_dt AND mEndDate_dt






                UNION







                SELECT  a.PBID_cd AS 'ControlID_cd',
		        a.PBDate_dt AS 'ControlDate_dt',
		        b.AccountID_cd,
                b.SubsidiaryID_cd,
		        b.Seq_no,
		        ROUND(b.DebitAmount_no,4) AS DebitAmount_no ,
		        ROUND(b.CreditAmount_no,4) AS CreditAmount_no,
		        '2' as 'Journal_tx'

                FROM tb_tpurchaseshdr a

	        LEFT JOIN
	        tb_tpurchasesdtl as b
	        ON a.PBID_cd = b.PBID_cd

                WHERE   b.AccountID_cd = CASE mAccountID_cd
				                WHEN '' THEN b.AccountID_cd
				                ELSE mAccountID_cd END  AND 
                        a.Post_yn like mStatus_ AND
                        a.PBDate_dt BETWEEN mStartDate_dt AND mEndDate_dt





                UNION










                SELECT  a.CSID_cd AS 'ControlID_cd',
		        a.CSDate_dt AS 'ControlDate_dt',
		        b.AccountID_cd, 
                 b.SubsidiaryID_cd,
		        b.Seq_no,
		        ROUND(b.DebitAmount_no,4) AS DebitAmount_no ,
		        ROUND(b.CreditAmount_no,4) AS CreditAmount_no,
		        '3' as 'Journal_tx'

                FROM tb_tcashsaleshdr a

	        LEFT JOIN
	        tb_tcashsalesdtl as b
	        ON a.CSID_cd = b.CSID_cd

                WHERE   b.AccountID_cd = CASE mAccountID_cd
				                WHEN '' THEN b.AccountID_cd
				                ELSE mAccountID_cd END  AND 
                        a.Post_yn like mStatus_ AND
                        a.CSDate_dt BETWEEN mStartDate_dt AND mEndDate_dt






                UNION






                SELECT  a.BSID_cd AS 'ControlID_cd',
		        a.BSDate_dt AS 'ControlDate_dt',
		        b.AccountID_cd,
                  b.SubsidiaryID_cd,
		        b.Seq_no,
		        ROUND(b.DebitAmount_no,4) AS DebitAmount_no ,
		        ROUND(b.CreditAmount_no,4) AS CreditAmount_no,
		        '4' as 'Journal_tx'

                FROM tb_tchargesaleshdr a

	        LEFT JOIN
	        tb_tchargesalesdtl as b
	        ON a.BSID_cd = b.BSID_cd

                WHERE   b.AccountID_cd = CASE mAccountID_cd
                                                WHEN '' THEN b.AccountID_cd
				                ELSE mAccountID_cd END  AND
                        a.Post_yn like mStatus_ AND
                        a.BSDate_dt BETWEEN mStartDate_dt AND mEndDate_dt





                UNION






                SELECT  a.CDID_cd AS 'ControlID_cd',
		        a.CDDate_dt AS 'ControlDate_dt',
		        b.AccountID_cd,
                  b.SubsidiaryID_cd,
		        b.Seq_no,
		        ROUND(b.DebitAmount_no,4) AS DebitAmount_no ,
		        ROUND(b.CreditAmount_no,4) AS CreditAmount_no,
		        '5' as 'Journal_tx'

                FROM tb_tcheckdisbursementhdr a

	        LEFT JOIN
	        tb_tcheckdisbursementdtl as b
	        ON a.CDID_cd = b.CDID_cd

                WHERE   b.AccountID_cd = CASE mAccountID_cd
				                WHEN '' THEN b.AccountID_cd
				                ELSE mAccountID_cd END  AND
                        a.Post_yn like mStatus_ AND
                        a.CDDate_dt BETWEEN mStartDate_dt AND mEndDate_dt








                UNION






                SELECT  a.GJID_cd AS 'ControlID_cd',
		        a.GJDate_dt AS 'ControlDate_dt',
		        b.AccountID_cd, 
                  b.SubsidiaryID_cd,
		        b.Seq_no,
		        ROUND(b.DebitAmount_no,4) AS DebitAmount_no ,
		        ROUND(b.CreditAmount_no,4) AS CreditAmount_no,
		        '6' as 'Journal_tx'

                FROM tb_tgeneraljournalhdr a

	        LEFT JOIN
	        tb_tgeneraljournaldtl as b
	        ON a.GJID_cd = b.GJID_cd

                WHERE   b.AccountID_cd = CASE mAccountID_cd
				                WHEN '' THEN b.AccountID_cd
				                ELSE mAccountID_cd END  AND
                        a.Post_yn like mStatus_ AND
                        a.GJDate_dt BETWEEN mStartDate_dt AND mEndDate_dt) a


        LEFT JOIN  
        tb_mcoahdr as b
        ON a.AccountID_cd = b.AccountID_cd

        LEFT JOIN
        tb_mcoagroup as c
        ON b.GroupID_cd = c.GroupID_cd


        WHERE a.AccountID_cd <> ''

        GROUP BY a.AccountID_cd, 
        	 b.AccountDesc_tx,
	         b.Debit_yn,
             b.GroupID_cd,
                c.GroupName_tx

        ORDER BY b.AccountID_cd;                      
                        

END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_voyagereference_lookup`
--

DROP PROCEDURE IF EXISTS `sp_voyagereference_lookup`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_voyagereference_lookup`(IN mVoyageReference varchar(30))
BEGIN
select distinct(VoyageReference) from (
select ReferenceID_cd as VoyageReference  from tb_tcheckdisbursementhdr where ReferenceID_cd like concat('',mVoyageReference,'%')
	union all
select ReferenceID_cd as VoyageReference  from tb_tgeneraljournalhdr where ReferenceID_cd like concat('',mVoyageReference,'%')
	union all
 select ReferenceID_cd as VoyageReference  from tb_tcashsaleshdr where ReferenceID_cd like concat('',mVoyageReference,'%')
	union all
 select ReferenceID_cd as VoyageReference  from tb_tpurchaseshdr where ReferenceID_cd like concat('',mVoyageReference,'%')
) as a;	   
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;



/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
